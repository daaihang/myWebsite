[{"content":"#01 过去的一年看来比较\n","permalink":"http://localhost:1313/daily/25-02/","summary":"\u003ch1 id=\"01\"\u003e#01\u003c/h1\u003e\n\u003cp\u003e过去的一年看来比较\u003c/p\u003e","title":"最近的记录（第二辑）"},{"content":"引子 前段时间对博客进行了整理和翻新，趁着记忆还没完全模糊，将搭建博客的细节记录下来。个人而言，对目前博客的各项功能以及美观度还是比较满意的，而这些背后也付出了一定的努力，希望也对其他想折腾博客的人有些许帮助，那样就更好了！也作为博客分类「折腾」的第一篇，送给自己~\n注意：博客的主题是基于 Hugo 的 PaperMod 进行魔改，故而诸多相关细节未必适用于其他博客框架，请阅读理解后进行使用。另外，本博客相关源码也放在此，方便进行查阅\nMyPaperMod\rThis is the demo of my improved PaperMod theme. You can visit the introduction: https://yunpengtai.top/posts/hello-world/\rHTML\r关于本文涉及的一些用法示例，可以参见本篇文章的源码\n基础知识 这里主要介绍 Hugo 主题相关的基础知识，比如文件夹代表的意思，我使用的 Hugo 版本以及常用命令等，有基础的读者应直接跳至下一节进行阅读\n组成 开始之前，先说明一个比较重要的事情，你会发现 layouts 和 assets 在 themes 下某个主题里也有，不要在主题里进行修改，否则当你主题更新后，就比较麻烦，正确做法应该是在 themes 同级目录创建\n以下即为一个 Hugo 主题常见的组成结构：\n|—— assets # 放置 css 和 js |—— css |—— js |—— content # 放置网站内容，比如 posts，或者 friends.md |—— posts |—— hello-world.md friends.md # 友链内容 |—— data # 我是只放了 SVG.toml 文件 |—— layouts # 控制网站相关的布局 |—— _default # 主题内置的布局，如 single.html 代表一个帖子的布局 |—— partials # 放置你个人魔改的部件 |—— extend_footer.html # 代码会添加到原网站的 footer 里 |—— extend_head.html # 代码会添加到原网站的 head 里 |—— shortcodes # 一些好玩的 shortcodes 命令 |—— public # 渲染后的纯 HTML 代码，刚下载未渲染不会有该目录 |—— resources # 一般不用管 |—— static # 网站的字体以及 icon 放置目录 |—— fonts favicon.ico |—— themes |—— PaperMod config.yaml # 网站的配置文件 content 目录下的路径关系，即为网站上的链接顺序，比如 hello-world.md 访问链接便为：域名/posts/hello-world/，而 friends.md 便为 域名/friends BTW，如果想在文章中引用博客内容，可以省去域名[hello-world](/posts/hello-world)\n另外，Hugo 新手可能不知道 shortcodes 是啥意思，可以理解为一种快捷指令，具体的意思也可去 Hugo 官网 查看\nconfig.yaml 里面可以放置全局参数以及 menu 等信息，根据你所使用的主题文档进行修改即可。这里举个简单的例子，假如你希望你的网站遵循浏览器的亮暗偏好来加载，在 PaperMod 里就可以这样设置：\nparams: ... # 其他参数 defaultTheme: auto 调试和发布 我的 Hugo 一直是使用老版本：\nhugo version # hugo v0.117.0-b2f0696cad918fb61420a6aff173eb36662b406e linux/amd64 BuildDate=2023-08-07T12:49:48Z VendorInfo=gohugoio Hugo 常用的也就两个命令：\nhugo server # 进行本地调试 hugo # 正式渲染，结果在 public，将 public 上传至支持静态站的地方即可发布 另外关于 Hugo 中常见的变量以及支持的方法，也应该去官网查看更详细的记录，还有时常在 Hugo HTML 中出现的，类似如下内容是属于「Go」的模板函数，不只是 Go，如果有任何疑问，查看官网 doc 永远是第一选择\n{{ if or .Params.math .Site.Params.math }} ... {{ end }} 有了如上的基础知识后，我们可以来愉快的进行精装修了\n数学公式 $a=b$ 这是行内公式\n这是行间公式 $$\re=mc^2\r$$\n对于写技术 blog 的同志们来说，数学公式的适配几乎是必须的，然而很多主题未对数学公式进行适配，或者只是比较随意的适配（有些情况还是不会 work），我使用的这个主题作者就在 GitHub issues 里贴了所谓的实现方案，内容如下：\n{{ if or .Params.math .Site.Params.math }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\u0026#34; integrity=\u0026#34;sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.js\u0026#34; integrity=\u0026#34;sha384-g7c+Jr9ZivxKLnZTDUhnkOnsh30B4H0rpLUpJ4jAIKs4fnJI+sEnkvrMWph2EDg4\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/contrib/auto-render.min.js\u0026#34; integrity=\u0026#34;sha384-mll67QQFJfxn0IYznZYonOWZ644AWYC+Pt2cHqMaRhXVrursRwvLnLaebdGIlYNa\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; onload=\u0026#34;renderMathInElement(document.body);\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} 看似基本的公式可以正常显示，然而，当公式复杂起来，上述方案就不会 work 了，比如：\n$$ \\frac{\\partial E(\\boldsymbol{w})}{\\partial z_j} = \\sum\\limits_{k}\\frac{\\partial E(\\boldsymbol{w})}{\\partial y_{k}}\\frac{\\partial y_k}{\\partial z_{j}}= \\sum\\limits_{k} (y_{k}- \\hat{y}_{k}) w_{kj}^{(2)} \\tag{5.11} $$ 有了可以渲染数学元素的工具还不够，因为你还需要保证公式的内容并没有进行修改。举个例子，当你想要渲染 a_{1} + b_{1}，而 Hugo 可能将下划线渲染成 markdown 的模式：a\u0026lt;em\u0026gt;1 + b\u0026lt;/em\u0026gt;1，导致 mathjax 去渲染的时候找不到你原来的公式，进而导致了渲染的失败。解决方案是将带有公式的部分先用代码 block 装饰起来，避免内容被修改，接着再将代码 block 去掉，完整的送给渲染工具 借鉴了谢益辉的相关实现\n在 layouts/partials/extend_footer.html 中复制以下 js 代码：\n去掉数学公式的代码框 js\r\u0026lt;script\u0026gt; (function () { var i, text, code, codes = document.getElementsByTagName(\u0026#34;code\u0026#34;); for (i = 0; i \u0026lt; codes.length; ) { code = codes[i]; if (code.parentNode.tagName !== \u0026#34;PRE\u0026#34; \u0026amp;\u0026amp; code.childElementCount === 0) { text = code.textContent; if (/^\\$[^$]/.test(text) \u0026amp;\u0026amp; /[^$]\\$$/.test(text)) { text = text.replace(/^\\$/, \u0026#34;\\\\(\u0026#34;).replace(/\\$$/, \u0026#34;\\\\)\u0026#34;); code.textContent = text; } if ( /^\\\\\\((.|\\s)+\\\\\\)$/.test(text) || /^\\\\\\[(.|\\s)+\\\\\\]$/.test(text) || /^\\$(.|\\s)+\\$$/.test(text) || /^\\\\begin\\{([^}]+)\\}(.|\\s)+\\\\end\\{[^}]+\\}$/.test(text) ) { code.outerHTML = code.innerHTML; // remove \u0026lt;code\u0026gt;\u0026lt;/code\u0026gt; continue; } } i++; } })(); \u0026lt;/script\u0026gt; 接着在 layouts/partials/extend_head.html 中引用 layouts/partials/mathjax.html：由全局和网站变量来共同决定是否进行数学公式渲染 上述文件若是不存在则自己创建\n{{ if or .Params.math .Site.Params.math }} {{- partial \u0026#34;mathjax.html\u0026#34; .}} {{ end }} mathjax.html 的内容如下，当然我这里还加了额外的 boldsymbol 包，没有需求的可以去掉\nmathjax.html\r\u0026lt;script\u0026gt; MathJax = { loader: { load: [\u0026#34;[tex]/boldsymbol\u0026#34;] }, tex: { inlineMath: [ [\u0026#34;`$\u0026#34;, \u0026#34;$`\u0026#34;], [\u0026#34;\\\\(\u0026#34;, \u0026#34;\\\\)\u0026#34;], ], displayMath: [ [\u0026#34;`$$`\u0026#34;, \u0026#34;`$$`\u0026#34;], [\u0026#34;\\\\[\u0026#34;, \u0026#34;\\\\]\u0026#34;], ], processEscapes: true, processEnvironments: true, tags: \u0026#34;all\u0026#34;, packages: { \u0026#34;[+]\u0026#34;: [\u0026#34;boldsymbol\u0026#34;] }, }, }; \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/mathjax@3.2.2/es5/tex-chtml-full.js\u0026#34; integrity=\u0026#34;sha256-kbAFUDxdHwlYv01zraGjvjNZayxKtdoiJ38bDTFJtaQ=\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; 至此，数学公式的渲染问题就解决好了，使用时把原本的公式放入 code block 即可：\n`$a=b$` 行内公式 以下是行间公式 `$$ e=mc^2 $$` 评论系统 评论系统用过很多，比如用 GitHub 来驱动，或者自部署类比如 Waline，之前一直是用 Waline，有表情包，也支持邮箱通知等。但是，技术 blog 的评论系统怎么能没有「公式的集成」呢？所以我选择了Artalk，支持公式，表情，邮箱通知，自动亮暗模式等，功能很全，作者也在积极更新~\n概念上 Artalk 分为前后端以及存储所需要的数据库，先讲前端的配置，创建 layouts/partials/artalk.html，内容如下，因为我需要用到 katex，故而引入了其 css 和 js 相关的文件，读者应根据自己需要进行取舍\n最重要的是根据浏览器的偏好以及读者对网站的偏好来设置亮暗，首先第一次加载时网站和 Artalk 会按照浏览器的偏好来加载。接着，如果读者点击了网站的「亮暗切换按钮」，那么以后的加载就遵循网站的亮暗偏好，而非浏览器的偏好。实现的逻辑大概就是通过一些 element 来获取当前的偏好，不同主题的 element id 势必会有些许不同，故而不可照抄~\nartalk.html\r\u0026lt;!-- Artalk Doc 默认是 unpkg 的 CDN，尽量不要用，国内连通性不好 --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.16.7/dist/katex.min.css\u0026#34; integrity=\u0026#34;sha384-3UiQGuEI4TTMaFmGIZumfRPtfKQ3trwQE2JgosJxCnGmQpL/lJdjpcHkaaFwHlcI\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.16.7/dist/katex.min.js\u0026#34; integrity=\u0026#34;sha384-G0zcxDFp5LWZtDuRMnBkk3EphCK1lhEf4UEyEM693ka574TZGwo4IWwS6QLzM/2t\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/artalk@2.8.6/dist/Artalk.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/@artalk/plugin-katex@0.2.4/dist/artalk-plugin-katex.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;div id=\u0026#34;Comments\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const savedTheme = localStorage.getItem(\u0026#34;pref-theme\u0026#34;); let darkMode = \u0026#34;auto\u0026#34;; // 查看网站是否已经设置了亮暗偏好 if (savedTheme !== null) { darkMode = savedTheme === \u0026#34;dark\u0026#34; ? true : false; } const artalk = Artalk.init({ el: \u0026#34;#Comments\u0026#34;, // 绑定元素的 Selector pageKey: \u0026#34;\u0026#34;, pageTitle: \u0026#34;{{ .Title }}\u0026#34;, server: \u0026#34;{{ site.Params.artalk.server }}\u0026#34;, // 后端地址 site: \u0026#34;{{ site.Params.artalk.site }}\u0026#34;, // 你的站点名 darkMode: darkMode, // 首次打开时自动亮暗模式 versionCheck: false, // 不提醒需要更新，还需要后端也设置，后端 \u0026gt; 前端 }); document.getElementById(\u0026#34;theme-toggle\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { document.body.className.includes(\u0026#34;dark\u0026#34;) ? artalk.setDarkMode(!1) : artalk.setDarkMode(!0); }); \u0026lt;/script\u0026gt; 另外，关于停用版本检测，不仅要设置前端的参数，后端的参数也需要设置为 false，具体即为 render 上的 conf.yaml\n接着在同级目录中创建 comments.html 来引用即可：\n{{ if or .Params.comments .Site.Params.comments }} {{- partial \u0026#34;artalk.html\u0026#34; .}} {{ end }} 关于数据库以及后端部署的部署，很大程度得益于这位网友的帖子，重复内容就不多赘述，我选择的是 Neon+Render 来分别部署数据库和后端，关于 Render 部署的详细文件，可以参考这里。这里为表情包多做一条说明，如果是希望网站支持表情包，则在 conf.yaml 中的 emoticons 项中加入表情包的远程链接\nemoticons: link_to_artalk.json 关于此文件的具体格式，可以参考我的表情包配置仓库，至此，评论系统集成也已经完毕。当然，本网站的 artalk 看上去可能与你们的有些许不同，比如表情包的大小以及没有头像，我自己又改了一些 CSS 来完成上述目标，创建 assets/css/extended/artalk.css，将 artalk 对应的 CSS 内容复制进去，然后修改为以下内容，如果没搜到对应的 CSS 项，就直接新建即可（关于字体的导入，在字体设置）\nArtalk css\r/* 改变表情包大小 */ img[atk-emoticon] { width: 5em; height: auto; display: initial; } /* 下列内容可能存在于原来的 CSS 文件内，请查找后进行修改 */ .atk-comment \u0026gt; .atk-avatar img { width: 50px; height: 50px; border-radius: 3px; display: none; /* 移除头像 */ } /* artalk 代码相关的字体与正文对齐 */ .artalk code, .atk-layer-wrap code { font-family: \u0026#34;Consolas\u0026#34;, \u0026#34;LXGWWenKaiScreenR\u0026#34;; margin: 0 0.05em; padding: 0 0.4em; display: inline-block; vertical-align: middle; font-size: 0.9em; background-color: var(--at-color-bg-grey); color: var(--at-color-font); border-radius: 2px; } .artalk pre code *, .atk-layer-wrap pre code * { font-family: \u0026#34;Consolas\u0026#34;, \u0026#34;LXGWWenKaiScreenR\u0026#34;; } 至于字体方面，等后面讲网站字体介绍即可，并未加其他特殊设置。关于邮箱通知，你需要去专门进行相关设置，请根据官方文档进行，比较简单，这里进行省略\n更好看 这一节主要讲为了博客变得更好看做的改变\n字体 我对博客的字体向来是比较挑剔，而且这很影响读者的观感，我比较喜欢霞鹜文楷，这款字体好看而且是开源的。不过该字体可不小，对于个人的轻量级 blog 来说，还是存在着优化的可能性，故而，我在博客上使用的是 woff2 格式文件，大小只有 2 M，直接放到了 static/fonts 目录，有需要可以去我的仓库里下载。同时英文使用 Apple 的字体 SF Pro Text Regular 来渲染，然后用 CSS 来控制字体加载即可：\n字体 CSS 设置\r@font-face { font-family: \u0026#34;LXGWWenKaiScreenR\u0026#34;; src: url(\u0026#34;/fonts/lxgwwenkaiscreen.subset.v1.235.standard.woff2\u0026#34;); } /* https://www.webfontfree.com/cn/download/SFProText-Regular */ @font-face { font-family: \u0026#34;SFProText-Regular\u0026#34;; src: url(\u0026#34;/fonts/SFProText-Regular.woff2\u0026#34;); } body { font-family: \u0026#34;SFProText-Regular\u0026#34;, \u0026#34;LXGWWenKaiScreenR\u0026#34;; font-size: 16px; line-height: 1.6; word-break: break-word; background: var(--theme); font-display: swap; } 代码渲染 代码渲染的主题其实也是见仁见智吧，我个人是选择了atom-one-dark/light\n这里提供一下修改方法，因为我们需要覆盖掉原先主题对于代码渲染的设置，所以在 assets/css/hljs 中创建 an-old-hope.min.css ，注意，必须为该名字，当然如果是 Hugo PaperMod 主题肯定另有不同，然后直接复制相关的 CSS 进去。\n这里唯一需要注意的是亮暗模式的设置，对于亮色模式，直接拷贝 light 即可，但对于暗色来说，则需要一些特定的限定：\nbody.dark { .hljs { color: #abb2bf; background: #282c34; } ... } 同时，需要修改亮暗模式下代码框的背景颜色，这里是直接用变量来进行替代。然后关于代码的字体设置，笔者使用 Consolas 和霞鹜文楷（注释的中文字体）。为了防止有些读者并没有 Consolas 字体，这里保险起见还是下载下来。另外注意，因为我之前的 CSS 中加载了霞鹜文楷，如果你没有加载，还是需要多写一个 font-face\n代码 CSS 设置\r@font-face { font-family: \u0026#34;Consolas\u0026#34;; src: url(\u0026#34;/fonts/Consolas.woff2\u0026#34;); } code { font-family: \u0026#34;Consolas\u0026#34;, \u0026#34;LXGWWenKaiScreenR\u0026#34;; } .post-content code { margin: auto 4px; padding: 4px 6px; font-size: 0.8em; line-height: 1.5; background: var(--code-bg); } .post-content pre code { display: block; margin: auto 0; padding: 10px; background: var(--hljs-bg) !important; color: var(--content); border-radius: var(--radius); overflow-x: auto; word-break: break-all; font-family: \u0026#34;Consolas\u0026#34;, \u0026#34;LXGWWenKaiScreenR\u0026#34;; font-size: 15px; } 亮暗相关的两个变量进行设置的地方在 assets/css/core/theme-vars.css 这里：\ntheme-vars.css\r/* 省略的内容请拷贝原先主题对应的文件 */ :root { ... --hljs-bg: #f7f7f7; --code-bg: rgb(245, 245, 245); } .dark { ... --hljs-bg: rgb(46, 46, 51); --code-bg: rgb(55, 56, 62); } 表格 对主题自带的表格渲染也进行修改，同时适配亮暗模式，还是需要注意暗色模式下的设置\n姓名 年龄 职业 张三 30 工程师 李四 25 设计师 王五 35 医生 表格 CSS\rtable { border-collapse: collapse; display: table; margin-bottom: 1rem; width: 100%; overflow-x: auto; -webkit-overflow-scrolling: touch; \u0026amp; thead th { vertical-align: bottom; border-bottom: 2px solid #dee2e6; } \u0026amp; td, \u0026amp; th { vertical-align: top; border-top: 1px solid #dee2e6; border-bottom: 1px solid #dee2e6; } \u0026amp; tbody tr:hover { background-color: rgba(0, 0, 0, 0.075); } \u0026amp; tbody tr:nth-of-type(2n + 1) { background-color: rgba(0, 0, 0, 0.05); } \u0026amp; tr:last-of-type { vertical-align: bottom; border-bottom: 2px solid #dee2e6; } } .dark table { border-collapse: collapse; display: table; margin-bottom: 1rem; width: 100%; overflow-x: auto; -webkit-overflow-scrolling: touch; \u0026amp; thead th { vertical-align: bottom; border-bottom: 2px solid var(--code-bg); } \u0026amp; td, \u0026amp; th { vertical-align: top; border-top: 1px solid var(--code-bg); border-bottom: 1px solid var(--code-bg); } \u0026amp; tbody tr:hover { background-color: var(--code-bg); } \u0026amp; tbody tr:nth-of-type(2n + 1) { background-color: var(--code-bg); } \u0026amp; tr:last-of-type { vertical-align: bottom; border-bottom: 2px solid var(--code-bg); } } svg icon 觉得主页上的 icon 不太好看也可以进行修改，修改的方法就是将原来主题中的 layouts/partials/svg.html 拷贝到我们的 partials 目录，然后就选择自己想要的 icon 进行修改，这样就会覆盖了\n更便于阅读 这一节主要讲博客为了更方便读者阅读做出的努力\nMermaid 图 flowchart TB\rStart[客户端发起请求] --\u0026gt; fake[fake-ip 反查]\rfake[fake-ip 反查] --\u0026gt; Domain[基于域名匹配规则]\rfake --\u0026gt; |fakeip-filter|system[系统解析 DNS]\rDomain --\u0026gt; |匹配过程中|IP[遇到 IP 规则]\rDomain --\u0026gt; reject[匹配到 Reject 规则]\rDomain --\u0026gt; |匹配到直连规则|Cache\rIP --\u0026gt; Cache\rDomain --\u0026gt; |匹配到代理规则|Remote[通过代理服务器解析域名并建立连接]\rCache --\u0026gt; |Cache 未命中|NS[匹配 nameserver-policy 并查询 ]\rCache --\u0026gt; |Cache 命中|Get\rNS --\u0026gt; |匹配成功| Get[将查询到的 IP 用于匹配 IP 规则]\rNS --\u0026gt; |没匹配到| NF[nameserver/fallback 并发查询]\rNF --\u0026gt; Get[查询得到 IP]\rGet --\u0026gt; |缓存 DNS 结果|Cache[(查询 DNS 缓存)]\rMermaid js 可以可以让我们用代码的方式画流程图（如上图），在文章的概念比较多或者关系复杂时，流程图就可以让读者更容易看懂，故而也引入了 mermaid 的实现\n首先创建 layouts/_default/_markup/render-codeblock-mermaid.html，写入以下内容：\n\u0026lt;!-- 因为正常写会有 ```meraid ... ``` --\u0026gt; \u0026lt;pre class=\u0026#34;mermaid\u0026#34;\u0026gt; {{- .Inner | htmlEscape | safeHTML }} \u0026lt;/pre\u0026gt; {{ .Page.Store.Set \u0026#34;hasMermaid\u0026#34; true }} 这样就可以将 mermaid 这种特殊的 codeblock 加入渲染机制里，同时设置 hasMermaid 为 true，方便后面判断是否加载 mermaid js。接着我们创建 layouts/partials/mermaid.html，来让 mermaid js 对我们写的代码进行渲染\n同时支持亮暗自动切换，大部分代码片段取自于 mermaid-js社区的讨论，然而默认的代码是初次渲染是查看 localStorage 是否包含 pref-theme，很多时候用户并未手动点击切换是不会有这个值，即为 null。我这里是判断 document.body.className 是否包含 dark 来判断，更为准确\nmermaid 的字体设置依然是对齐正文，使用mermaid.init()设置即可：\nmermaid.html 文件\r{{ if .Page.Store.Get \u0026#34;hasMermaid\u0026#34; }} \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const elementCode = \u0026#34;.mermaid\u0026#34;; const loadMermaid = function (theme) { mermaid.initialize({ theme }); mermaid.init({ theme, themeVariables: { // 这里设置字体跟正文一致 fontFamily: [\u0026#34;SFProText-Regular\u0026#34;, \u0026#34;LXGWWenKaiScreenR\u0026#34;] }}, document.querySelectorAll(elementCode)); }; const saveOriginalData = function () { return new Promise((resolve, reject) =\u0026gt; { try { var els = document.querySelectorAll(elementCode), count = els.length; els.forEach((element) =\u0026gt; { element.setAttribute(\u0026#34;data-original-code\u0026#34;, element.innerHTML); count--; if (count == 0) { resolve(); } }); } catch (error) { reject(error); } }); }; const resetProcessed = function () { return new Promise((resolve, reject) =\u0026gt; { try { var els = document.querySelectorAll(elementCode), count = els.length; els.forEach((element) =\u0026gt; { if (element.getAttribute(\u0026#34;data-original-code\u0026#34;) != null) { element.removeAttribute(\u0026#34;data-processed\u0026#34;); element.innerHTML = element.getAttribute(\u0026#34;data-original-code\u0026#34;); } count--; if (count == 0) { resolve(); } }); } catch (error) { reject(error); } }); }; saveOriginalData().catch(console.error); // 不要用 localStorage.getItem(\u0026#34;pref-theme\u0026#34;)，因为有些时候会为 null let isdark = document.body.className.includes(\u0026#34;dark\u0026#34;); if (isdark) { resetProcessed().then(loadMermaid(\u0026#34;dark\u0026#34;)).catch(console.error); } else { resetProcessed().then(loadMermaid(\u0026#34;neutral\u0026#34;)).catch(console.error); } document.getElementById(\u0026#34;theme-toggle\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { resetProcessed(); document.body.className.includes(\u0026#34;dark\u0026#34;) ? loadMermaid(\u0026#34;neutral\u0026#34;) : loadMermaid(\u0026#34;dark\u0026#34;).catch(console.error); }); \u0026lt;/script\u0026gt; {{ end }} 最后再在 layouts/_default/single.html 中加入引用 mermaid.html 的部分，注意，single.html 你如果一开始没有，需要先去主题 themes/PaperMod/layouts/_default/single.html 那里拷贝原来的 single.html 到上面这个地址\n\u0026lt;article\u0026gt; \u0026lt;!-- 省略上面的 --\u0026gt; {{- partial \u0026#34;mermaid.html\u0026#34; . }} \u0026lt;/article\u0026gt; 侧边悬浮目录 悬浮目录是比较重要的，原始的目录是固定在文章的顶部，这样不便于读者阅读时对目录有直观的把握，也不利于读者进行快速跳转。\n在 assets/css/extended/toc.css 中添加代码即可 借鉴了 sulvblog 的实现\n悬浮目录 CSS\r:root { --article-width: 650px; --toc-width: 230px; } .toc { margin: 0 2px 40px 2px; border: 1px solid var(--border); background: var(--entry); border-radius: var(--radius); padding: 0.4em; } .toc-container.wide { position: absolute; height: 100%; border-right: 1px solid var(--border); left: calc((var(--toc-width) * 0.9 + var(--gap)) * -1); top: calc(var(--gap) * 2); width: var(--toc-width); } .wide .toc { position: sticky; top: var(--gap); border: unset; background: unset; border-radius: unset; width: 100%; margin: 0 2px 40px 2px; } .toc details summary { cursor: zoom-in; margin-inline-start: 20px; padding: 12px 0; } .toc details[open] summary { font-weight: 500; } .toc-container.wide .toc .inner { margin: 0; } .toc .active { font-size: 110%; font-weight: 600; color: #614a85; text-decoration: underline; } .toc ul { list-style-type: circle; } .toc .inner { margin: 0 0 0 20px; padding: 0px 15px 15px 20px; font-size: 16px; /*目录显示高度*/ max-height: 83vh; overflow-y: auto; } .toc .inner::-webkit-scrollbar-thumb { /*滚动条*/ background: var(--border); border: 7px solid var(--theme); border-radius: var(--radius); } .toc li ul { margin-inline-start: calc(var(--gap) * 0.5); list-style-type: none; } .toc li { list-style: none; font-size: 0.95rem; padding-bottom: 5px; } .toc li a:hover { color: var(--secondary); } 添加修改时间 原先的主题并没有显示「修改时间」的功能，这对于读者阅读起来并不是好事情，像我阅读时就会关注文章最后一次的修改日期，否则可能会过时\n在 layouts/partials/post_meta.html 中加入以下内容即可：\n{{- if (.Param \u0026#34;ShowLastMod\u0026#34;) -}} {{ if ne (.Lastmod.Format \u0026#34;2006-01-02\u0026#34;) (.Date.Format \u0026#34;2006-01-02\u0026#34;) }} {{- `$scratch.Add \u0026#34;meta\u0026#34; (slice (printf \u0026#34;Updated:\u0026amp;nbsp;%s\u0026#34; (.Lastmod.Format (.Site.Params.dateFormat | default \u0026#34;January 2, 2006\u0026#34;)))) }}$` {{- end -}} {{- end -}} 然后在具体的帖子里加入 lastmod 和 showLastMod 即可显示出修改的时间了\n--- title: 新的主题 date: 2022-06-19 11:10:00 +0800 lastmod: 2024-11-20 18:00:00 +0800 showLastMod: true ... --- MarginNote 这是示例 这是示例的侧边注解\n很多时候想补充说明，或者引用某些内容时，常见的脚注就必须跳转到文章末尾进行阅读，然后读者还需要跳回来，这就十分不方便，而 MarginNote 则并不会有这些问题，借由 MarginNote， 就可以在文章的侧边来显示信息，读者阅读起来也会方便很多 借鉴了 kennethfriedman 和 scripter\n首先来说相关的 CSS，主题的实现也是通过 CSS 来进行实现，以及 sidenote number 的增减，不过有些时候会有 bug，故而，为了方便起见，我索性将 number 变为固定的「#」，显示起来也比较美观\nMarginNote CSS\r.sidenote { float: right; position: relative; margin-right: -18vw; width: 40%; max-width: 200px; } body { counter-reset: sidenote-counter; } .sidenote-number { counter-increment: sidenote-counter; } .sidenote::before { content: \u0026#34;# \u0026#34;; position: relative; font-size: 0.9em; font-weight: 700; color: red; } .sidenote-number::after { content: \u0026#34;#\u0026#34;; vertical-align: super; font-size: 0.8em; font-weight: 700; color: #409dff; } .sidenote-number:hover .sidenote { background-color: var(--sidenote-bg); } 光有 CSS 还不够，我们上面定义的这些特殊的 HTML 元素，都得创建才行，在 layouts/shortcodes/sidenote.html 中写入以下内容\n\u0026lt;span class=\u0026#34;sidenote-number\u0026#34;\u0026gt;\u0026lt;small class=\u0026#34;sidenote\u0026#34;\u0026gt;{{ .Inner | markdownify }}\u0026lt;/small\u0026gt;\u0026lt;/span\u0026gt; .Inner 就代表是输入的内容，而 | markdownify 是为了支持 markdown 渲染，比如超链接等语法\n图片点击放大 Black Holes: Monsters in Space\n当图片细节很多或图片很大时，放在博客上就难免会进行大比例缩放，此时读者若是不能放大查看该图片，想必会十分苦恼，故而图片点击放大的功能也是必不可少的，具体是通过引入 fancybox 来实现：\n在 layouts/shortcodes/figure.html 中填入以下内容即可\nfigure.html\r\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/jquery@3.4.1/dist/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;a data-fancybox=\u0026#34;gallery\u0026#34; href=\u0026#34;{{ .Get \u0026#34;src\u0026#34; }}\u0026#34;\u0026gt; \u0026lt;figure{{ if or (.Get \u0026#34;class\u0026#34;) (eq (.Get \u0026#34;align\u0026#34;) \u0026#34;center\u0026#34;) }} class=\u0026#34; {{- if eq (.Get \u0026#34;align\u0026#34;) \u0026#34;center\u0026#34; }}align-center {{ end }} {{- with .Get \u0026#34;class\u0026#34; }}{{ . }}{{- end }}\u0026#34; {{- end -}}\u0026gt; {{- if .Get \u0026#34;link\u0026#34; -}} \u0026lt;a href=\u0026#34;{{ .Get \u0026#34;link\u0026#34; }}\u0026#34;{{ with .Get \u0026#34;target\u0026#34; }} target=\u0026#34;{{ . }}\u0026#34;{{ end }}{{ with .Get \u0026#34;rel\u0026#34; }} rel=\u0026#34;{{ . }}\u0026#34;{{ end }}\u0026gt; {{- end }} \u0026lt;img loading=\u0026#34;lazy\u0026#34; src=\u0026#34;{{ .Get \u0026#34;src\u0026#34; }}{{- if eq (.Get \u0026#34;align\u0026#34;) \u0026#34;center\u0026#34; }}#center{{- end }}\u0026#34; {{- if or (.Get \u0026#34;alt\u0026#34;) (.Get \u0026#34;caption\u0026#34;) }} alt=\u0026#34;{{ with .Get \u0026#34;alt\u0026#34; }}{{ . }}{{ else }}{{ .Get \u0026#34;caption\u0026#34; | markdownify| plainify }}{{ end }}\u0026#34; {{- end -}} {{- with .Get \u0026#34;width\u0026#34; }} width=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;height\u0026#34; }} height=\u0026#34;{{ . }}\u0026#34;{{ end -}} /\u0026gt; \u0026lt;!-- Closing img tag --\u0026gt; {{- if .Get \u0026#34;link\u0026#34; }}\u0026lt;/a\u0026gt;{{ end -}} {{- if or (or (.Get \u0026#34;title\u0026#34;) (.Get \u0026#34;caption\u0026#34;)) (.Get \u0026#34;attr\u0026#34;) -}} \u0026lt;figcaption\u0026gt; {{ with (.Get \u0026#34;title\u0026#34;) -}} {{ . }} {{- end -}} {{- if or (.Get \u0026#34;caption\u0026#34;) (.Get \u0026#34;attr\u0026#34;) -}}\u0026lt;p\u0026gt; {{- .Get \u0026#34;caption\u0026#34; | markdownify -}} {{- with .Get \u0026#34;attrlink\u0026#34; }} \u0026lt;a href=\u0026#34;{{ . }}\u0026#34;\u0026gt; {{- end -}} {{- .Get \u0026#34;attr\u0026#34; | markdownify -}} {{- if .Get \u0026#34;attrlink\u0026#34; }}\u0026lt;/a\u0026gt;{{ end }}\u0026lt;/p\u0026gt; {{- end }} \u0026lt;/figcaption\u0026gt; {{- end }} \u0026lt;/figure\u0026gt; \u0026lt;/a\u0026gt; 当然上面还不止是增加了图片点击放大的功能，还加了 align，caption 等功能\n盘古之白 个人认为，中文和英文以及数字之间有空格会更加便于阅读，这个空格也被称为「盘古之白」，像是劈开了这几者之间的混沌， 实现起来也十分简便：\n在 layouts/partials/extend_footer.html 中加入以下内容：\n盘古之白配置\r{{- `$highlight := resources.Get \u0026#34;js/pangu.min.js\u0026#34; }}$` \u0026lt;script\u0026gt; (function (u, c) { var d = document, t = \u0026#34;script\u0026#34;, o = d.createElement(t), s = d.getElementsByTagName(t)[0]; o.src = u; if (c) { o.addEventListener(\u0026#34;load\u0026#34;, function (e) { c(e); }); } s.parentNode.insertBefore(o, s); })(\u0026#34;{{ $highlight.RelPermalink }}\u0026#34;, function () { pangu.spacingPage(); }); \u0026lt;/script\u0026gt; 我这里是将 pangu.min.js 下载到了网站本地，具体是在 assets/js/pangu.min.js，当网站加载时，盘古之白会自动进行渲染\n代码折叠 示例代码\rprint(\u0026#39;Acc: 100%\u0026#39;) 对于代码比较多的 blog，比如这篇，很多代码较长会影响阅读，占用很多篇幅，如果可以折叠，需要的时候点击展开就会很方便，折叠功能实现起来也比较方便，在 layouts/shortcodes/collapse.html 中加入以下内容：\n{{ if .Get \u0026#34;summary\u0026#34; }} {{ else }} {{ warnf \u0026#34;missing value for param \u0026#39;summary\u0026#39;: %s\u0026#34; .Position }} {{ end }} \u0026lt;p\u0026gt;\u0026lt;details {{ if (eq (.Get \u0026#34;openByDefault\u0026#34;) true) }} open=true {{ end }}\u0026gt; \u0026lt;summary markdown=\u0026#34;span\u0026#34;\u0026gt;{{ .Get \u0026#34;summary\u0026#34; | markdownify }}\u0026lt;/summary\u0026gt; {{ .Inner | markdownify }} \u0026lt;/details\u0026gt;\u0026lt;/p\u0026gt; 版权声明 也许你也需要修改文章末尾的版权说明，那么就在 layouts/partials/post_copyright.html 中加入自己的版权声明即可\n文章分类 有时候我们想要发表截然不同类型的文章，比如我主要会发深度学习以及 AI 相关的，但我也会写「折腾」相关的，就需要有不同的分类\n先在 config.yaml 中加入以下内容：\nparams: taxonomies: category: categories tag: tags 然后在写文章的时候，可以编辑文章的元信息来进行分类，同时还可以不在主页显示\n--- title: 新的主题 date: 2022-06-19 11:10:00 +0800 categories: [折腾] hiddenInHomeList: true ... --- 但是不在主页显示后读者就不容易找到，此时我们在 config.yaml 中额外加个 menu 即可：\nmenu: main: ... - identifier: categories name: 折腾 url: /categories/折腾 weight: 20 接着再寻找到 layouts/_default/single.html 中的 post-meta 类，在里面加入代码来让文章的元信息栏（显示时间，有多少词的地方）显示分类\n修改 single.html 加入分类信息\r\u0026lt;div class=\u0026#34;post-meta\u0026#34;\u0026gt; {{- partial \u0026#34;post_meta.html\u0026#34; . -}} {{- partial \u0026#34;translation_list.html\u0026#34; . -}} {{- partial \u0026#34;edit_post.html\u0026#34; . -}} {{- partial \u0026#34;post_canonical.html\u0026#34; . -}} \u0026lt;!-- 在元数据中显示分类信息 --\u0026gt; {{- $categories := .Language.Params.Taxonomies.category | default \u0026#34;categories\u0026#34;}} \u0026lt;!-- 统计分类个数 --\u0026gt; {{- $cnt := 0 }} {{- range ($.GetTerms $categories) }} {{- $cnt = add $cnt 1 }} {{- end }} \u0026lt;!-- 只有文章有分类信息时才显示 --\u0026gt; {{- if gt $cnt 0 }} {{- $i := 0 }} \u0026lt;div class=\u0026#34;meta-item\u0026#34;\u0026gt;\u0026amp;nbsp·\u0026amp;nbsp {{- range ($.GetTerms $categories) }} \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt; {{ $i = add $i 1 }} \u0026lt;!-- 不是最后一个类别时，添加逗号分割类别 --\u0026gt; {{- if lt $i $cnt}} \u0026lt;span\u0026gt;,\u0026lt;/span\u0026gt; {{- end }} {{- end }} \u0026lt;/div\u0026gt; {{- end }} \u0026lt;/div\u0026gt; {{- end }} Shortcodes 大赏 这里分享一些我比较常用的shortcode，也欢迎评论区分享你觉得有趣的\n旋转的友链 Aaron Swartz\r用以缅怀自由斗士 Aaron\r当鼠标悬浮至友链所对应的头像时，头像便会开始进行旋转，这个还挺有趣的，首先在 assets/css/extended/friends.css 中加入以下内容： 借鉴了 sulvblog\n旋转友链的 CSS 设置\r.friendurl { text-decoration: none !important; color: black; box-shadow: none !important; } .myfriend { width: 56px !important; height: 56px !important; border-radius: 50% !important; padding: 2px; margin-top: 20px !important; margin-left: 14px !important; background-color: #fff; } .frienddiv { overflow: auto; height: 100px; width: 49%; display: inline-block !important; border-radius: 5px; background: none; -webkit-transition: all ease-out 0.3s; -moz-transition: all ease-out 0.3s; -o-transition: all ease-out 0.3s; transition: all ease-out 0.3s; } .dark .frienddiv:hover { background: var(--code-bg); } .frienddiv:hover { background: var(--theme); transition: transform 1s; webkit-transform: scale(1.1); -moz-transform: scale(1.2); -ms-transform: scale(1.2); -o-transform: scale(1.2); transform: scale(1.1); } .frienddiv:hover .frienddivleft img { transition: 0.9s !important; -webkit-transition: 0.9s !important; -moz-transition: 0.9s !important; -o-transition: 0.9s !important; -ms-transition: 0.9s !important; transform: rotate(360deg) !important; -webkit-transform: rotate(360deg) !important; -moz-transform: rotate(360deg) !important; -o-transform: rotate(360deg) !important; -ms-transform: rotate(360deg) !important; } .frienddivleft { width: 92px; float: left; margin-right: -5px; } .frienddivright { margin-top: 18px; margin-right: 18px; } .friendname { text-overflow: ellipsis; font-size: 100%; margin-bottom: 5px; color: var(--primary); } .friendinfo { text-overflow: ellipsis; font-size: 70%; color: var(--primary); } @media screen and (max-width: 600px) { .friendinfo { display: none; } .frienddivleft { width: 84px; margin: auto; } .frienddivright { height: 100%; margin: auto; display: flex; align-items: center; justify-content: center; } .friendname { font-size: 18px; } } 接着在 layouts/shortcodes/friend.html 中加入以下内容：\nfriend.html 内容\r{{- if .IsNamedParams -}} \u0026lt;a target=\u0026#34;_blank\u0026#34; href={{ .Get \u0026#34;url\u0026#34; }} title={{ .Get \u0026#34;name\u0026#34; }} class=\u0026#34;friendurl\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;frienddiv\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;frienddivleft\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;myfriend\u0026#34; src={{ .Get \u0026#34;logo\u0026#34; }} /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;frienddivright\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;friendname\u0026#34;\u0026gt;{{- .Get \u0026#34;name\u0026#34; -}}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;friendinfo\u0026#34;\u0026gt;{{- .Get \u0026#34;word\u0026#34; -}}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; {{- end }} Blockquote Basically, I’m not interested in doing research and I never have been… I’m interested in understanding, which is quite a different thing. And often to understand something you have to work it out yourself because no one else has done it. — David Blackwell\n这个主题原来的 blockquote 较为丑，在 layouts/shortcodes/quote.html 加入以下内容 借鉴了 Guan Qirui\nBlockquote html 设置\r\u0026lt;blockquote class=\u0026#34;quote{{ range .Params }} {{ . }}{{ end }}\u0026#34;\u0026gt; {{- `$content := .Inner | markdownify -}}$` {{- if not (strings.HasPrefix `$content \u0026#34;\u0026lt;p\u0026gt;\u0026#34;) }}$` {{ printf `\u0026lt;p\u0026gt;%s\u0026lt;/p\u0026gt;` `$content | safeHTML }}$` {{- else }} {{- `$content }}$` {{- end -}} \u0026lt;/blockquote\u0026gt; 然后创建 assets/css/extended/quote.css 并加入以下内容\nBlockquote 的 css 配置\rblockquote.quote { position: relative; margin: 1em auto; padding-left: 3em; border: none; } blockquote.quote::before { position: absolute; left: 0; content: \u0026#34;“\u0026#34;; font-size: 3em; font-weight: bold; line-height: 1; } blockquote.quote-copyright { position: relative; margin: 2em auto; padding-left: 3em; border: none; background-color: aliceblue; } blockquote.quote-copyright::before { position: absolute; left: 0; content: \u0026#34;“\u0026#34;; font-size: 3em; font-weight: bold; line-height: 1; } Github 小卡片 Github 仓库小卡片对我来说还是比较重要的，因为我一般代码都会进行开源，如果可以用一种卡片的方式提醒读者开源代码所在处，就省了读者去查找的功夫了，首先在 assets/css/extended/github.css 中填入以下内容：\nGithub 卡片相关 CSS 设置\r.github { border: 0px solid; border-radius: 5px; width: 95%; margin-bottom: 1em; margin-top: 1em; padding: 1em; background-color: var(--code-bg); .github_bar { margin-top: -0.6em; margin-left: 0; } .github_name { font-weight: bold; text-decoration: none; font-size: 24px; position: relative; top: -0.6em; left: 0.3em; } .github_description { margin-top: -0.3em; margin-bottom: 1em; color: var(--color-contrast-high); text-align: justify; font-size: 90%; width: 95%; transition: all 0.5s; } .github_language { margin-top: -0.6em; } .github_language_name { color: var(--color-contrast-high); font-size: 90%; margin-left: 0.5em; transition: all 0.5s; } } 接着，在 layouts/shortcodes/github.html 中加入以下内容：\ngithub.html 内容\r\u0026lt;div class=\u0026#34;github\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;github_bar\u0026#34;\u0026gt; {{ replace `$.Site.Data.SVG.repository \u0026#34;icon\u0026#34; \u0026#34;icon github-icon\u0026#34; | safeHTML }}$` \u0026lt;a class=\u0026#34;github_name\u0026#34; href={{ .Get \u0026#34;link\u0026#34; }} target=\u0026#34;_blank\u0026#34;\u0026gt;{{ .Get \u0026#34;name\u0026#34; }}\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;github_description\u0026#34;\u0026gt;{{ .Get \u0026#34;description\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;github_language\u0026#34;\u0026gt; {{ .Get \u0026#34;language\u0026#34; }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 最后在 data 中添加 SVG.toml 并加入以下内容\nrepository = \u0026#39;\u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;50\u0026#34; height=\u0026#34;50\u0026#34; viewBox=\u0026#34;0 0 50 50\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M17.791,46.836C18.502,46.53,19,45.823,19,45v-5.4c0-0.197,0.016-0.402,0.041-0.61C19.027,38.994,19.014,38.997,19,39 c0,0-3,0-3.6,0c-1.5,0-2.8-0.6-3.4-1.8c-0.7-1.3-1-3.5-2.8-4.7C8.9,32.3,9.1,32,9.7,32c0.6,0.1,1.9,0.9,2.7,2c0.9,1.1,1.8,2,3.4,2 c2.487,0,3.82-0.125,4.622-0.555C21.356,34.056,22.649,33,24,33v-0.025c-5.668-0.182-9.289-2.066-10.975-4.975 c-3.665,0.042-6.856,0.405-8.677,0.707c-0.058-0.327-0.108-0.656-0.151-0.987c1.797-0.296,4.843-0.647,8.345-0.714 c-0.112-0.276-0.209-0.559-0.291-0.849c-3.511-0.178-6.541-0.039-8.187,0.097c-0.02-0.332-0.047-0.663-0.051-0.999 c1.649-0.135,4.597-0.27,8.018-0.111c-0.079-0.5-0.13-1.011-0.13-1.543c0-1.7,0.6-3.5,1.7-5c-0.5-1.7-1.2-5.3,0.2-6.6 c2.7,0,4.6,1.3,5.5,2.1C21,13.4,22.9,13,25,13s4,0.4,5.6,1.1c0.9-0.8,2.8-2.1,5.5-2.1c1.5,1.4,0.7,5,0.2,6.6c1.1,1.5,1.7,3.2,1.6,5 c0,0.484-0.045,0.951-0.11,1.409c3.499-0.172,6.527-0.034,8.204,0.102c-0.002,0.337-0.033,0.666-0.051,0.999 c-1.671-0.138-4.775-0.28-8.359-0.089c-0.089,0.336-0.197,0.663-0.325,0.98c3.546,0.046,6.665,0.389,8.548,0.689 c-0.043,0.332-0.093,0.661-0.151,0.987c-1.912-0.306-5.171-0.664-8.879-0.682C35.112,30.873,31.557,32.75,26,32.969V33 c2.6,0,5,3.9,5,6.6V45c0,0.823,0.498,1.53,1.209,1.836C41.37,43.804,48,35.164,48,25C48,12.318,37.683,2,25,2S2,12.318,2,25 C2,35.164,8.63,43.804,17.791,46.836z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;/svg\u0026gt;\u0026#39; 各种 notice 一生疏狂尽余欢，半剖肝胆入剑寒。 剑至高危如蜀道，生逢穷途行路难。\n一生疏狂尽余欢，半剖肝胆入剑寒。 剑至高危如蜀道，生逢穷途行路难。\n一生疏狂尽余欢，半剖肝胆入剑寒。 剑至高危如蜀道，生逢穷途行路难。\n一生疏狂尽余欢，半剖肝胆入剑寒。 剑至高危如蜀道，生逢穷途行路难。\n在 layouts/shortcodes 中创建 notice.html，然后复制以下内容： 借鉴了 Hugo-notice\nnotice.html 内容\r{{- `$noticeType := .Get 0 -}}$` {{- `$raw := (markdownify .Inner | chomp) -}}$` {{- `$block := findRE \u0026#34;(?is)^\u0026lt;(?:address|article|aside|blockquote|canvas|dd|div|dl|dt|fieldset|figcaption|figure|footer|form|h(?:1|2|3|4|5|6)|header|hgroup|hr|li|main|nav|noscript|ol|output|p|pre|section|table|tfoot|ul|video)\\\\b\u0026#34; $`raw 1 -}} {{ `$icon := (replace (index site.Data.SVG $`noticeType) \u0026#34;icon\u0026#34; \u0026#34;icon notice-icon\u0026#34;) }} \u0026lt;div class=\u0026#34;notice {{ `$noticeType }}\u0026#34; {{ if len .Params | eq 2 }} id=\u0026#34;{{ .Get 1 }}\u0026#34; {{ end }}\u0026gt;$` \u0026lt;div class=\u0026#34;notice-title\u0026#34;\u0026gt;{{ `$icon | safeHTML }}\u0026lt;/div\u0026gt;$` {{- if or `$block (not $`raw) }}{{ `$raw }}{{ else }}\u0026lt;p\u0026gt;{{ $`raw }}\u0026lt;/p\u0026gt;{{ end -}} \u0026lt;/div\u0026gt; 接着在 assets/extended 中创建 notice.css 并填入以下内容：\nnotice.css 内容\r.notice { display: flex; align-items: center; position: relative; padding: 0.6em; margin-bottom: 1em; border-radius: 4px; p:last-child { margin-bottom: 0; } .notice-title { margin-right: 0.5em; margin-top: 0.5em; .notice-icon { width: 1.2em; height: 1.2em; } } \u0026amp;.notice-warning { background: hsla(0, 65%, 65%, 0.15); .notice-title { color: hsl(0, 65%, 65%); } } \u0026amp;.notice-info { background: hsla(30, 80%, 70%, 0.15); .notice-title { color: hsl(30, 80%, 70%); } } \u0026amp;.notice-note { background: hsla(200, 65%, 65%, 0.15); .notice-title { color: hsl(200, 65%, 65%); } } \u0026amp;.notice-tip { background: hsla(140, 65%, 65%, 0.15); .notice-title { color: hsl(140, 65%, 65%); } } } 最后在 data/SVG.toml 中加入以下内容：\nnotice-warning = \u0026#39;\u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 576 512\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M570 440c18 32-5 72-42 72H48c-37 0-60-40-42-72L246 24c19-32 65-32 84 0l240 416zm-282-86a46 46 0 100 92 46 46 0 000-92zm-44-165l8 136c0 6 5 11 12 11h48c7 0 12-5 12-11l8-136c0-7-5-13-12-13h-64c-7 0-12 6-12 13z\u0026#34;/\u0026gt;\u0026lt;/svg\u0026gt;\u0026#39; notice-info = \u0026#39;\u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 512 512\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M256 8a248 248 0 100 496 248 248 0 000-496zm0 110a42 42 0 110 84 42 42 0 010-84zm56 254c0 7-5 12-12 12h-88c-7 0-12-5-12-12v-24c0-7 5-12 12-12h12v-64h-12c-7 0-12-5-12-12v-24c0-7 5-12 12-12h64c7 0 12 5 12 12v100h12c7 0 12 5 12 12v24z\u0026#34;/\u0026gt;\u0026lt;/svg\u0026gt;\u0026#39; notice-note = \u0026#39;\u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 512 512\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M504 256a248 248 0 11-496 0 248 248 0 01496 0zm-248 50a46 46 0 100 92 46 46 0 000-92zm-44-165l8 136c0 6 5 11 12 11h48c7 0 12-5 12-11l8-136c0-7-5-13-12-13h-64c-7 0-12 6-12 13z\u0026#34;/\u0026gt;\u0026lt;/svg\u0026gt;\u0026#39; notice-tip = \u0026#39;\u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 512 512\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M504 256a248 248 0 11-496 0 248 248 0 01496 0zM227 387l184-184c7-6 7-16 0-22l-22-23c-7-6-17-6-23 0L216 308l-70-70c-6-6-16-6-23 0l-22 23c-7 6-7 16 0 22l104 104c6 7 16 7 22 0z\u0026#34;/\u0026gt;\u0026lt;/svg\u0026gt;\u0026#39; ","permalink":"http://localhost:1313/docs/hugo-journey/","summary":"\u003ch2 id=\"引子\"\u003e引子\u003c/h2\u003e\n\u003cp\u003e前段时间对博客进行了整理和翻新，趁着记忆还没完全模糊，将搭建博客的细节记录下来。个人而言，对目前博客的各项功能以及美观度还是比较满意的，而这些背后也付出了一定的努力，希望也对其他想折腾博客的人有些许帮助，那样就更好了！也作为博客分类「折腾」的第一篇，送给自己~\u003c/p\u003e","title":"Hugo PaperMod 主题精装修"},{"content":" I thought I am sinking\u0026hellip;\n明明夏日那样舒爽，那样慵懒。一次次的Play Back，才知道那时的你，那样悲伤。\n后劲真的太足了——正好是在我搞联盟出现分歧最大的时候，正好是在我难以接纳自己的时候，正好是对TA有念念不忘的时候……\n流水账，看完之后思绪很乱；想到啥就写写吧；应该大部分和Aftersun无关，Aftersun只是情绪导火索。\n我到底搞砸了多少事情，我到底在忙什么。我是时候照顾照顾自己了。我总认为自己需要从 帮助别人、让别人开心 中获得快乐，但这我真的获得快乐了么？也明明是暑假，为什么我没办法舒舒服服，真的让自己放松下来；我真的在做 能提升自我、又让自己真正快乐 的事情了吗……\n我总是在为别人的情绪着想。明明自己有压力和情绪，却总是压抑着，却又像个不定时的炸弹，不知何时爆发。 我明明可以更开朗，却因为太在乎别人，变得「i」起来，变得畏畏缩缩，变得患得患失。 我理应更加自信。但我对自己顾虑太多——每每想着自己总会比别人差些（不管是资源、能力、财富……），都会让自己掉进不自信的大坑。（总和他人说要和之前的自己比较，不要总想着比较他人。也许是医者不自医吧，这反而使我最大的心病。） 我的自信也变得功利，变得尽可能量化——有时会从「某种方面比不过自己」的别人获得自信，这反而是我自己讨厌的。这样的阿Q式精神胜利法必然不是我想要的。其实这么想来，我还是不够强大。 其他方面我也喜欢量化，有时候会跳脱出来理解整件事（其实还是没有太为自己着想），然后有些「跳戏」。这也让我很难受。 这部电影只是我的情绪爆发的导火索。但这么多问题急需解决。如上所见，这些问题的堆砌，让我会否定自己，陷入内耗。\n很感激身边的朋友，从初中到大学，大家都在理解我的情绪，帮我走出情绪的漩涡。\n我是接纳自己，还是改变自己？ // TODO，但需要生活来证明。\n我要从什么方面找回自信？ // TODO，做点……让自己精神富足的事儿？\n如果我是那个父亲，我能走出来吗？亦或是女儿，我能察觉到吗？ 后劲很足，慢慢渗出的哀伤在最后充斥整个荧幕，明明强烈，却表现得如此平静、如此震撼人心。\n只要共处于同一片蓝天之下、抬头仰望同一个太阳，即使我们不在一个空间里，某种程度上我们还是在一起的。\n吗？\nEnd","permalink":"http://localhost:1313/daily/aftersun/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eI thought I am sinking\u0026hellip;\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e明明夏日那样舒爽，那样慵懒。一次次的Play Back，才知道那时的你，那样悲伤。\u003c/p\u003e\u003c/blockquote\u003e","title":"Aftersun 晒后假日"},{"content":"Trend[s] 【更新】24/06/24 更新博客，调整公开内容，减少博客的服务器依赖（关闭【碎碎念】）。 【调整】24/06/26 为满足中国新备案要求，同主体其他网站做备案审查静态网站展示页的处理。 New Plan[s] Flask的开发学习。 开发一个【活动报名和核销】小程序，逻辑类似微信小商店的核销类商品。 Fix Plan[s] 【修复】：修复博客时间线等短代码。 【迁移】：将【UCloud · 上海】的内容迁入【TencentCloud · 广州】，即将关闭【UCloud · 台北】的服务器。 ","permalink":"http://localhost:1313/docs/dev-trends/","summary":"\u003ch2 id=\"trends\"\u003eTrend[s]\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e【更新】24/06/24 更新博客，调整公开内容，减少博客的服务器依赖（关闭【碎碎念】）。\u003c/li\u003e\n\u003cli\u003e【调整】24/06/26 为满足中国新备案要求，同主体其他网站做备案审查静态网站展示页的处理。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"new-plans\"\u003eNew Plan[s]\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eFlask的开发学习。\u003c/li\u003e\n\u003cli\u003e开发一个【活动报名和核销】小程序，逻辑类似微信小商店的核销类商品。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"fix-plans\"\u003eFix Plan[s]\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e【修复】：修复博客时间线等短代码。\u003c/li\u003e\n\u003cli\u003e【迁移】：将【UCloud · 上海】的内容迁入【TencentCloud · 广州】，即将关闭【UCloud · 台北】的服务器。\u003c/li\u003e\n\u003c/ul\u003e","title":"开发动态"},{"content":"这里有着我的朋友、与我交换友链的赛博朋友、我非常喜欢的博客网站。欢迎交换友链（交换请提交在本页留言）～\n我的朋友们 LeeKa 的酒馆\rThe Blog of Monoceros406\rg0ubu1i的博客\rfault(GitHub)\rK1sme4(GitHub)\r遇见大佬 这里的部落格很厉害，虽与博主暂无交集，但其文章仍值得时不时翻看学习。\n大大的小蜗牛\rmaintao\rMarc MERLIN\u0026#39;s Home Page\r","permalink":"http://localhost:1313/friend/","summary":"\u003cp\u003e这里有着我的朋友、与我交换友链的赛博朋友、我非常喜欢的博客网站。欢迎交换友链（交换请提交在本页留言）～\u003c/p\u003e\n\u003c!-- 友链卡片的短代码请查看 **[这里](/docs/short-code/#友链卡片)**。 --\u003e\r\n\u003ch2 id=\"我的朋友们\"\u003e我的朋友们\u003c/h2\u003e\n\u003ca target=\"_blank\" href=https://blog.leeka.pub/ title=LeeKa\u0026#32;的酒馆 class=\"friendurl\"\u003e\r\n  \u003cdiv class=\"frienddiv\"\u003e\r\n    \u003cdiv class=\"frienddivleft\"\u003e\r\n      \u003cimg class=\"myfriend\" src=ZgotmplZ /\u003e\r\n    \u003c/div\u003e\r\n    \u003cdiv class=\"frienddivright\"\u003e\r\n      \u003cdiv class=\"friendname\"\u003eLeeKa 的酒馆\u003c/div\u003e\r\n      \u003cdiv class=\"friendinfo\"\u003e\u003c/div\u003e\r\n    \u003c/div\u003e\r\n  \u003c/div\u003e\r\n\u003c/a\u003e\n\u003ca target=\"_blank\" href=https://monoceros406.github.io/ title=The\u0026#32;Blog\u0026#32;of\u0026#32;Monoceros406 class=\"friendurl\"\u003e\r\n  \u003cdiv class=\"frienddiv\"\u003e\r\n    \u003cdiv class=\"frienddivleft\"\u003e\r\n      \u003cimg class=\"myfriend\" src=ZgotmplZ /\u003e\r\n    \u003c/div\u003e\r\n    \u003cdiv class=\"frienddivright\"\u003e\r\n      \u003cdiv class=\"friendname\"\u003eThe Blog of Monoceros406\u003c/div\u003e\r\n      \u003cdiv class=\"friendinfo\"\u003e\u003c/div\u003e\r\n    \u003c/div\u003e\r\n  \u003c/div\u003e\r\n\u003c/a\u003e\n\u003ca target=\"_blank\" href=https://blog.goubuli.online/ title=g0ubu1i的博客 class=\"friendurl\"\u003e\r\n  \u003cdiv class=\"frienddiv\"\u003e\r\n    \u003cdiv class=\"frienddivleft\"\u003e\r\n      \u003cimg class=\"myfriend\" src=ZgotmplZ /\u003e\r\n    \u003c/div\u003e\r\n    \u003cdiv class=\"frienddivright\"\u003e\r\n      \u003cdiv class=\"friendname\"\u003eg0ubu1i的博客\u003c/div\u003e\r\n      \u003cdiv class=\"friendinfo\"\u003e\u003c/div\u003e\r\n    \u003c/div\u003e\r\n  \u003c/div\u003e\r\n\u003c/a\u003e\n\u003ca target=\"_blank\" href=https://github.com/fault123 title=fault(GitHub) class=\"friendurl\"\u003e\r\n  \u003cdiv class=\"frienddiv\"\u003e\r\n    \u003cdiv class=\"frienddivleft\"\u003e\r\n      \u003cimg class=\"myfriend\" src=ZgotmplZ /\u003e\r\n    \u003c/div\u003e\r\n    \u003cdiv class=\"frienddivright\"\u003e\r\n      \u003cdiv class=\"friendname\"\u003efault(GitHub)\u003c/div\u003e\r\n      \u003cdiv class=\"friendinfo\"\u003e\u003c/div\u003e\r\n    \u003c/div\u003e\r\n  \u003c/div\u003e\r\n\u003c/a\u003e\n\u003ca target=\"_blank\" href=https://github.com/k1sme4 title=K1sme4(GitHub) class=\"friendurl\"\u003e\r\n  \u003cdiv class=\"frienddiv\"\u003e\r\n    \u003cdiv class=\"frienddivleft\"\u003e\r\n      \u003cimg class=\"myfriend\" src=ZgotmplZ /\u003e\r\n    \u003c/div\u003e\r\n    \u003cdiv class=\"frienddivright\"\u003e\r\n      \u003cdiv class=\"friendname\"\u003eK1sme4(GitHub)\u003c/div\u003e\r\n      \u003cdiv class=\"friendinfo\"\u003e\u003c/div\u003e\r\n    \u003c/div\u003e\r\n  \u003c/div\u003e\r\n\u003c/a\u003e\n\u003ch2 id=\"遇见大佬\"\u003e遇见大佬\u003c/h2\u003e\n\u003cp\u003e这里的部落格很厉害，虽与博主暂无交集，但其文章仍值得时不时翻看学习。\u003c/p\u003e","title":"友链"},{"content":" 造福下一届，人人有责。\n所属实验：西安邮电大学 - 网络空间安全学院 - 密码学基础 - 课程设计实验\n实验时间：2024年上半年\n接 信息安全密码学基础 - 实验代码，这里有各个实验的实验代码。\nMarkdown 文件位于 daaihang/static-resource/docs/2024-06-28-信息安全-密码学基础实验-实验原理.md。\n对称加密 古典密码Hill密码 数学公式原理 在 Hill 密码中，加密和解密过程都依赖于矩阵运算。对于一个给定的加密矩阵 $A$ 和明文向量 $P$，密文向量 $C$ 可以通过矩阵乘法得到：\n$$ C = A \\times P \\pmod{n} $$\n这里，$n$ 是字符集的大小。例如，对于标准的字母表（A-Z），$n$ 为 26；对于ASCII可见字符集，$n$ 为 94。\n要对密文进行解密，我们需要找到加密矩阵 $A$ 的逆矩阵 $A^{-1}$，使得：\n$$ A \\times A^{-1} \\equiv I \\pmod{n} $$\n其中，$I$ 是单位矩阵。\n逆矩阵 $A^{-1}$ 的计算步骤如下：\n行列式的计算：首先计算矩阵 $A$ 的行列式 $\\det(A)$。行列式的计算方法如下： $$ \\det(A) = \\sum_{i=1}^n (-1)^{i+j} a_{ij} \\det(M_{ij}) $$ 其中，$M_{ij}$ 是从矩阵 $A$ 中删除第 $i$ 行和第 $j$ 列得到的子矩阵。\n行列式的模逆：为了在模 $n$ 的情况下找到逆矩阵，我们需要行列式 $\\det(A)$ 的模逆 $(\\det(A))^{-1} \\pmod{n}$。行列式 $\\det(A)$ 的模逆必须满足： $$ \\det(A) \\times (\\det(A))^{-1} \\equiv 1 \\pmod{n} $$ 这要求 $\\det(A)$ 和 $n$ 互质，即 $\\gcd(\\det(A), n) = 1$。\n伴随矩阵的计算：计算矩阵 $A$ 的伴随矩阵（即代数余子式矩阵的转置）。伴随矩阵 $\\text{adj}(A)$ 的计算方法如下： $$ \\text{adj}(A) = \\left( (-1)^{i+j} \\det(M_{ij}) \\right)^T $$ 其中，$M_{ij}$ 是从矩阵 $A$ 中删除第 $i$ 行和第 $j$ 列得到的子矩阵。\n求逆矩阵：将伴随矩阵 $\\text{adj}(A)$ 与行列式的模逆 $(\\det(A))^{-1}$ 相乘，取模 $n$ 即得矩阵 $A$ 的逆矩阵： $$ A^{-1} \\equiv \\text{adj}(A) \\times (\\det(A))^{-1} \\pmod{n} $$\n代码原理 在代码中，我们使用 Python 的 SymPy 库来实现上述数学运算。具体步骤如下：\n生成可逆矩阵：使用 numpy 生成一个随机的 $n \\times n$ 矩阵，并确保其行列式在模 $n$ 下是可逆的（即 $\\gcd(\\det(A), n) = 1$）。如果行列式不可逆，则重新生成矩阵，直到找到可逆矩阵。\n计算行列式和模逆：使用 SymPy 的 Matrix 类将 numpy 数组转换为 SymPy 矩阵，并计算其行列式。然后，使用 inv_mod 方法计算行列式的模逆。\n计算伴随矩阵和逆矩阵：使用 SymPy 的 adjugate 方法计算伴随矩阵，然后将伴随矩阵与行列式的模逆相乘，得到逆矩阵。\n文本和数字转换：定义函数将文本转换为数字列表（对应于 ASCII 值减去最小的可见 ASCII 值），以及将数字列表转换回文本。\n加密和解密函数：定义 Hill 加密和解密函数，分别使用加密矩阵和逆矩阵对消息进行矩阵乘法运算，结果取模 $n$，然后转换回文本。\n通过这些步骤，我们可以实现包含所有可见 ASCII 字符的 Hill 密码加密和解密。\n置换密码 数学公式原理 置换密码是一种简单且有效的对称加密方法。它通过将明文中的每个字符替换为另一个字符来实现加密。置换密码使用一个置换表来定义这种映射。具体步骤如下：\n置换表的生成： 生成一个包含所有可能字符的随机排列，形成置换表。对于长度为 $n$ 的字符集 ${a_1, a_2, \\ldots, a_n}$，置换表可以视为一个排列 $\\sigma$，其将字符 $a_i$ 映射到字符 $a_{\\sigma(i)}$。\n加密： 用置换表 $\\sigma$ 将消息中的每个字符 $m_i$ 映射为密文字符 $c_i$： $$ c_i = \\sigma(m_i) $$\n解密： 使用逆置换表 $\\sigma^{-1}$ 将密文字符 $c_i$ 还原为明文字符 $m_i$： $$ m_i = \\sigma^{-1}(c_i) $$\n逆置换表的计算： 若置换表 $\\sigma$ 将字符 $a_i$ 映射到字符 $a_j$，则逆置换表 $\\sigma^{-1}$ 将字符 $a_j$ 映射回字符 $a_i$。\n代码原理 在代码实现中，我们使用 Python 语言来生成置换表、计算逆置换表，并进行加密和解密操作。具体步骤如下：\n定义可见 ASCII 字符范围： 包含从 ASCII 码 32 到 126 的所有可见字符，这些字符将构成我们的字符集。\n生成随机置换表： 创建一个包含所有字符的列表，然后使用 random.shuffle 函数对其进行随机排列，得到置换表。\n生成逆置换表： 根据置换表生成逆置换表，逆置换表中的每个位置指向置换表中对应字符的位置。\n置换加密函数： 定义加密函数，使用置换表对消息中的每个字符进行替换。\n置换解密函数： 定义解密函数，使用逆置换表对密文中的每个字符进行替换。\nAES 数学公式原理 AES（高级加密标准）是一种对称加密算法，用于加密和解密数据。AES 使用固定长度的密钥（128, 192 或 256 位）来对数据进行加密和解密。AES 支持多种工作模式，包括 CBC（Cipher Block Chaining）和 OFB（Output Feedback）。\nCBC模式：\n加密：每个明文分组在加密前与前一个密文分组进行异或（XOR）操作。第一个明文分组与初始化向量（IV）进行异或。 $$ C_i = E_K(P_i \\oplus C_{i-1}) $$ 其中，$C_i$ 是第 $i$ 个密文分组，$P_i$ 是第 $i$ 个明文分组，$E_K$ 是加密函数，$K$ 是密钥，$C_{i-1}$ 是前一个密文分组，$C_0$ 是 IV。\n解密：每个密文分组在解密后与前一个密文分组进行异或操作。第一个密文分组与 IV 进行异或。 $$ P_i = D_K(C_i) \\oplus C_{i-1} $$\nOFB模式：\n加密：使用加密函数对前一个输出块进行加密，然后与明文分组进行异或操作。初始块是 IV。 $$ O_i = E_K(O_{i-1}) $$ $$ C_i = P_i \\oplus O_i $$\n解密：解密过程与加密过程相同，因为 OFB 是流模式。 $$ P_i = C_i \\oplus O_i $$\n代码原理 在 Python 中，我们可以使用 cryptography 库来实现 AES 加密和解密。以下是具体步骤：\n安装 cryptography 库：确保安装 cryptography 库。 导入库和模块：导入 cryptography.hazmat.primitives.ciphers 模块中的 Cipher, algorithms, modes 以及相关的 padding 模块。 定义密钥和 IV：生成或指定用于加密和解密的密钥和初始化向量（IV）。 实现 AES 加密和解密函数：使用 Cipher 创建 AES 加密器和解密器。 实现 CBC 和 OFB 模式：使用相应的模式进行加密和解密。 非对称加密 RSA算法 RSA算法是一种基于数论的公钥密码算法，其主要原理包括大素数生成、模运算和欧拉函数等数学概念。以下是RSA算法的详细数学原理：\n1. 生成大素数 $p$ 和 $q$ 选择两个大素数 $p$ 和 $q$，它们需要足够大以确保安全性。我们通过以下方式生成它们：\n$$ p, q \\in \\text{Prime Numbers} $$\n2. 计算模数 $n$ 将两个素数相乘得到模数 $n$：\n$$ n = p \\times q $$\n3. 计算欧拉函数 $\\phi(n)$ 欧拉函数 $\\phi(n)$ 表示小于 $n$ 且与 $n$ 互质的整数个数。对于两个素数 $p$ 和 $q$ 而言：\n$$ \\phi(n) = (p - 1) \\times (q - 1) $$\n4. 选择公钥指数 $e$ 选择一个整数 $e$，使得 $1 \u0026lt; e \u0026lt; \\phi(n)$ 且 $e$ 与 $\\phi(n)$ 互质。通常选择 65537 作为 $e$，因为它既是素数，又能高效计算：\n$$ \\gcd(e, \\phi(n)) = 1 $$\n5. 计算私钥指数 $d$ 计算私钥指数 $d$，使得 $d$ 是 $e$ 模 $\\phi(n)$ 的乘法逆元，即满足以下条件：\n$$ d \\times e \\equiv 1 \\ (\\text{mod} \\ \\phi(n)) $$\n6. 公钥和私钥 公钥由 $(e, n)$ 组成，私钥由 $(d, n)$ 组成。\n$$ \\text{Public Key} = (e, n) $$ $$ \\text{Private Key} = (d, n) $$\n7. 加密过程 将消息 $m$ 转换为整数 $m$ 后，使用公钥加密：\n$$ c = m^e \\ (\\text{mod} \\ n) $$\n8. 解密过程 将密文 $c$ 使用私钥解密得到原文 $m$：$$ m = c^d \\ (\\text{mod} \\ n) $$\nElGamal 密钥生成 密钥生成的步骤如下：\n生成循环群描述\nAlice利用生成元 $g$ 产生一个 $q$ 阶循环群 $G$ 的有效描述。该循环群需要满足一定的安全性质。\n选择私钥\nAlice从集合 ${1, \\ldots, q-1}$ 中随机选择一个整数 $x$。\n计算公钥\nAlice计算 $ h := g^x $。\n公开公钥\nAlice公开 $h$，以及循环群 $G$、阶数 $q$ 和生成元 $g$ 的描述作为其公钥，并保留 $x$ 作为其私钥。私钥必须保密。\n加密 使用Alice的公钥 $(G, q, g, h)$ 向她加密一条消息 $m$ 的加密算法工作方式如下：\nBob生成临时密钥\nBob从集合 ${1, \\ldots, q-1}$ 随机选择一个整数 $y$，然后计算 $ c_1 := g^y $。\n计算共享秘密\nBob计算 $ s := h^y $。\n映射消息\nBob把他要发送的秘密消息 $m$ 映射为 $G$ 上的一个元素 $m\u0026rsquo;$。\n计算密文\nBob计算 $ c_2 := m\u0026rsquo; \\cdot s $。\n发送密文\nBob将密文 $ (c_1, c_2) = (g^y, m\u0026rsquo; \\cdot h^y) = (g^y, m\u0026rsquo; \\cdot (g^x)^y) $ 发送给Alice。\n注意：如果一个人知道了 $m\u0026rsquo;$，那么它很容易就能知道 $h^y$ 的值。因此，对每一条信息都产生一个新的 $y$ 可以提高安全性。因此 $y$ 也被称作临时密钥。\n解密 利用私钥 $x$ 对密文 $(c_1, c_2)$ 进行解密的算法工作方式如下：\n计算共享秘密\nAlice计算 $ s := c_1^x $。\n计算消息\n然后计算 $ m\u0026rsquo; := c_2 \\cdot s^{-1} $，并将其映射回明文 $m$，其中 $s^{-1}$ 是 $s$ 在群 $G$ 上的逆元。\n解密算法能够正确解密出明文，因为：$ c_2 \\cdot s^{-1} = m\u0026rsquo; \\cdot h^y \\cdot (g^{xy})^{-1} = m\u0026rsquo; \\cdot g^{xy} \\cdot g^{-xy} = m\u0026rsquo; $。\n认证技术 消息认证码（MAC） HMAC数学原理 消息认证码（Message Authentication Code, MAC）是一种保证消息完整性和认证性的算法。基于Hash算法的MAC通常称为HMAC（Hashed Message Authentication Code）。HMAC结合一个秘密密钥与一个哈希函数来生成消息摘要，从而验证消息的完整性和真实性。\n1. HMAC的基本结构 HMAC由以下元素组成：\n哈希函数 $H$：如SHA-256 密钥 $K$：长度为 $B$ 字节，其中 $B$ 是哈希函数的块大小 内部填充值 $ipad$：通常是0x36 外部填充值 $opad$：通常是0x5C 2. 密钥填充 如果密钥 $K$ 的长度超过块大小 $B$，则对 $K$ 进行哈希：\n$$ K\u0026rsquo; = \\begin{cases} K \u0026amp; \\text{if } |K| = B \\ H(K) \u0026amp; \\text{if } |K| \u0026gt; B \\ K \\parallel \\text{(zero-padding to } B \\text{ bytes)} \u0026amp; \\text{if } |K| \u0026lt; B \\end{cases} $$\n其中，$|K|$ 表示密钥 $K$ 的字节长度，$\\parallel$ 表示字符串的连接操作。\n3. 内部密钥和外部密钥 将密钥 $K\u0026rsquo;$ 与内部填充值 $ipad$ 和外部填充值 $opad$ 进行异或操作：\n$$ K_{ipad} = K\u0026rsquo; \\oplus ipad $$ $$ K_{opad} = K\u0026rsquo; \\oplus opad $$\n4. 生成MAC 将消息 $M$ 与内部密钥连接，进行一次哈希：\n$$ \\text{inner} = H(K_{ipad} \\parallel M) $$\n然后将内部哈希结果与外部密钥连接，进行第二次哈希，得到最终的HMAC值：\n$$ HMAC(K, M) = H(K_{opad} \\parallel \\text{inner}) = H(K_{opad} \\parallel H(K_{ipad} \\parallel M)) $$\n5. HMAC公式总结 根据RFC 2104，HMAC的数学公式为：\n$$ HMAC(K, M) = H((K\u0026rsquo; \\oplus opad) \\parallel H((K\u0026rsquo; \\oplus ipad) \\parallel M)) $$\n其中：\n$K\u0026rsquo;$ 是填充后的密钥。如果K短于散列函数的输入块大小，则向右填充（Padding）零；如果比该块大小更长，则对K进行散列 $ipad$ 和 $opad$ 是内部和外部填充值 $\\parallel$ 表示字符串连接 $\\oplus$ 表示按位异或操作 $H$ 是所选择的哈希函数（如SHA-256） RSA数字签名算法 1. 密钥生成 RSA数字签名算法的密钥生成步骤与RSA加密算法相同，包括以下步骤：\n选择两个大素数 $p$ 和 $q$： $$ p, q \\in \\text{Prime Numbers} $$\n计算模数 $n$： $$ n = p \\times q $$\n计算欧拉函数 $\\phi(n)$： $$ \\phi(n) = (p - 1) \\times (q - 1) $$\n选择公钥指数 $e$，满足： $$ 1 \u0026lt; e \u0026lt; \\phi(n) \\quad \\text{且} \\quad \\gcd(e, \\phi(n)) = 1 $$\n计算私钥指数 $d$，使得： $$ d \\times e \\equiv 1 \\ (\\text{mod} \\ \\phi(n)) $$\n公钥和私钥分别为： $$ \\text{Public Key} = (e, n) $$ $$ \\text{Private Key} = (d, n) $$\n2. 签名生成 签名生成使用消息摘要（哈希值）和私钥。具体步骤如下：\n计算消息 $M$ 的哈希值 $H(M)$： $$ h = H(M) $$\n使用私钥 $(d, n)$ 对哈希值进行签名，计算签名 $S$： $$ S = h^d \\ (\\text{mod} \\ n) $$\n3. 签名验证 签名验证使用公钥。具体步骤如下：\n接收者使用相同的哈希函数计算消息 $M$ 的哈希值 $H(M)$： $$ h\u0026rsquo; = H(M) $$\n使用发送者的公钥 $(e, n)$ 对签名 $S$ 进行验证，计算验证值 $V$： $$ V = S^e \\ (\\text{mod} \\ n) $$\n检查验证值 $V$ 是否等于接收者计算的哈希值 $h\u0026rsquo;$： $$ V \\stackrel{?}{=} h\u0026rsquo; $$\n如果 $V = h\u0026rsquo;$，则签名验证通过，消息的真实性和完整性得到保证；否则，验证失败。\nElGamal数字签名算法 ElGamal数字签名算法是一种基于离散对数问题的数字签名方案。它由三个主要步骤组成：密钥生成、签名生成和签名验证。\n1. 密钥生成 选择素数 $p$：选择一个大素数 $p$。\n选择生成元 $g$：选择一个生成元 $g$，使得 $g$ 是模 $p$ 的一个原根。\n选择私钥 $x$：选择一个随机数 $x$，其中 $1 \u0026lt; x \u0026lt; p-1$。\n计算公钥 $y$：根据私钥 $x$ 和生成元 $g$ 计算公钥 $y$： $$ y = g^x \\ (\\text{mod} \\ p) $$\n公钥和私钥分别为： $$ \\text{Public Key} = (p, g, y) $$ $$ \\text{Private Key} = x $$\n2. 签名生成 为了对消息 $M$ 进行签名，签名者执行以下步骤：\n计算消息哈希值 $H(M)$：将消息 $M$ 通过哈希函数 $H$ 生成哈希值 $h$： $$ h = H(M) $$\n选择随机数 $k$：选择一个随机数 $k$，其中 $1 \u0026lt; k \u0026lt; p-1$ 且 $k$ 与 $p-1$ 互质。\n计算临时值 $r$：根据生成元 $g$ 和随机数 $k$ 计算临时值 $r$： $$ r = g^k \\ (\\text{mod} \\ p) $$\n计算签名值 $s$：根据哈希值 $h$、私钥 $x$、随机数 $k$ 和临时值 $r$ 计算签名值 $s$： $$ s = (h - xr)k^{-1} \\ (\\text{mod} \\ (p-1)) $$ 其中，$k^{-1}$ 是 $k$ 模 $(p-1)$ 的乘法逆元。\n签名为： $$ \\text{Signature} = (r, s) $$\n3. 签名验证 为了验证签名 $(r, s)$ 是否由消息 $M$ 生成，验证者执行以下步骤：\n计算消息哈希值 $H(M)$：将消息 $M$ 通过哈希函数 $H$ 生成哈希值 $h$： $$ h = H(M) $$\n验证签名值 $r$：检查 $r$ 是否在区间 $1 \\leq r \\leq p-1$ 内。如果不在，则签名无效。\n计算验证值： $$ v_1 = y^r \\cdot r^s \\ (\\text{mod} \\ p) $$ $$ v_2 = g^h \\ (\\text{mod} \\ p) $$\n验证： 如果 $v_1 \\equiv v_2 \\ (\\text{mod} \\ p)$，则签名有效；否则，签名无效。\n密钥管理 DH密钥交换协议 Diffie-Hellman（DH）密钥交换协议是一种公钥密码体制，用于安全地交换密钥。它允许两个通信方在公开信道上交换信息，而无需事先共享密钥。\n1. 参数选择 选择素数 $p$：选择一个大素数 $p$。\n选择生成元 $g$：选择一个整数 $g$，称为生成元，它是模 $p$ 的一个原根。通常情况下，$g$ 的选择是一个小质数，如 $g = 2$ 或 $g = 5$。\n2. 密钥生成 假设有两个通信方，Alice 和 Bob，他们希望在公开信道上安全地交换密钥。\nAlice 和 Bob 各自生成私钥：\nAlice 选择一个随机整数 $a$，称为私钥。 Bob 选择一个随机整数 $b$，称为私钥。 计算公钥：\nAlice 计算公钥 $A$： $$ A = g^a \\ (\\text{mod} \\ p) $$ Bob 计算公钥 $B$： $$ B = g^b \\ (\\text{mod} \\ p) $$ 交换公钥：\nAlice 将公钥 $A$ 发送给 Bob。 Bob 将公钥 $B$ 发送给 Alice。 3. 密钥协商 计算共享密钥： Alice 使用 Bob 发送的公钥 $B$ 计算共享密钥 $K$： $$ K = B^a \\ (\\text{mod} \\ p) $$ Bob 使用 Alice 发送的公钥 $A$ 计算共享密钥 $K$： $$ K = A^b \\ (\\text{mod} \\ p) $$ DH密钥交换协议的安全性依赖于离散对数问题的难度。具体来说，即使攻击者可以监听公开信道上的所有通信，但由于他们无法有效地计算离散对数，因此无法推导出通信双方的私钥或共享密钥。\nShamir秘密共享方案 Shamir秘密共享方案是一种多方安全密钥管理技术，由Adi Shamir于1979年提出。它允许将秘密分成多个部分，称为共享，这些共享可以分发给不同的实体，只有当足够多的共享组合在一起时才能重构出原始秘密。\n1. 参数选择 选择一个大素数 $p$：用作有限域的模数，通常要求 $p$ 足够大以确保安全性。\n选择秘密 $S$：要共享的原始秘密，通常表示为一个整数，$0 \\leq S \u0026lt; p$。\n选择阈值 $t$ 和参与者数 $n$ **：阈值 $t$ 表示重构秘密所需的最少共享数，参与者数 $n$ 表示生成的共享数。\n2. 共享生成 生成随机系数 $a_1, a_2, \\ldots, a_{t-1}$：在 $\\mathbb{Z}_p$ 中随机选择 $t-1$ 个系数，其中每个系数 $a_i$ 都是随机选择的。\n构造多项式 $f(x)$：多项式 $f(x)$ 的形式如下，其中 $f(0) = S$ 是原始秘密： $$ f(x) = S + a_1 x + a_2 x^2 + \\ldots + a_{t-1} x^{t-1} \\ (\\text{mod} \\ p) $$\n生成共享：对于每个参与者 $i$，计算共享 $(x_i, y_i)$： $$ y_i = f(x_i) \\ (\\text{mod} \\ p) $$ 其中，$x_i$ 是一个不同的非零元素 $\\mathbb{Z}_p^*$，通常 $x_i = i$。\n3. 重构秘密 为了重构原始秘密 $S$，至少需要 $t$ 个共享。这是通过拉格朗日插值法实现的。\n拉格朗日插值法：假设我们有 $t$ 个共享 $(x_i, y_i)$，其中 $x_i$ 是非零元素 $\\mathbb{Z}p^*$。拉格朗日插值多项式 $L(x)$ 定义如下： $$ L(x) = \\sum{j=1}^{t} y_j \\cdot \\prod_{\\substack{1 \\leq m \\leq t \\ m \\neq j}} \\frac{x - x_m}{x_j - x_m} \\ (\\text{mod} \\ p) $$\n计算原始秘密 $S$：通过插值多项式计算 $L(0)$： $$ S = L(0) \\ (\\text{mod} \\ p) $$\nShamir秘密共享方案的安全性基于大整数分解问题和离散对数问题的复杂性，这些问题在有限域 $\\mathbb{Z}_p$ 中很难解决。只有持有足够的共享数 $t$ 才能重构出原始秘密 $S$，而持有少于 $t$ 个共享数的任何组合都无法揭示秘密。\n","permalink":"http://localhost:1313/docs/crypto-experimental-principles/","summary":"\u003cblockquote\u003e\n\u003cp\u003e造福下一届，人人有责。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003e所属实验：西安邮电大学 - 网络空间安全学院 - 密码学基础 - 课程设计实验\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e实验时间：2024年上半年\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e接 \u003ca href=\"./crypto\"\u003e\u003cstrong\u003e信息安全密码学基础 - 实验代码\u003c/strong\u003e\u003c/a\u003e，这里有各个实验的实验代码。\u003c/p\u003e","title":"信息安全密码学基础 - 实验原理"},{"content":"本网站使用Hugo构建，因此可以使用短代码功能——通过在markdown文件中添加相应代码，嵌入相应的html内容，实现一定的能力。\n本网站现在已经支持了两个外置短代码。（24/06/21）\n短代码 Plan：\n友链卡片 时间轴（但好像主题已经内置了差不多的步骤条功能） Apple Music 卡片 标识符： am\n这个代码可以快速添加一个 Apple Music 卡片。可以是一个专辑卡片或单曲卡片。\n短代码 专辑卡片：\n{{\u0026lt; am url=\u0026#34;red-taylors-version-a-message-from-taylor/1590368448\u0026#34; \u0026gt;}} 单曲卡片：\n{{\u0026lt; am url=\u0026#34;red-taylors-version-a-message-from-taylor/1590368448\u0026#34; i=\u0026#34;1590368457\u0026#34; \u0026gt;}} 预览 专辑卡片：\n单曲卡片：\n源代码 {{ if and (.Get \u0026#34;url\u0026#34;) (not (.Get \u0026#34;i\u0026#34;)) }} \u0026lt;iframe id=\u0026#34;embedPlayer\u0026#34; src=\u0026#34;https://embed.music.apple.com/us/album/{{ .Get \u0026#34;url\u0026#34; }}?app=music\u0026amp;amp;itsct=music_box_player\u0026amp;amp;itscg=30200\u0026amp;amp;ls=1\u0026amp;amp;theme=auto\u0026#34; height=\u0026#34;450px\u0026#34; frameborder=\u0026#34;0\u0026#34; sandbox=\u0026#34;allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation-by-user-activation\u0026#34; allow=\u0026#34;autoplay *; encrypted-media *; clipboard-write\u0026#34; style=\u0026#34;width: 100%; overflow: hidden; border-radius: 10px; transform: translateZ(0px); animation: 2s ease 0s 6 normal none running loading-indicator; background-color: rgb(228, 228, 228);\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; {{ else if and (.Get \u0026#34;url\u0026#34;) (.Get \u0026#34;i\u0026#34;) }} \u0026lt;iframe id=\u0026#34;embedPlayer\u0026#34; src=\u0026#34;https://embed.music.apple.com/us/album/{{ .Get \u0026#34;url\u0026#34; }}?i={{ .Get \u0026#34;i\u0026#34; }}\u0026amp;amp;app=music\u0026amp;amp;itsct=music_box_player\u0026amp;amp;itscg=30200\u0026amp;amp;ls=1\u0026amp;amp;theme=auto\u0026#34; height=\u0026#34;175px\u0026#34; frameborder=\u0026#34;0\u0026#34; sandbox=\u0026#34;allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation-by-user-activation\u0026#34; allow=\u0026#34;autoplay *; encrypted-media *; clipboard-write\u0026#34; style=\u0026#34;width: 100%; overflow: hidden; border-radius: 10px; transform: translateZ(0px); animation: 2s ease 0s 6 normal none running loading-indicator; background-color: rgb(228, 228, 228);\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; {{ else }} Missing URL parameter in Apple Music shortcode {{ end }} 折叠卡片 标识符：fold-block\n短代码 {{\u0026lt; fold-block \u0026#34;这是提示文字\u0026#34; \u0026gt;}} ~~这是折叠的内容～~~ ***这是折叠的内容～*** **同样是MD文档，不受影响** {{\u0026lt; /fold-block \u0026gt;}} 预览 ► 这是提示文字\r这是折叠的内容～\n这是折叠的内容～\n同样是MD文档，不受影响\n源代码 ► 源代码太长折叠了，直接现学现用\r{{ $content := .Inner | markdownify }} \u0026lt;div class=\u0026#34;collapse-block\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;collapse-header\u0026#34; onclick=\u0026#34;toggleCollapse(this)\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;collapse-arrow\u0026#34;\u0026gt;►\u0026lt;/span\u0026gt; \u0026lt;strong\u0026gt;{{ .Get 0 }}\u0026lt;/strong\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;collapse-content\u0026#34;\u0026gt; {{ $content }} \u0026lt;/div\u0026gt; \u0026lt;style\u0026gt; .collapse-block { margin-top: 12px; margin-bottom: 24px; overflow: hidden; } .collapse-header { padding: 8px; cursor: pointer; transition: background-color 0.3s ease; color: var(--header-text-color); background-color: var(--header-bg-color); border: 1px solid #ccc; /* 灰色边框 */ border-radius: 0.5rem; /* 圆角 */ padding-top: 0.5rem; padding-bottom: 0.5rem; padding-left: 0.75rem; padding-right: 0.75rem; } .collapse-header:hover { background-color: var(--header-bg-hover); color: var(--header-text-hover); } .collapse-arrow { float: left; margin-right: 8px; transition: transform 0.3s ease; } .collapse-content { padding: 0 8px; height: 0; overflow: hidden; background-color: rgba(255, 255, 255, 0); /* 半透明浅色背景 */ transition: height 0.5s ease-out, padding 0.3s ease-out; } .collapse-content.show { height: auto; padding: 8px; overflow: visible; } /* 明亮模式下的样式 */ @media (prefers-color-scheme: light) { .collapse-header { color: white; background-color: black; } .collapse-header:hover { background-color: #80808020; /* 更改为暗一点的颜色 */ } } /* 暗黑模式下的样式 */ @media (prefers-color-scheme: dark) { /* .collapse-header { color: black; background-color: white; } */ .collapse-header:hover { background-color: #80808020; /* 更改为浅一点的颜色 */ } } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; function toggleCollapse(element) { var content = element.nextElementSibling; var arrow = element.querySelector(\u0026#39;.collapse-arrow\u0026#39;); if (content.classList.contains(\u0026#39;show\u0026#39;)) { content.style.height = \u0026#39;0\u0026#39;; content.classList.remove(\u0026#39;show\u0026#39;); arrow.style.transform = \u0026#39;rotate(0deg)\u0026#39;; } else { content.style.height = content.scrollHeight + \u0026#39;px\u0026#39;; content.classList.add(\u0026#39;show\u0026#39;); arrow.style.transform = \u0026#39;rotate(90deg)\u0026#39;; } } \u0026lt;/script\u0026gt; 分割线 标识符：divider\n短代码 {{\u0026lt; divider \u0026#34;END\u0026#34; \u0026gt;}} {{\u0026lt; divider \u0026#34;End\u0026#34; \u0026gt;}} {{\u0026lt; divider \u0026#34;end\u0026#34; \u0026gt;}} {{\u0026lt; divider \u0026#34;描述文字\u0026#34; \u0026gt;}} {{\u0026lt; divider \u0026#34;不是end则显示普通文字\u0026#34; \u0026gt;}} 预览 当描述文字是 END （所有字母不区分大小写）时，将会显示花体字。\nEND\rEnd\rend\r描述文字\r不是end则显示普通文字\r【对比】这是markdown语法---的分割线效果：\n源代码 \u0026lt;style\u0026gt; @import url(\u0026#39;https://fonts.googleapis.com/css2?family=Playwrite+MX\u0026amp;display=swap\u0026#39;); .divider { display: flex; align-items: center; margin: 20px 0; font-size: 12px; } .divider::before, .divider::after { content: \u0026#39;\u0026#39;; flex: 1; border-bottom: 1px solid #333; } .divider::before { margin-right: 10px; } .divider::after { margin-left: 10px; } .divider span.end { font-family: \u0026#39;Playwrite MX\u0026#39;, cursive; font-size: 16px; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026#34;divider\u0026#34;\u0026gt; {{- if .Get 0 -}} \u0026lt;span class=\u0026#34;{{ if eq (lower (.Get 0)) \u0026#34;end\u0026#34; }}end{{ end }}\u0026#34;\u0026gt;{{ .Get 0 }}\u0026lt;/span\u0026gt; {{- end -}} \u0026lt;/div\u0026gt; 友链卡片 标识符：friend\n短代码 {{\u0026lt; friend name=\u0026#34;Daaihang Wong Online\u0026#34; url=\u0026#34;https://wdh.hk/\u0026#34; description=\u0026#34;一个信息安全学生的网站。\u0026#34; reason=\u0026#34;推荐原因：这就是我！\u0026#34; icon=\u0026#34;https://wdh.hk/android-chrome-192x192.png\u0026#34; \u0026gt;}} 预览 Daaihang Wong Online\r源代码 ► 源代码太长折叠了\r\u0026lt;a href=\u0026#34;{{ .Get \u0026#34;url\u0026#34; }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34; class=\u0026#34;friend-card\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;friend-card-header\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;friend-card-info\u0026#34;\u0026gt; \u0026lt;h3 class=\u0026#34;friend-card-title\u0026#34;\u0026gt;{{ .Get \u0026#34;name\u0026#34; }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;friend-card-url\u0026#34;\u0026gt;{{ .Get \u0026#34;url\u0026#34; }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;friend-card-description\u0026#34;\u0026gt;{{ .Get \u0026#34;description\u0026#34; }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;img src=\u0026#34;{{ .Get \u0026#34;icon\u0026#34; }}\u0026#34; alt=\u0026#34;{{ .Get \u0026#34;name\u0026#34; }} logo\u0026#34; class=\u0026#34;friend-card-icon\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;friend-card-reason\u0026#34;\u0026gt;{{ .Get \u0026#34;reason\u0026#34; }}\u0026lt;/p\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;style\u0026gt; .friend-card { display: block; border: 1px solid #e0e0e0; border-radius: 8px; padding: 16px; width: 100%; box-sizing: border-box; margin: 16px 0; text-decoration: none; color: inherit; transition: box-shadow 0.3s; text-align: left; /* 确保内容居左 */ } .friend-card:hover { box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); } .friend-card-header { display: flex; align-items: center; justify-content: space-between; /* 确保图标在最右边 */ margin-bottom: 8px; } .friend-card-icon { width: 72px; height: auto; /* border-radius: 50%; */ border-radius: 0.5em; transition: transform 0.3s; margin-right: 16px; } .friend-card:hover .friend-card-icon { transform: scale(1.2); } .friend-card-info { display: flex; flex-direction: column; justify-content: center; flex-grow: 1; /* 确保信息部分占据剩余空间 */ } .friend-card-title { margin: 0; font-size: 1.2em; color: #333; } .friend-card-url { font-size: 0.9em; color: #1e88e5; margin: 4px 0; } .friend-card-description { font-size: 0.9em; color: #666; margin-top: 0; } .friend-card-reason { font-size: 0.9em; color: #666; border-top: 1px solid #e0e0e0; padding-top: 8px; margin: 0; } \u0026lt;/style\u0026gt; ","permalink":"http://localhost:1313/docs/short-code/","summary":"\u003cp\u003e本网站使用Hugo构建，因此可以使用\u003ca href=\"https://hugo.opendocs.io/content-management/shortcodes/\"\u003e\u003cstrong\u003e短代码\u003c/strong\u003e\u003c/a\u003e功能——通过在markdown文件中添加相应代码，嵌入相应的html内容，实现一定的能力。\u003c/p\u003e\n\u003cp\u003e本网站现在已经支持了两个外置短代码。（24/06/21）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e短代码 Plan：\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput checked=\"\" disabled=\"\" type=\"checkbox\"\u003e 友链卡片\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e 时间轴（但好像主题已经内置了差不多的步骤条功能）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"apple-music-卡片\"\u003eApple Music 卡片\u003c/h2\u003e\n\u003cp\u003e标识符： \u003ccode\u003eam\u003c/code\u003e\u003c/p\u003e","title":"Short Code Hugo 短代码"},{"content":" 造福下一届，人人有责。\n所属实验：西安邮电大学 - 网络空间安全学院 - 密码学基础 - 课程设计实验**\n实验时间：2024年上半年\n文中所用第三方库使用 pip 自行安装。\n另外还有👉信息安全密码学基础 - 实验原理，这里有各个实验的实验原理。\n免责声明：实验代码仅供参考，请自行设计实现。\n实验一 对称加密 古典密码Hill密码 随机生成一个2×2和一个3×3的可逆的密钥矩阵，矩阵元素取自Z26。\n求这两个矩阵的逆矩阵 分别用这两个密钥矩阵加密消息（学号+姓名），得密文；解密密文，检验是否正确解密了？ ► 代码 1-1_Symmetric_Hill\rimport numpy as np from sympy import Matrix # 定义可见 ASCII 字符的范围 MIN_ASCII = 32 MAX_ASCII = 126 Z = MAX_ASCII - MIN_ASCII + 1 # 字符集大小 # 生成一个随机的 n x n 可逆矩阵，元素取自 Z def generate_invertible_matrix(n): while True: matrix = np.random.randint(0, Z, size=(n, n)) # 检查矩阵行列式与 Z 是否互质，只有互质时矩阵才是可逆的 if np.gcd(int(round(np.linalg.det(matrix))), Z) == 1: return matrix # 计算矩阵在模 Z 下的逆矩阵 def modular_inverse(matrix, mod): mat = Matrix(matrix) # 使用 sympy 库计算矩阵的模逆 inv_mat = mat.inv_mod(mod) return np.array(inv_mat).astype(int) # 生成 2x2 和 3x3 可逆矩阵 matrix_2x2 = generate_invertible_matrix(2) matrix_3x3 = generate_invertible_matrix(3) # 计算矩阵的逆矩阵 inverse_2x2 = modular_inverse(matrix_2x2, Z) inverse_3x3 = modular_inverse(matrix_3x3, Z) # 将文本转换为数字列表 def text_to_numbers(text): # 将字符的 ASCII 码减去 MIN_ASCII return [ord(char) - MIN_ASCII for char in text] # 将数字列表转换为文本 def numbers_to_text(numbers): # 将数字加上 MIN_ASCII 转换回字符 return \u0026#39;\u0026#39;.join(chr(num + MIN_ASCII) for num in numbers) # Hill 加密函数 def hill_encrypt(message, key_matrix): n = key_matrix.shape[0] message_numbers = text_to_numbers(message) while len(message_numbers) % n != 0: message_numbers.append(0) # 使用最小的可见 ASCII 字符进行填充 encrypted_numbers = [] for i in range(0, len(message_numbers), n): block = np.array(message_numbers[i:i + n]) # 矩阵乘法并取模 Z encrypted_block = np.dot(key_matrix, block) % Z encrypted_numbers.extend(encrypted_block) return numbers_to_text(encrypted_numbers) # Hill 解密函数 def hill_decrypt(encrypted_message, inverse_key_matrix): n = inverse_key_matrix.shape[0] encrypted_numbers = text_to_numbers(encrypted_message) decrypted_numbers = [] for i in range(0, len(encrypted_numbers), n): block = np.array(encrypted_numbers[i:i + n]) # 使用逆矩阵进行矩阵乘法并取模 Z decrypted_block = np.dot(inverse_key_matrix, block) % Z decrypted_numbers.extend(decrypted_block) return numbers_to_text(decrypted_numbers).rstrip(chr(0)) # 移除填充 # 实验 ①: 打印生成的矩阵及其逆矩阵 print(\u0026#34;实验 ①: 生成的矩阵及其逆矩阵\u0026#34;) print(\u0026#34;2x2 矩阵:\u0026#34;) print(matrix_2x2) print(\u0026#34;2x2 逆矩阵:\u0026#34;) print(inverse_2x2) print(\u0026#34;\\n3x3 矩阵:\u0026#34;) print(matrix_3x3) print(\u0026#34;3x3 逆矩阵:\u0026#34;) print(inverse_3x3) # 实验 ②: 加密和解密消息 message = \u0026#34;26221013_Daaihang_Wong\u0026#34; # 仅保留消息中的可见字符 filtered_message = \u0026#39;\u0026#39;.join(filter(lambda x: MIN_ASCII \u0026lt;= ord(x) \u0026lt;= MAX_ASCII, message)) encrypted_message_2x2 = hill_encrypt(filtered_message, matrix_2x2) decrypted_message_2x2 = hill_decrypt(encrypted_message_2x2, inverse_2x2) encrypted_message_3x3 = hill_encrypt(filtered_message, matrix_3x3) decrypted_message_3x3 = hill_decrypt(encrypted_message_3x3, inverse_3x3) # 输出结果 print(\u0026#34;\\n实验 ②: 加密和解密结果\u0026#34;) print(\u0026#34;原始消息:\u0026#34;, filtered_message) print(\u0026#34;\\n使用 2x2 矩阵\u0026#34;) print(\u0026#34;加密消息:\u0026#34;, encrypted_message_2x2) print(\u0026#34;解密消息:\u0026#34;, decrypted_message_2x2) print(\u0026#34;\\n使用 3x3 矩阵\u0026#34;) print(\u0026#34;加密消息:\u0026#34;, encrypted_message_3x3) print(\u0026#34;解密消息:\u0026#34;, decrypted_message_3x3) 置换密码 随机生成一个置换表（置换表长度可设置）\n求逆置换 用此置换表加密消息（学号+姓名），得密文；解密密文，检验是否正确解密了？ ► 代码 1-2_Symmetric_Permutation\rimport random # 定义可见 ASCII 字符的范围 MIN_ASCII = 32 MAX_ASCII = 126 CHARS = [chr(i) for i in range(MIN_ASCII, MAX_ASCII + 1)] LENGTH = len(CHARS) # 生成随机置换表 def generate_permutation_table(length): table = CHARS[:length] random.shuffle(table) # 随机打乱字符列表，形成置换表 return table # 生成逆置换表 def generate_inverse_permutation_table(table): inverse_table = [\u0026#39;\u0026#39;] * len(table) for i, char in enumerate(table): inverse_table[CHARS.index(char)] = CHARS[i] # 找到字符在原字符集中的位置，并在逆置换表中记录相应的原字符 return inverse_table # 置换加密函数 def permutation_encrypt(message, table): # 用置换表替换消息中的每个字符 return \u0026#39;\u0026#39;.join(table[CHARS.index(char)] if char in CHARS else char for char in message) # 置换解密函数 def permutation_decrypt(encrypted_message, inverse_table): # 用逆置换表还原消息中的每个字符 return \u0026#39;\u0026#39;.join(inverse_table[CHARS.index(char)] if char in CHARS else char for char in encrypted_message) # 实验 ①: 打印生成的置换表及其逆置换表 table = generate_permutation_table(LENGTH) inverse_table = generate_inverse_permutation_table(table) print(\u0026#34;实验 ①: 生成的置换表及其逆置换表\u0026#34;) print(\u0026#34;置换表:\u0026#34;, \u0026#39;\u0026#39;.join(table)) print(\u0026#34;逆置换表:\u0026#34;, \u0026#39;\u0026#39;.join(inverse_table)) # 实验 ②: 加密和解密消息 message = \u0026#34;26221013_Daaihang_Wong\u0026#34; encrypted_message = permutation_encrypt(message, table) decrypted_message = permutation_decrypt(encrypted_message, inverse_table) # 输出结果 print(\u0026#34;\\n实验 ②: 加密和解密结果\u0026#34;) print(\u0026#34;原始消息:\u0026#34;, message) print(\u0026#34;加密消息:\u0026#34;, encrypted_message) print(\u0026#34;解密消息:\u0026#34;, decrypted_message) 对称加密算法AES和工作模式 编写AES加密和解密算法 分别结合CBC和OFB工作模式，加密消息（学号+姓名），得密文；解密密文，检验是否正确解密了？ 我给出了4种方式实现。优先使用第4个。其他的或多或少使用第三方的非基础密码库，可能不符合实验要求。\n► 代码 - 实现一 1-3_Symmetric_AES_1\rfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes from cryptography.hazmat.primitives import padding from cryptography.hazmat.backends import default_backend import os # 生成随机密钥和初始化向量（IV） def generate_key_iv(key_size): key = os.urandom(key_size // 8) iv = os.urandom(16) # IV 大小应为块大小（16 字节） return key, iv # AES 加密函数 def aes_encrypt(message, key, iv, mode): # PKCS7填充 padder = padding.PKCS7(algorithms.AES.block_size).padder() padded_data = padder.update(message.encode()) + padder.finalize() # 创建AES加密器 cipher = Cipher(algorithms.AES(key), mode(iv), backend=default_backend()) encryptor = cipher.encryptor() # 加密数据 ciphertext = encryptor.update(padded_data) + encryptor.finalize() return ciphertext # AES 解密函数 def aes_decrypt(ciphertext, key, iv, mode): # 创建AES解密器 cipher = Cipher(algorithms.AES(key), mode(iv), backend=default_backend()) decryptor = cipher.decryptor() # 解密数据 padded_data = decryptor.update(ciphertext) + decryptor.finalize() # 去除PKCS7填充 unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder() decrypted_data = unpadder.update(padded_data) + unpadder.finalize() return decrypted_data.decode() # 主函数 def main(): # 设置密钥长度（128, 192, 或 256 位） key_size = 256 # 生成密钥和 IV key, iv = generate_key_iv(key_size) # 打印密钥和 IV print(\u0026#34;实验 ①: 密钥和 IV\u0026#34;) print(\u0026#34;密钥:\u0026#34;, key.hex()) print(\u0026#34;IV:\u0026#34;, iv.hex()) # 定义消息 message = \u0026#34;26221013_Daaihang_Wong\u0026#34; # 实验 ②: CBC 模式加密和解密 print(\u0026#34;\\n实验 ②: CBC 模式\u0026#34;) ciphertext_cbc = aes_encrypt(message, key, iv, modes.CBC) print(\u0026#34;CBC 加密消息:\u0026#34;, ciphertext_cbc.hex()) decrypted_message_cbc = aes_decrypt(ciphertext_cbc, key, iv, modes.CBC) print(\u0026#34;CBC 解密消息:\u0026#34;, decrypted_message_cbc) # 实验 ②: OFB 模式加密和解密 print(\u0026#34;\\n实验 ②: OFB 模式\u0026#34;) ciphertext_ofb = aes_encrypt(message, key, iv, modes.OFB) print(\u0026#34;OFB 加密消息:\u0026#34;, ciphertext_ofb.hex()) decrypted_message_ofb = aes_decrypt(ciphertext_ofb, key, iv, modes.OFB) print(\u0026#34;OFB 解密消息:\u0026#34;, decrypted_message_ofb) # 运行主函数 if __name__ == \u0026#34;__main__\u0026#34;: main() ► 代码 - 实现二 1-3_Symmetric_AES_2\rimport os from pyaes import pyaes def pad(data): padding_needed = 16 - len(data) % 16 return data + chr(padding_needed) * padding_needed def split_blocks(data, block_size=16): return [data[i:i + block_size] for i in range(0, len(data), block_size)] def encrypt_cbc(key, iv, data): aes = pyaes.AESModeOfOperationCBC(key, iv=iv) padded_data = pad(data) blocks = split_blocks(padded_data) ciphertext = b\u0026#39;\u0026#39;.join(aes.encrypt(block) for block in blocks) return ciphertext def unpad(data): padding = ord(data[-1]) return data[:-padding] def decrypt_cbc(key, iv, ciphertext): aes = pyaes.AESModeOfOperationCBC(key, iv=iv) blocks = split_blocks(ciphertext) plaintext = \u0026#39;\u0026#39;.join(aes.decrypt(block).decode(\u0026#39;utf-8\u0026#39;) for block in blocks) return unpad(plaintext) def encrypt_ofb(key, iv, data): aes = pyaes.AESModeOfOperationOFB(key, iv=iv) return aes.encrypt(data) def decrypt_ofb(key, iv, ciphertext): aes = pyaes.AESModeOfOperationOFB(key, iv=iv) return aes.decrypt(ciphertext).decode() def main(): key = os.urandom(32) iv = os.urandom(16) print(repr(iv)) # Using CBC mode plaintext_cbc = \u0026#34;26221013_Daaihang_Wong\u0026#34; ciphertext_cbc = encrypt_cbc(key, iv, plaintext_cbc) print(repr(ciphertext_cbc)) decrypted_cbc = decrypt_cbc(key, iv, ciphertext_cbc) print(decrypted_cbc) print(decrypted_cbc == plaintext_cbc) # Using OFB mode plaintext_ofb = \u0026#34;26221013_Daaihang_Wong\u0026#34; ciphertext_ofb = encrypt_ofb(key, iv, plaintext_ofb) print(repr(ciphertext_ofb)) decrypted_ofb = decrypt_ofb(key, iv, ciphertext_ofb) print(decrypted_ofb) print(decrypted_ofb == plaintext_ofb) if __name__ == \u0026#34;__main__\u0026#34;: main() ► 代码 - 实现三 1-3_Symmetric_AES_3\r# 一个简单的 AES-128-ECB，其中 128 指采用 128 位密钥块， # ECB 模式，为长度不足 128 位的数据块填充 0x00。 s_box = [ [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76], [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0], [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15], [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75], [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84], [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf], [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8], [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2], [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73], [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb], [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79], [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08], [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a], [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e], [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf], [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16] ] s_box_inv = [ [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb], [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb], [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e], [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25], [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92], [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84], [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06], [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b], [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73], [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e], [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b], [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4], [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f], [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef], [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61], [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d] ] rc = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d] def sub_bytes(grid, inv=False): for i, v in enumerate(grid): if inv: # for decryption grid[i] = s_box_inv[v \u0026gt;\u0026gt; 4][v \u0026amp; 0xf] else: grid[i] = s_box[v \u0026gt;\u0026gt; 4][v \u0026amp; 0xf] def shift_rows(grid, inv=False): for i in range(4): if inv: # for decryption grid[i::4] = grid[i::4][-i:] + grid[i::4][:-i] else: grid[i::4] = grid[i::4][i:] + grid[i::4][:i] def mix_columns(grid): def mul_by_2(n): s = (n \u0026lt;\u0026lt; 1) \u0026amp; 0xff if n \u0026amp; 128: s ^= 0x1b return s def mul_by_3(n): return n ^ mul_by_2(n) def mix_column(c): return [ mul_by_2(c[0]) ^ mul_by_3(c[1]) ^ c[2] ^ c[3], # [2 3 1 1] c[0] ^ mul_by_2(c[1]) ^ mul_by_3(c[2]) ^ c[3], # [1 2 3 1] c[0] ^ c[1] ^ mul_by_2(c[2]) ^ mul_by_3(c[3]), # [1 1 2 3] mul_by_3(c[0]) ^ c[1] ^ c[2] ^ mul_by_2(c[3]), # [3 1 1 2] ] for i in range(0, 16, 4): grid[i:i + 4] = mix_column(grid[i:i + 4]) def key_expansion(grid): for i in range(10 * 4): r = grid[-4:] if i % 4 == 0: # 对上一轮最后4字节自循环、S-box置换、轮常数异或，从而计算出当前新一轮最前4字节 for j, v in enumerate(r[1:] + r[:1]): r[j] = s_box[v \u0026gt;\u0026gt; 4][v \u0026amp; 0xf] ^ (rc[i // 4] if j == 0 else 0) for j in range(4): grid.append(grid[-16] ^ r[j]) return grid def add_round_key(grid, round_key): for i in range(16): grid[i] ^= round_key[i] def encrypt(b, expanded_key): # First round add_round_key(b, expanded_key) for i in range(1, 10): sub_bytes(b) shift_rows(b) mix_columns(b) add_round_key(b, expanded_key[i * 16:]) # Final round sub_bytes(b) shift_rows(b) add_round_key(b, expanded_key[-16:]) return b def decrypt(b, expanded_key): # First round add_round_key(b, expanded_key[-16:]) for i in range(9, 0, -1): shift_rows(b, True) sub_bytes(b, True) add_round_key(b, expanded_key[i * 16:]) for _ in range(3): mix_columns(b) # Final round shift_rows(b, True) sub_bytes(b, True) add_round_key(b, expanded_key) return b def aes(typ, key, msg): expanded = key_expansion(bytearray(key)) # Pad the message to a multiple of 16 bytes b = bytearray(msg) if typ == 0: # only for encryption b = bytearray(msg + b\u0026#39;\\x00\u0026#39; * (16 - len(msg) % 16)) # Encrypt/decrypt the message for i in range(0, len(b), 16): if typ == 0: b[i:i + 16] = encrypt(b[i:i + 16], expanded) else: b[i:i + 16] = decrypt(b[i:i + 16], expanded) return bytes(b) if __name__ == \u0026#39;__main__\u0026#39;: key = b\u0026#34;Qw3rTyQw3rTyQw3r\u0026#34; enc = aes(0, key, b\u0026#39;Daaihang_Wong_26221013\u0026#39;) dec = aes(1, key, enc) print(\u0026#39;加密：\u0026#39;, enc) print(\u0026#39;解密：\u0026#39;, dec) ► 代码 - 实现四 1-3_Symmetric_AES_4（推荐参考）\rimport os # AES块大小 BLOCK_SIZE = 16 # 生成随机字节 def generate_random_bytes(length): return os.urandom(length) # 填充函数：PKCS#7 def pad(data): pad_length = BLOCK_SIZE - len(data) % BLOCK_SIZE return data + bytes([pad_length] * pad_length) # 去填充函数：PKCS#7 def unpad(data): pad_length = data[-1] return data[:-pad_length] # 定义S盒和逆S盒 s_box = [ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16, ] inv_s_box = [ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d, ] # 字节替换 def sub_bytes(state): return bytes(s_box[b] for b in state) # 字节替换的逆操作 def inv_sub_bytes(state): return bytes(inv_s_box[b] for b in state) # 行移位 def shift_rows(state): return bytes([ state[0], state[5], state[10], state[15], state[4], state[9], state[14], state[3], state[8], state[13], state[2], state[7], state[12], state[1], state[6], state[11], ]) # 行移位的逆操作 def inv_shift_rows(state): return bytes([ state[0], state[13], state[10], state[7], state[4], state[1], state[14], state[11], state[8], state[5], state[2], state[15], state[12], state[9], state[6], state[3], ]) # GF(2^8)中的乘法 def gmul(a, b): p = 0 for _ in range(8): if b \u0026amp; 1: p ^= a hi_bit_set = a \u0026amp; 0x80 a \u0026lt;\u0026lt;= 1 if hi_bit_set: a ^= 0x1b b \u0026gt;\u0026gt;= 1 return p \u0026amp; 0xff # 列混合 def mix_columns(state): mixed = bytearray(16) for i in range(4): mixed[i * 4 + 0] = gmul(state[i * 4 + 0], 2) ^ gmul(state[i * 4 + 1], 3) ^ state[i * 4 + 2] ^ state[i * 4 + 3] mixed[i * 4 + 1] = state[i * 4 + 0] ^ gmul(state[i * 4 + 1], 2) ^ gmul(state[i * 4 + 2], 3) ^ state[i * 4 + 3] mixed[i * 4 + 2] = state[i * 4 + 0] ^ state[i * 4 + 1] ^ gmul(state[i * 4 + 2], 2) ^ gmul(state[i * 4 + 3], 3) mixed[i * 4 + 3] = gmul(state[i * 4 + 0], 3) ^ state[i * 4 + 1] ^ state[i * 4 + 2] ^ gmul(state[i * 4 + 3], 2) return bytes(mixed) # 列混合的逆操作 def inv_mix_columns(state): mixed = bytearray(16) for i in range(4): mixed[i * 4 + 0] = gmul(state[i * 4 + 0], 14) ^ gmul(state[i * 4 + 1], 11) ^ gmul(state[i * 4 + 2], 13) ^ gmul( state[i * 4 + 3], 9) mixed[i * 4 + 1] = gmul(state[i * 4 + 0], 9) ^ gmul(state[i * 4 + 1], 14) ^ gmul(state[i * 4 + 2], 11) ^ gmul( state[i * 4 + 3], 13) mixed[i * 4 + 2] = gmul(state[i * 4 + 0], 13) ^ gmul(state[i * 4 + 1], 9) ^ gmul(state[i * 4 + 2], 14) ^ gmul( state[i * 4 + 3], 11) mixed[i * 4 + 3] = gmul(state[i * 4 + 0], 11) ^ gmul(state[i * 4 + 1], 13) ^ gmul(state[i * 4 + 2], 9) ^ gmul( state[i * 4 + 3], 14) return bytes(mixed) # 轮密钥加 def add_round_key(state, round_key): return bytes(a ^ b for a, b in zip(state, round_key)) # AES块加密函数 def aes_encrypt_block(block, key): state = add_round_key(block, key) for _ in range(9): state = sub_bytes(state) state = shift_rows(state) state = mix_columns(state) state = add_round_key(state, key) state = sub_bytes(state) state = shift_rows(state) state = add_round_key(state, key) return state # AES块解密函数 def aes_decrypt_block(block, key): state = add_round_key(block, key) state = inv_shift_rows(state) state = inv_sub_bytes(state) for _ in range(9): state = add_round_key(state, key) state = inv_mix_columns(state) state = inv_shift_rows(state) state = inv_sub_bytes(state) state = add_round_key(state, key) return state # CBC模式加密 def aes_cbc_encrypt(key, plaintext): iv = generate_random_bytes(BLOCK_SIZE) # 生成随机初始化向量（IV） plaintext_padded = pad(plaintext.encode(\u0026#39;utf-8\u0026#39;)) ciphertext = iv previous_block = iv for i in range(0, len(plaintext_padded), BLOCK_SIZE): plaintext_block = plaintext_padded[i:i + BLOCK_SIZE] xor_block = bytes(a ^ b for a, b in zip(plaintext_block, previous_block)) encrypted_block = aes_encrypt_block(xor_block, key) ciphertext += encrypted_block previous_block = encrypted_block return ciphertext # CBC模式解密 def aes_cbc_decrypt(key, ciphertext): iv = ciphertext[:BLOCK_SIZE] actual_ciphertext = ciphertext[BLOCK_SIZE:] previous_block = iv plaintext_padded = b\u0026#39;\u0026#39; for i in range(0, len(actual_ciphertext), BLOCK_SIZE): ciphertext_block = actual_ciphertext[i:i + BLOCK_SIZE] decrypted_block = aes_decrypt_block(ciphertext_block, key) plaintext_block = bytes(a ^ b for a, b in zip(decrypted_block, previous_block)) plaintext_padded += plaintext_block previous_block = ciphertext_block plaintext = unpad(plaintext_padded) return plaintext.decode(\u0026#39;utf-8\u0026#39;) # OFB模式加密 def aes_ofb_encrypt(key, plaintext): iv = generate_random_bytes(BLOCK_SIZE) # 生成随机初始化向量（IV） plaintext_bytes = plaintext.encode(\u0026#39;utf-8\u0026#39;) ciphertext = iv previous_block = iv for i in range(0, len(plaintext_bytes), BLOCK_SIZE): block = plaintext_bytes[i:i + BLOCK_SIZE] encrypted_block = aes_encrypt_block(previous_block, key) cipher_block = bytes(a ^ b for a, b in zip(block, encrypted_block)) ciphertext += cipher_block previous_block = encrypted_block return ciphertext # OFB模式解密 def aes_ofb_decrypt(key, ciphertext): iv = ciphertext[:BLOCK_SIZE] actual_ciphertext = ciphertext[BLOCK_SIZE:] previous_block = iv plaintext_bytes = b\u0026#39;\u0026#39; for i in range(0, len(actual_ciphertext), BLOCK_SIZE): ciphertext_block = actual_ciphertext[i:i + BLOCK_SIZE] encrypted_block = aes_encrypt_block(previous_block, key) plaintext_block = bytes(a ^ b for a, b in zip(ciphertext_block, encrypted_block)) plaintext_bytes += plaintext_block previous_block = encrypted_block return plaintext_bytes.decode(\u0026#39;utf-8\u0026#39;) # 生成AES密钥 def generate_aes_key(): return generate_random_bytes(BLOCK_SIZE) def main(): message = \u0026#34;26221013_Daaihang_Wong\u0026#34; # 学号+姓名 print(f\u0026#34;原始消息: {message}\u0026#34;) # 生成AES密钥 aes_key = generate_aes_key() # CBC模式 encrypted_message_cbc = aes_cbc_encrypt(aes_key, message) print(f\u0026#34;CBC模式加密后的消息: {encrypted_message_cbc}\u0026#34;) decrypted_message_cbc = aes_cbc_decrypt(aes_key, encrypted_message_cbc) print(f\u0026#34;CBC模式解密后的消息: {decrypted_message_cbc}\u0026#34;) # OFB模式 encrypted_message_ofb = aes_ofb_encrypt(aes_key, message) print(f\u0026#34;OFB模式加密后的消息: {encrypted_message_ofb}\u0026#34;) decrypted_message_ofb = aes_ofb_decrypt(aes_key, encrypted_message_ofb) print(f\u0026#34;OFB模式解密后的消息: {decrypted_message_ofb}\u0026#34;) # 检查解密后的消息是否正确 assert message == decrypted_message_cbc, \u0026#34;CBC模式解密失败！\u0026#34; assert message == decrypted_message_ofb, \u0026#34;OFB模式解密失败！\u0026#34; print(\u0026#34;CBC和OFB模式解密成功！\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: main() 实验二 非对称加密 公钥加密算法RSA 编写RSA密码算法（包含密钥生成、加密和解密） 利用此算法加密消息（学号+姓名），得密文；解密密文，检验能否正确解密 ► 代码 2-1_Asymmetric_RSA\rimport random from sympy import isprime, mod_inverse class RSAEncryption: def __init__(self, key_size=2048): self.key_size = key_size self.public_key, self.private_key = self.generate_keys() def generate_prime(self, n_bits): \u0026#34;\u0026#34;\u0026#34; 生成一个具有指定位数的素数 \u0026#34;\u0026#34;\u0026#34; while True: num = random.getrandbits(n_bits) if isprime(num): return num def generate_keys(self): \u0026#34;\u0026#34;\u0026#34; 生成RSA公钥和私钥 \u0026#34;\u0026#34;\u0026#34; # 选择两个不同的大素数 p 和 q p = self.generate_prime(self.key_size // 2) q = self.generate_prime(self.key_size // 2) # 计算 n = p * q n = p * q # 计算 φ(n) = (p-1)(q-1)，其中φ(n)为n的欧拉函数 phi = (p - 1) * (q - 1) # 选择一个整数 e，使得 1 \u0026lt; e \u0026lt; φ(n) 并且 e 与 φ(n) 互质 e = 65537 # 常用的 e 值 # 计算 d 使得 d * e ≡ 1 (mod φ(n))，即 d 是 e 模 φ(n) 的乘法逆元 d = mod_inverse(e, phi) # 公钥: (e, n) # 私钥: (d, n) public_key = (e, n) private_key = (d, n) return public_key, private_key def encrypt(self, message): \u0026#34;\u0026#34;\u0026#34; 使用公钥加密消息。将消息转换为整数 m，计算密文 c = m^e mod n。 \u0026#34;\u0026#34;\u0026#34; e, n = self.public_key # 将消息转换为字节，再转换为整数 message_bytes = message.encode(\u0026#39;utf-8\u0026#39;) message_int = int.from_bytes(message_bytes, byteorder=\u0026#39;big\u0026#39;) # 使用公钥加密消息 encrypted_message_int = pow(message_int, e, n) return encrypted_message_int def decrypt(self, encrypted_message_int): \u0026#34;\u0026#34;\u0026#34; 使用私钥解密消息。计算原文 m = c^d mod n，将整数 m 转换为字节，再转换为字符串。 \u0026#34;\u0026#34;\u0026#34; d, n = self.private_key # 使用私钥解密消息 decrypted_message_int = pow(encrypted_message_int, d, n) # 将整数转换为字节，再转换为字符串 decrypted_message_bytes = decrypted_message_int.to_bytes((decrypted_message_int.bit_length() + 7) // 8, byteorder=\u0026#39;big\u0026#39;) return decrypted_message_bytes.decode(\u0026#39;utf-8\u0026#39;) # 实例化RSAEncryption类 rsa_encryption = RSAEncryption() # 定义要加密的消息 student_info = \u0026#34;26221013_Daaihang_Wong\u0026#34; # 加密消息 encrypted_message = rsa_encryption.encrypt(student_info) print(f\u0026#34;加密消息：{encrypted_message}\u0026#34;) # 解密消息 decrypted_message = rsa_encryption.decrypt(encrypted_message) print(f\u0026#34;解密消息：{decrypted_message}\u0026#34;) # 验证解密是否正确 if student_info == decrypted_message: print(\u0026#34;解密成功，消息正确\u0026#34;) else: print(\u0026#34;解密失败，消息不正确\u0026#34;) 公钥加密算法ElGamal 编写ElGamal加密算法（包含密钥生成、加密和解密过程） 利用此算法加密消息（学号+姓名），得密文；解密密文，检验能否正确解密 ► 代码 2-2_Asymmetric_ElGamal\rfrom sympy import mod_inverse, isprime, randprime from random import randint class ElGamal: def __init__(self, key_size=2048): self.key_size = key_size # 生成一个大素数 p self.p = self.generate_large_prime() # 生成一个随机整数 g，满足 2 \u0026lt;= g \u0026lt;= p-1 self.g = randint(2, self.p - 1) # 生成私钥 x，满足 1 \u0026lt;= x \u0026lt;= p-2 self.x = randint(1, self.p - 2) # 计算公钥 h = g^x mod p self.h = pow(self.g, self.x, self.p) def generate_large_prime(self): \u0026#34;\u0026#34;\u0026#34;生成一个大素数\u0026#34;\u0026#34;\u0026#34; while True: # 在指定范围内生成一个随机素数 prime_candidate = randprime(2 ** (self.key_size - 1), 2 ** self.key_size) if isprime(prime_candidate): return prime_candidate def encrypt(self, message): \u0026#34;\u0026#34;\u0026#34; 使用公钥加密消息 步骤： 1. 生成一个随机整数 y，满足 1 \u0026lt;= y \u0026lt;= p-2 2. 计算 c1 = g^y mod p 3. 计算 s = h^y mod p 4. 将消息转换为整数 m 5. 计算 c2 = (m * s) mod p 返回密文对 (c1, c2) \u0026#34;\u0026#34;\u0026#34; y = randint(1, self.p - 2) c1 = pow(self.g, y, self.p) s = pow(self.h, y, self.p) m = int.from_bytes(message.encode(\u0026#39;utf-8\u0026#39;), \u0026#39;big\u0026#39;) c2 = (m * s) % self.p return c1, c2 def decrypt(self, ciphertext): \u0026#34;\u0026#34;\u0026#34; 使用私钥解密消息 步骤： 1. 提取密文对 (c1, c2) 2. 计算 s = c1^x mod p 3. 计算 s 的乘法逆元 s_inv = s^-1 mod p 4. 计算 m = (c2 * s_inv) mod p 5. 将整数 m 转换为字节，再转换为字符串 \u0026#34;\u0026#34;\u0026#34; c1, c2 = ciphertext s = pow(c1, self.x, self.p) s_inv = mod_inverse(s, self.p) m = (c2 * s_inv) % self.p message = m.to_bytes((m.bit_length() + 7) // 8, \u0026#39;big\u0026#39;).decode(\u0026#39;utf-8\u0026#39;) return message # 实例化ElGamal类 elgamal = ElGamal() # 定义要加密的消息 student_info = \u0026#34;26221013_Daaihang_Wong\u0026#34; # 加密消息 encrypted_message = elgamal.encrypt(student_info) print(f\u0026#34;加密消息：{encrypted_message}\u0026#34;) # 解密消息 decrypted_message = elgamal.decrypt(encrypted_message) print(f\u0026#34;解密消息：{decrypted_message}\u0026#34;) # 验证解密是否正确 if student_info == decrypted_message: print(\u0026#34;解密成功，消息正确\u0026#34;) else: print(\u0026#34;解密失败，消息不正确\u0026#34;) 混合加密（电子信封） 基于已编写的AES和RSA（或ElGamal）密码算法，实现混合加密 利用混合算法加密消息（学号+姓名），得密文；解密密文，检验能否正确解密 ► 代码\r# todo: 还没实现，先等着吧，太久了就在评论区滴滴我。 实验三 认证技术 注：过程中可以利用密码库中的Hash算法（如SHA2，SM3，SHA3等）\n消息认证码（MAC） 编写基于Hash算法的消息认证码 利用此算法对消息（学号+姓名）进行完整性和真实性认证 ► 代码 3-1_Certification_MAC\rimport hashlib def xor_bytes(a, b): \u0026#34;\u0026#34;\u0026#34;对两个字节序列进行按位异或操作\u0026#34;\u0026#34;\u0026#34; return bytes(x ^ y for x, y in zip(a, b)) def hmac_hash(key, message, hash_func=hashlib.sha256): \u0026#34;\u0026#34;\u0026#34; 实现 HMAC 算法 1. 如果密钥长度大于哈希块大小，则对密钥进行哈希处理 2. 如果密钥长度小于哈希块大小，则在密钥末尾补零至块大小 3. 生成内层和外层填充密钥 4. 使用填充后的密钥和消息进行两次哈希计算 \u0026#34;\u0026#34;\u0026#34; block_size = hash_func().block_size # 如果密钥长度大于块大小，则对密钥进行哈希处理 if len(key) \u0026gt; block_size: key = hash_func(key).digest() # 如果密钥长度小于块大小，则在密钥末尾补零至块大小 if len(key) \u0026lt; block_size: key = key.ljust(block_size, b\u0026#39;\\0\u0026#39;) # 生成内层和外层填充密钥 o_key_pad = xor_bytes(key, b\u0026#39;\\x5c\u0026#39; * block_size) i_key_pad = xor_bytes(key, b\u0026#39;\\x36\u0026#39; * block_size) # 内层哈希 inner_hash = hash_func(i_key_pad + message).digest() # 外层哈希 final_hash = hash_func(o_key_pad + inner_hash).hexdigest() return final_hash def generate_mac(key, message, hash_func=hashlib.sha256): \u0026#34;\u0026#34;\u0026#34; 生成消息认证码（MAC） 使用给定的密钥和消息生成 HMAC \u0026#34;\u0026#34;\u0026#34; message_bytes = message.encode(\u0026#39;utf-8\u0026#39;) return hmac_hash(key, message_bytes, hash_func) def verify_mac(key, message, mac_to_verify, hash_func=hashlib.sha256): \u0026#34;\u0026#34;\u0026#34; 验证消息认证码（MAC） 比较生成的 MAC 和提供的 MAC 是否相同 \u0026#34;\u0026#34;\u0026#34; generated_mac = generate_mac(key, message, hash_func) return compare_digest(generated_mac, mac_to_verify) def compare_digest(a, b): \u0026#34;\u0026#34;\u0026#34;比较两个哈希值，防止时间攻击\u0026#34;\u0026#34;\u0026#34; if len(a) != len(b): return False result = 0 for x, y in zip(a, b): result |= ord(x) ^ ord(y) return result == 0 # 消息 message = \u0026#34;26221013_Daaihang_Wong\u0026#34; # 使用的密钥 key = b\u0026#39;Qw3rTyQw3rTy\u0026#39; # 生成消息认证码 mac = generate_mac(key, message) print(f\u0026#34;消息: {message}\u0026#34;) print(f\u0026#34;生成的MAC: {mac}\u0026#34;) # 验证消息认证码 is_valid = verify_mac(key, message, mac) print(f\u0026#34;MAC验证结果: {\u0026#39;有效\u0026#39; if is_valid else \u0026#39;无效\u0026#39;}\u0026#34;) # 模拟篡改消息后的MAC验证 tampered_message = \u0026#34;26221013_D@a1han9_W0ng\u0026#34; tampered_mac = generate_mac(key, tampered_message) # 篡改后的消息的MAC is_valid_tampered = verify_mac(key, tampered_message, mac) print(f\u0026#34;篡改后的消息 与 原消息的MAC 验证的结果: {\u0026#39;有效\u0026#39; if is_valid_tampered else \u0026#39;无效\u0026#39;}\u0026#34;) RSA数字签名算法 编写RSA签名算法（包含密钥生成、签名和验证过程） 利用此算法对消息（学号+姓名）进行签名；并在接收方进行验证 ► 代码 3-2_Certification_RSA\r# RSA数字签名算法（利用密码库中的Hash算法） from cryptography.hazmat.primitives.asymmetric import rsa, padding from cryptography.hazmat.primitives import hashes, serialization def generate_rsa_key_pair(): private_key = rsa.generate_private_key( public_exponent=65537, key_size=2048 ) public_key = private_key.public_key() return private_key, public_key def sign_message(private_key, message, hash_algorithm): signature = private_key.sign( message.encode(), padding.PSS( mgf=padding.MGF1(hash_algorithm), salt_length=padding.PSS.MAX_LENGTH ), hash_algorithm ) return signature def verify_signature(public_key, message, signature, hash_algorithm): try: public_key.verify( signature, message.encode(), padding.PSS( mgf=padding.MGF1(hash_algorithm), salt_length=padding.PSS.MAX_LENGTH ), hash_algorithm ) return True except Exception as e: return False # 生成密钥对 private_key, public_key = generate_rsa_key_pair() # 消息 message = \u0026#34;26221013_Daaihang_Wong\u0026#34; # 使用的哈希算法 hash_algorithm = hashes.SHA256() # 生成签名 signature = sign_message(private_key, message, hash_algorithm) print(f\u0026#34;消息: {message}\u0026#34;) print(f\u0026#34;签名: {signature.hex()}\u0026#34;) # 验证签名 is_valid = verify_signature(public_key, message, signature, hash_algorithm) print(f\u0026#34;签名验证结果: {\u0026#39;有效\u0026#39; if is_valid else \u0026#39;无效\u0026#39;}\u0026#34;) # 模拟篡改消息后的签名验证 tampered_message = \u0026#34;26221013_D@a1han9_W0ng\u0026#34; is_valid_tampered = verify_signature(public_key, tampered_message, signature, hash_algorithm) print(f\u0026#34;篡改后消息的签名验证结果: {\u0026#39;有效\u0026#39; if is_valid_tampered else \u0026#39;无效\u0026#39;}\u0026#34;) ElGamal数字签名算法 编写ElGamal签名算法（包含密钥生成、签名和验证过程） 利用此算法对消息（学号+姓名）进行签名；并在接收方进行验证 ► 代码 3-3_Certification_ElGamal\rimport hashlib import random from math import gcd from sympy import mod_inverse, randprime, isprime # 确保生成元是模p的一个原根 def find_primitive_root(p): \u0026#34;\u0026#34;\u0026#34; 找到模 p 的一个原根。 参数： p -- 模数，应为素数 返回： g -- 模 p 的一个原根 \u0026#34;\u0026#34;\u0026#34; if not isprime(p): raise ValueError(\u0026#34;p must be a prime number\u0026#34;) phi = p - 1 prime_factors = set() n = phi i = 2 while i * i \u0026lt;= n: if n % i == 0: prime_factors.add(i) while n % i == 0: n //= i i += 1 if n \u0026gt; 1: prime_factors.add(n) for g in range(2, p): if all(pow(g, phi // factor, p) != 1 for factor in prime_factors): return g return None # ElGamal签名算法类 class ElGamalSignature: def __init__(self, p=None, g=None, x=None, bits=256): \u0026#34;\u0026#34;\u0026#34; 初始化 ElGamal 签名算法对象。 参数： p -- 大素数，模数 g -- 模 p 的原根 x -- 私钥 bits -- 素数 p 的位数，默认为 256 如果未提供 p、g、x，则随机生成。 \u0026#34;\u0026#34;\u0026#34; if p is None or g is None or x is None: self.p = randprime(2 ** (bits - 1), 2 ** bits) self.g = find_primitive_root(self.p) self.x = random.randint(1, self.p - 2) else: self.p = p self.g = g self.x = x self.y = pow(self.g, self.x, self.p) # 签名函数 def sign(self, message): \u0026#34;\u0026#34;\u0026#34; 对消息进行签名。 参数： message -- 要签名的消息 返回： (r, s) -- 签名结果 \u0026#34;\u0026#34;\u0026#34; h = hashlib.sha256(message.encode()).digest() h_int = int.from_bytes(h, byteorder=\u0026#39;big\u0026#39;) while True: k = random.randint(1, self.p - 2) if gcd(k, self.p - 1) == 1: # 确保 k 和 p-1 互质 break r = pow(self.g, k, self.p) k_inv = mod_inverse(k, self.p - 1) s = (h_int - self.x * r) * k_inv % (self.p - 1) return (r, s) # 验证函数 def verify(self, message, signature): \u0026#34;\u0026#34;\u0026#34; 验证消息的签名是否有效。 参数： message -- 原始消息 signature -- 签名元组 (r, s) 返回： valid -- 签名是否有效，True 或 False \u0026#34;\u0026#34;\u0026#34; r, s = signature if not (0 \u0026lt; r \u0026lt; self.p and 0 \u0026lt; s \u0026lt; self.p - 1): # 检查 r 和 s 的范围 return False h = hashlib.sha256(message.encode()).digest() h_int = int.from_bytes(h, byteorder=\u0026#39;big\u0026#39;) v1 = pow(self.y, r, self.p) * pow(r, s, self.p) % self.p v2 = pow(self.g, h_int, self.p) return v1 == v2 # 测试代码 if __name__ == \u0026#39;__main__\u0026#39;: # 大素数和生成元 p = 97380703184954711490740892696023412334547368592870793188226395165275008037663 g = 2 # 使用find_primitive_root找出的原根，若已知则直接赋值 x = 123456789 # 私钥 # 初始化ElGamal签名对象 elgamal = ElGamalSignature(p, g, x) # 消息 student_info = \u0026#34;26221013_Daaihang_Wong\u0026#34; # 签名 signature = elgamal.sign(student_info) print(\u0026#34;签名：\u0026#34;, signature) # 验证 if elgamal.verify(student_info, signature): print(\u0026#34;签名有效\u0026#34;) else: print(\u0026#34;签名无效\u0026#34;) 实验四：密钥管理 DH密钥交换协议 DH密钥交换协议（包含密钥生成、加密和解密） 双方利用此协议生成的密钥，结合已编写的AES算法来加密消息（学号+姓名），得密文；解密密文，检验能否正确解密 ► 代码 4-1_Key_Management_DH\rfrom cryptography.hazmat.primitives import serialization from cryptography.hazmat.primitives.asymmetric import x25519 from cryptography.hazmat.primitives.kdf.hkdf import HKDF from cryptography.hazmat.primitives import hashes from cryptography.hazmat.backends import default_backend from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes import os # 函数：执行Diffie-Hellman密钥交换 def diffie_hellman(): # 生成Alice的私钥和公钥 alice_private_key = x25519.X25519PrivateKey.generate() alice_public_key = alice_private_key.public_key() # 生成Bob的私钥和公钥 bob_private_key = x25519.X25519PrivateKey.generate() bob_public_key = bob_private_key.public_key() # Alice计算共享密钥 alice_shared_key = alice_private_key.exchange(bob_public_key) # Bob计算共享密钥 bob_shared_key = bob_private_key.exchange(alice_public_key) # 确保双方计算得到的共享密钥相同 assert alice_shared_key == bob_shared_key return alice_shared_key # 函数：使用AES加密消息 def encrypt_message(message, key): backend = default_backend() iv = os.urandom(16) # 生成随机IV cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=backend) encryptor = cipher.encryptor() ciphertext = encryptor.update(message) + encryptor.finalize() return (iv, ciphertext) # 函数：使用AES解密消息 def decrypt_message(ciphertext, key, iv): backend = default_backend() cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=backend) decryptor = cipher.decryptor() plaintext = decryptor.update(ciphertext) + decryptor.finalize() return plaintext # 主函数：演示过程 def main(): # 执行Diffie-Hellman密钥交换 shared_key = diffie_hellman() print(f\u0026#34;共享密钥 (Hex): {shared_key.hex()}\u0026#34;) # 使用HKDF从共享密钥派生AES密钥 derived_key = HKDF( algorithm=hashes.SHA256(), length=32, # 256位密钥长度 salt=None, info=b\u0026#39;Qw3rTyQw3rTyQw3rTy\u0026#39;, backend=default_backend() ).derive(shared_key) # 加密和解密消息 message = b\u0026#34;26221013_Daaihang_Wong\u0026#34; print(f\u0026#34;原始消息: {message.decode()}\u0026#34;) # 加密消息 iv, ciphertext = encrypt_message(message, derived_key) print(f\u0026#34;加密后的消息 (Hex): {ciphertext.hex()}\u0026#34;) # 解密消息 decrypted_message = decrypt_message(ciphertext, derived_key, iv) print(f\u0026#34;解密后的消息: {decrypted_message.decode()}\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: main() Shamir秘密共享方案 编写一个(n, t) Shamir秘密共享方案（包含秘密的分片和基于Lagrange插值方法恢复秘密） 实例化(n, t) =(5, 3)，而秘密信息为你的“学号+姓名”，演示秘密分片和恢复秘密的过程。 ► 代码 4-2_Key_Management_Shamir\rimport random from sympy import nextprime def generate_shares(secret, n, t, prime): \u0026#34;\u0026#34;\u0026#34; 使用Shamir的秘密共享方案生成n个分享，阈值为t。 参数： - secret: 要共享的秘密（以数值形式）。 - n: 要生成的分享总数。 - t: 恢复秘密所需的分享阈值。 - prime: 有限域素数，用于计算。 返回： - 一个包含分享的元组列表 (x, y)。 \u0026#34;\u0026#34;\u0026#34; coefficients = [secret] + [random.randrange(prime) for _ in range(t - 1)] def polynomial(x): return sum([coeff * pow(x, i, prime) % prime for i, coeff in enumerate(coefficients)]) % prime shares = [] for i in range(1, n + 1): x = i y = polynomial(x) shares.append((x, y)) return shares def recover_secret(shares, prime): \u0026#34;\u0026#34;\u0026#34; 使用Shamir的秘密共享方案恢复秘密，给定足够数量的分享。 参数： - shares: 一个分享的元组列表 (x, y)。 - prime: 有限域素数，用于计算。 返回： - 恢复的秘密（以数值形式）。 \u0026#34;\u0026#34;\u0026#34; def lagrange_interpolation(x, shares): total = 0 n = len(shares) for i in range(n): xi, yi = shares[i] term = yi for j in range(n): if i != j: xj, _ = shares[j] term = term * (x - xj) * pow(xi - xj, -1, prime) % prime total = (total + term) % prime return total return lagrange_interpolation(0, shares) # 示例：使用学号和姓名作为秘密 secret = \u0026#34;26221013_Daaihang_Wong\u0026#34; secret_numeric = int.from_bytes(secret.encode(), \u0026#34;big\u0026#34;) # 转换为数值形式 n = 5 # 总分享数 t = 3 # 恢复秘密所需的分享阈值 # 选择一个足够大的素数作为有限域的模数 prime = nextprime(secret_numeric) # 生成分享 shares = generate_shares(secret_numeric, n, t, prime) print(\u0026#34;分享：\u0026#34;) for share in shares: print(share) # 选择任意 t 个分享来恢复秘密 selected_shares = random.sample(shares, t) # 恢复秘密 recovered_numeric = recover_secret(selected_shares, prime) # 将数值形式的秘密转换为字节数据 recovered_secret_bytes = recovered_numeric.to_bytes((recovered_numeric.bit_length() + 7) // 8, \u0026#34;big\u0026#34;) # 比较恢复的秘密与原始秘密 if recovered_secret_bytes == secret.encode(): print(\u0026#34;\\n成功恢复秘密：\u0026#34;, secret) else: print(\u0026#34;\\n恢复的秘密与原始秘密不匹配\u0026#34;) ","permalink":"http://localhost:1313/docs/crypto/","summary":"\u003cblockquote\u003e\n\u003cp\u003e造福下一届，人人有责。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e所属实验：西安邮电大学 - 网络空间安全学院 - 密码学基础 - 课程设计实验**\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e实验时间：2024年上半年\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e文中所用第三方库使用 pip 自行安装。\u003c/p\u003e","title":"信息安全密码学基础 - 实验代码"},{"content":"证书系统 开发指北 页面管理 欢迎页（看板、控制台） 证书管理 证书列表颁发/收受证书列表/分享的证书（页面顶部选项卡切换）（只有这页） 添加证书 证书编辑 证书模板管理 模板列表（只有这页） 添加模板 模板编辑 申请阅办 审核证书 流程管理 人员管理 用户列表 组织管理 角色管理 个人中心 通知 分享的证书 设置 日志 角色管理 目前角色暂时写死下面的角色，在/src/access.ts进行修改。\n每个角色都包含其下级角色的所有权限，同时所有角色都具有用户权限。\n系统管理员 - Admin：\n负责整个系统的管理和维护。 创建和管理组织。 分配组织管理员权限。 配置系统设置和安全策略。 处理系统级别的问题和故障。 组织管理员 - OrgAdmin：\n负责管理特定组织内的用户和操作。 添加、删除和管理组织内的用户。 分配管理员权限给其他用户。 管理组织内用户的角色和权限。 颁发证书给组织内用户。 查看组织内用户的证书。 证书管理员 - LicenseAdmin：\n负责证书的管理和颁发。 颁发证书给普通用户。 查看普通用户的证书。 管理普通用户的角色和权限（例如，普通用户是否有权颁发证书）。 普通用户 - User：\n接收并查看自己获得的证书。 查看分享给自己的证书。 验证证书的真实性。 API 用户操作（/auth） POST /auth/register - 用户注册 POST /auth/login - 用户登录 POST /auth/logout - 用户注销 POST /auth/password/reset - 重置密码请求 POST /auth/password/reset/confirm - 重置密码 POST /auth/two-factor/enable - 启用两因素认证 POST /auth/two-factor/disable - 禁用两因素认证 POST /auth/two-factor/verify - 验证两因素认证 POST /auth/refresh-token - 刷新认证令牌 用户查询和管理（/user） GET /user/me - 获取当前用户信息 PUT /user/me - 更新当前用户信息 GET /user/{user_id}/logs - 获取用户日志 GET /user/{user_id} - 获取指定用户信息 GET /user - 批量获取用户信息 DELETE /user/{user_id} - 删除用户 PUT /user/{user_id} - 更新指定用户信息 PUT /user/{user_id}/deactivate - 禁用用户账号 PUT /user/{user_id}/activate - 启用用户账号 POST /user/{user_id}/roles - 分配角色给用户 DELETE /user/{user_id}/roles - 从用户移除角色 GET /user/{user_id}/permissions - 获取用户的所有权限 POST /user/batch - 批量创建用户 PUT /user/batch - 批量更新用户 DELETE /user/batch - 批量删除用户 角色操作（/auth/roles） POST /auth/roles - 创建角色 PUT /auth/roles/{role_id} - 更新角色 DELETE /auth/roles/{role_id} - 删除角色 POST /auth/roles/{role_id}/permissions - 为角色分配权限 DELETE /auth/roles/{role_id}/permissions - 移除角色的权限 角色查询（/roles） GET /roles - 获取所有角色 GET /roles/{role_id} - 获取指定角色信息 GET /roles/{role_id}/permissions - 获取指定角色的所有权限 权限管理（/auth/permissions） GET /auth/permissions - 获取所有权限 POST /auth/permissions - 创建权限 PUT /auth/permissions/{permission_id} - 更新权限 DELETE /auth/permissions/{permission_id} - 删除权限 GET /auth/permissions/{permission_id} - 获取指定权限信息 组织管理（/org） POST /org - 创建组织 PUT /org/{org_id} - 更新组织信息 DELETE /org/{org_id} - 删除组织 GET /org/{org_id} - 获取组织信息 GET /org - 获取所有组织 GET /org/{org_id}/users - 获取组织下的所有用户 POST /org/{org_id}/users - 批量添加用户到组织 DELETE /org/{org_id}/users - 批量从组织中移除用户 用户分组管理（/org/{org_id}/groups） POST /org/{org_id}/groups - 创建分组 PUT /org/{org_id}/groups/{group_id} - 更新分组信息 DELETE /org/{org_id}/groups/{group_id} - 删除分组 GET /org/{org_id}/groups - 获取所有分组 GET /org/{org_id}/groups/{group_id} - 获取分组信息 GET /org/{org_id}/groups/{group_id}/users - 获取分组下的所有用户 POST /org/{org_id}/groups/{group_id}/users - 批量添加用户到分组 DELETE /org/{org_id}/groups/{group_id}/users - 批量从分组中移除用户 审计日志（/logs） GET /logs - 获取所有审计日志 GET /logs/user/{user_id} - 获取指定用户的审计日志 GET /logs/org/{org_id} - 获取指定组织的审计日志 GET /logs/role/{role_id} - 获取指定角色的审计日志 安全管理（/security） POST /security/whitelist - 添加到IP白名单 DELETE /security/whitelist/{ip} - 从IP白名单中移除 GET /security/whitelist - 获取IP白名单 POST /security/blacklist - 添加到IP黑名单 DELETE /security/blacklist/{ip} - 从IP黑名单中移除 GET /security/blacklist - 获取IP黑名单 POST /security/password-policy - 设置密码策略 GET /security/password-policy - 获取密码策略 POST /security/account-lock - 锁定用户账号 POST /security/account-unlock - 解锁用户账号 其他可能的API GET /metrics - 获取系统指标 GET /health - 检查系统健康状态 这些API设计考虑了用户和角色的管理、组织和分组的管理、权限管理、两因素认证、审计日志、IP白名单和黑名单管理、密码策略和账户锁定等功能，确保系统的功能全面且安全。\n证书相关\n涵盖证书模板管理、证书内容字段管理、证书生成、验证、销毁、导出、分享、通知、历史记录、统计、安全管理和审计等功能。\n证书模板管理（/certificates/templates） POST /certificates/templates - 创建证书模板 PUT /certificates/templates/{template_id} - 更新证书模板 DELETE /certificates/templates/{template_id} - 删除证书模板 GET /certificates/templates - 获取所有证书模板 GET /certificates/templates/{template_id} - 获取指定证书模板 POST /certificates/templates/{template_id}/clone - 复制证书模板 POST /certificates/templates/{template_id}/publish - 发布证书模板 POST /certificates/templates/{template_id}/archive - 归档证书模板 证书内容字段管理（/certificates/templates/{template_id}/fields） POST /certificates/templates/{template_id}/fields - 添加证书内容字段 PUT /certificates/templates/{template_id}/fields/{field_id} - 更新证书内容字段 DELETE /certificates/templates/{template_id}/fields/{field_id} - 删除证书内容字段 GET /certificates/templates/{template_id}/fields - 获取证书模板的所有内容字段 GET /certificates/templates/{template_id}/fields/{field_id} - 获取指定证书内容字段 证书管理（/certificates） POST /certificates - 颁发证书 POST /certificates/batch - 批量颁发证书 GET /certificates - 获取所有证书 GET /certificates/{certificate_id} - 获取指定证书 DELETE /certificates/{certificate_id} - 销毁证书 POST /certificates/verify - 验证证书 POST /certificates/verify/batch - 批量验证证书 POST /certificates/{certificate_id}/revoke - 撤销证书 POST /certificates/{certificate_id}/renew - 更新证书信息并延长有效期 POST /certificates/expire - 设置证书过期时间 GET /certificates/expired - 获取已过期证书 GET /certificates/{certificate_id}/status - 获取证书的状态 POST /certificates/search - 搜索证书 POST /certificates/{certificate_id}/clone - 复制证书 证书导出和格式转换（/certificates/export） POST /certificates/{certificate_id}/pdf - 导出证书为PDF POST /certificates/export/pdf - 批量导出证书为PDF POST /certificates/{certificate_id}/csv - 导出证书为CSV POST /certificates/export/csv - 批量导出证书为CSV 证书分享和通知（/certificates/notify） POST /certificates/{certificate_id}/email - 将证书通过电子邮件发送 POST /certificates/{certificate_id}/share - 分享证书给其他用户 POST /certificates/{certificate_id}/notify - 提醒证书持有者证书即将到期 证书历史和统计（/certificates/history, /certificates/stats） GET /certificates/{certificate_id}/history - 查看证书的历史记录 GET /certificates/stats - 获取证书统计信息 证书二维码和其他操作（/certificates/qr_code, /certificates/expire, /certificates/renew） GET /certificates/{certificate_id}/qr_code - 获取证书的二维码 POST /certificates/expire - 设置证书过期时间 GET /certificates/expired - 获取已过期证书 POST /certificates/{certificate_id}/renew - 更新证书信息并延长有效期 证书安全和审计（/certificates/security, /certificates/logs） GET /certificates/logs - 获取所有证书的审计日志 GET /certificates/{certificate_id}/logs - 获取指定证书的审计日志 证书权限和授权（/certificates/permissions） POST /certificates/{certificate_id}/permissions - 添加证书权限 DELETE /certificates/{certificate_id}/permissions/{permission_id} - 删除证书权限 GET /certificates/{certificate_id}/permissions - 获取证书的所有权限 证书标签管理（/certificates/tags） POST /certificates/{certificate_id}/tags - 添加证书标签 DELETE /certificates/{certificate_id}/tags/{tag_id} - 删除证书标签 GET /certificates/{certificate_id}/tags - 获取证书的所有标签 证书分类管理（/certificates/categories） POST /certificates/categories - 创建证书分类 PUT /certificates/categories/{category_id} - 更新证书分类 DELETE /certificates/categories/{category_id} - 删除证书分类 GET /certificates/categories - 获取所有证书分类 GET /certificates/categories/{category_id} - 获取指定证书分类 POST /certificates/categories/{category_id}/assign - 分配证书到分类 证书的API覆盖范围 模板管理：增删查改、克隆、发布、归档。 内容字段管理：增删查改。 证书管理：颁发、批量颁发、查、删、验证、批量验证、撤销、续期、过期、状态查询、搜索、克隆。 导出和格式转换：导出为PDF、CSV，批量导出。 分享和通知：通过邮件发送、分享给其他用户、到期提醒。 历史和统计：查看历史记录、获取统计信息。 二维码：获取证书的二维码。 安全和审计：获取审计日志。 权限和授权：添加、删除、查询证书权限。 标签管理：添加、删除、查询证书标签。 分类管理：创建、更新、删除、查询分类，分配证书到分类。 这些API涵盖了证书管理系统的各个方面，确保系统功能全面、灵活且安全，能够满足各种证书管理的需求。\n设置项 个人设置（Settings） 账户设置\n用户名 密码 邮箱绑定 电话绑定 第三方绑定 微信 GitHub Google 退出登录 注销账号 关于\n关于 LicenseSys 和 LicenseApp 使用条款和隐私权 版权宣告 取得联络与支援 版本 开源许可证 社区参与 安全设置\n修改密码 两因素认证设置 安全问题设置 登录设备管理 最近活动 通知设置\n邮件通知 短信通知 应用内通知 通知偏好设置 外观设置\n主题选择 布局设置 显示语言 字体大小 夜间模式 系统配置（Config）（仅Admin权限可见） 系统基础设置\n系统名称 系统时区 默认语言 系统Logo 主页配置 维护模式 邮箱配置\nSMTP服务器地址 SMTP服务器端口 SMTP用户名 SMTP密码 发件人地址 邮箱验证模板 密码重置模板 密码策略（对新设置的有效）\n最小长度 最大长度 密码中需要包含特殊字符 密码有效期 密码历史记录 失败尝试次数限制 用户管理\n最大用户数 用户角色管理 用户组管理 邀请注册设置 用户注册审批 数据库配置\n数据库类型 数据库连接字符串 数据备份策略 数据恢复 日志和审计\n日志级别 日志保存路径 日志保留期限 审计日志启用 审计日志查看 API 配置\nAPI 访问密钥管理 API 速率限制 API 端点启用/禁用 第三方服务\nOAuth提供者配置 外部API集成 第三方插件管理 Webhooks配置 系统性能\n缓存配置 性能监控 资源限额 安全设置\n防火墙设置 IP 白名单/黑名单 数据加密设置 安全扫描配置 仪表盘 参数显示 本用户本月登录次数 本用户颁发/收受证书数量 当前系统中的用户总数 当前系统中的证书总数 待审核证书 快捷按钮 创建证书 批量创建证书 审核证书 统计图表 用户登录次数趋势图（近30天） 证书颁发/收受数量趋势图（近30天） 不同角色用户数量统计图 最新动态 最新用户注册信息 最新证书颁发/收受信息 关于 LicenseApp 和 LicenseSys 本系统（证书颁发与验证系统）分为 LicenseApp 和 LicenseSys 部分。LicenseApp 为系统前端部分，使用 Ant Design 构建。LicenseSys 为系统后端部分，使用 Django 构建。\n","permalink":"http://localhost:1313/docs/license-app/","summary":"\u003ch1 id=\"证书系统-开发指北\"\u003e证书系统 开发指北\u003c/h1\u003e\n\u003ch2 id=\"页面管理\"\u003e页面管理\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e欢迎页（看板、控制台）\u003c/li\u003e\n\u003cli\u003e证书管理\n\u003cul\u003e\n\u003cli\u003e证书列表颁发/收受证书列表/分享的证书（页面顶部选项卡切换）（只有这页）\u003c/li\u003e\n\u003cli\u003e添加证书\u003c/li\u003e\n\u003cli\u003e证书编辑\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e证书模板管理\n\u003cul\u003e\n\u003cli\u003e模板列表（只有这页）\u003c/li\u003e\n\u003cli\u003e添加模板\u003c/li\u003e\n\u003cli\u003e模板编辑\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e申请阅办\n\u003cul\u003e\n\u003cli\u003e审核证书\u003c/li\u003e\n\u003cli\u003e流程管理\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e人员管理\n\u003cul\u003e\n\u003cli\u003e用户列表\u003c/li\u003e\n\u003cli\u003e组织管理\u003c/li\u003e\n\u003cli\u003e角色管理\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e个人中心\n\u003cul\u003e\n\u003cli\u003e通知\u003c/li\u003e\n\u003cli\u003e分享的证书\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e设置\n\u003cul\u003e\n\u003cli\u003e日志\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"角色管理\"\u003e角色管理\u003c/h2\u003e\n\u003cp\u003e目前角色暂时写死下面的角色，在\u003ccode\u003e/src/access.ts\u003c/code\u003e进行修改。\u003c/p\u003e","title":"License App"},{"content":"时代滚滚向前，犹如奔腾的浪潮，裹挟着我们每个人。在时代的洪流中，我们如同一叶扁舟，或轻盈漂泊，或艰难前行。无论航向何方，我们都无法逃避这汹涌的波涛。\n对于普通人而言，生存并非易事。我们没有强大的力量去抵御风浪，也没有足够的资源去掌控方向。但我们却拥有不屈的意志和坚定的信念，这便是我们在逆境中生存的力量。\n面对时代的浪潮，我们要学会乘风破浪。顺应潮流，把握趋势，才能在竞争中立于不败之地。我们要不断学习新知识，提升自身技能，以适应时代发展的需求。同时，也要勇于创新，敢于拼搏，开辟属于自己的一片天地。\n面对时代的浪潮，我们要学会坚韧不拔。无论遭遇怎样的狂风骤雨，我们都要保持一颗坚定的心。风雨过后的彩虹总是格外美丽，只要我们坚持不懈，就一定能够迎来属于自己的胜利。\n面对时代的浪潮，我们要学会相互扶持。我们并非孤军奋战，身边还有无数与我们同舟共济的伙伴。在困难面前，我们要相互帮助，共同分担；在成功之时，我们要相互激励，共同分享。唯有团结一致，才能战胜一切困难，取得最终的胜利。\n时代是残酷的，但也是美丽的。只有经历过风雨的洗礼，才能懂得生命的宝贵。\n","permalink":"http://localhost:1313/daily/boat-tide/","summary":"\u003cp\u003e时代滚滚向前，犹如奔腾的浪潮，裹挟着我们每个人。在时代的洪流中，我们如同一叶扁舟，或轻盈漂泊，或艰难前行。无论航向何方，我们都无法逃避这汹涌的波涛。\u003c/p\u003e","title":"浪潮中的一叶扁舟"},{"content":"几天之后就是世界读书日了，任方老师让我也写一篇笔记与摘录。于是今天中午从床上爬起来，写下这感受已久的书。\n【人物】 毛美棠\n【出处】 《平如美棠：我俩的故事》\n【作者】 饶平如\n【摘录】 年少谈恋爱的时候，我们都衣食无忧。那时美棠便同我讲，情愿两人在乡间找一处僻静地方，有一片自己的园地，布衣蔬食以为乐。当时或只是少年人的浪漫。那时候我们也不知道田园牧歌里的旧中国已经走到了她的尽头，只以为我们可以像《浮生六记》里那样“买绕屋菜园十亩，课仆妪，植瓜蔬……布衣菜饭可乐终身，不必作远游计也”。\n人到中年，分隔两地，家计维艰。她又嘱我一定当心身体不要落下什么病痛，等孩子们独立了她要一个人来安徽陪我住，“我们身体好，没病痛，老了大家一块出去走走，看看电影，买点吃吃，多好”。她原是那样天真爱玩却也要求不多的一个人，两个人能清平安乐地在一起就是她操劳奔忙几十年里的寄望。 渐至晚景，生活终于安定。我得上天眷顾，虽曾两度急病手术，但恢复良好，身体健康。美棠自己却落下病痛，多年为肾病所累，食多忌口，行动亦不便。她对生活那样简单的向往，竟终不得实现，“他生未卜此生休”，徒叹奈何奈何！\n二〇〇八年三月二十三日，美棠的追悼会在龙华殡仪馆举行，我挽她：\n坎坷岁月费操持，渐入平康，奈何天不假年，恸今朝，君竟归去；\n沧桑世事谁能料？阅尽荣枯，从此红尘看破，盼来世，再续姻缘。\n【感悟】 平平淡淡、但又震撼人心的一本小书。真爱是一眼的钟情、终生的眷恋。饶平如爷爷用一生倾泻自己对妻子毛美棠真挚而朴素的爱。平如和美棠的一生，看尽了历史的无常和动荡。也难得他们仍有大时代中的个人情怀，难得无论何时，都没有相互背弃，也没有哪怕丝毫放弃的念头。每一件小事，平如都记于心间，这都是他对妻子的爱恋；没有海誓山盟、海枯石烂，只在日间轻轻流露，书中娓娓道来。“海并不深，怀念一个人比海还要深。”\n","permalink":"http://localhost:1313/daily/world-book-day-2024/","summary":"\u003cp\u003e几天之后就是世界读书日了，任方老师让我也写一篇笔记与摘录。于是今天中午从床上爬起来，写下这感受已久的书。\u003c/p\u003e","title":"2024世界读书日：《平如美棠：我俩的故事》"},{"content":"本文转载自 Awesome Python。\nAn opinionated list of awesome Python frameworks, libraries, software and resources.\nInspired by awesome-php.\nAwesome Python Admin Panels Algorithms and Design Patterns ASGI Servers Asynchronous Programming Audio Authentication Build Tools Built-in Classes Enhancement Caching ChatOps Tools CMS Code Analysis Command-line Interface Development Command-line Tools Computer Vision Configuration Files Cryptography Data Analysis Data Validation Data Visualization Database Drivers Database Date and Time Debugging Tools Deep Learning DevOps Tools Distributed Computing Distribution Documentation Downloader Editor Plugins and IDEs Email Environment Management File Manipulation Functional Programming Game Development Geolocation GUI Development Hardware HTML Manipulation HTTP Clients Image Processing Implementations Interactive Interpreter Internationalization Job Scheduler Logging Machine Learning Miscellaneous Natural Language Processing Network Virtualization News Feed ORM Package Management Package Repositories Penetration testing Permissions Processes Recommender Systems Refactoring RESTful API Robotics RPC Servers Science Search Serialization Serverless Frameworks Shell Specific Formats Processing Static Site Generator Tagging Task Queues Template Engine Testing Text Processing Third-party APIs URL Manipulation Video Web Asset Management Web Content Extracting Web Crawling Web Frameworks WebSocket WSGI Servers Resources Newsletters Podcasts Contributing Admin Panels Libraries for administrative interfaces.\najenti - The admin panel your servers deserve. django-grappelli - A jazzy skin for the Django Admin-Interface. flask-admin - Simple and extensible administrative interface framework for Flask. flower - Real-time monitor and web admin for Celery. jet-bridge - Admin panel framework for any application with nice UI (ex Jet Django). wooey - A Django app which creates automatic web UIs for Python scripts. streamlit - A framework which lets you build dashboards, generate reports, or create chat apps in minutes. Algorithms and Design Patterns Python implementation of data structures, algorithms and design patterns. Also see awesome-algorithms.\nAlgorithms algorithms - Minimal examples of data structures and algorithms. python-ds - A collection of data structure and algorithms for coding interviews. sortedcontainers - Fast and pure-Python implementation of sorted collections. thealgorithms - All Algorithms implemented in Python. Design Patterns pypattyrn - A simple yet effective library for implementing common design patterns. python-patterns - A collection of design patterns in Python. transitions - A lightweight, object-oriented finite state machine implementation. ASGI Servers ASGI-compatible web servers.\ndaphne - A HTTP, HTTP2 and WebSocket protocol server for ASGI and ASGI-HTTP. uvicorn - A lightning-fast ASGI server implementation, using uvloop and httptools. hypercorn - An ASGI and WSGI Server based on Hyper libraries and inspired by Gunicorn. Asynchronous Programming Libraries for asynchronous, concurrent and parallel execution. Also see awesome-asyncio.\nasyncio - (Python standard library) Asynchronous I/O, event loop, coroutines and tasks. awesome-asyncio concurrent.futures - (Python standard library) A high-level interface for asynchronously executing callables. multiprocessing - (Python standard library) Process-based parallelism. trio - A friendly library for async concurrency and I/O. twisted - An event-driven networking engine. uvloop - Ultra fast asyncio event loop. eventlet - Asynchronous framework with WSGI support. gevent - A coroutine-based Python networking library that uses greenlet. Audio Libraries for manipulating audio and its metadata.\nAudio audioread - Cross-library (GStreamer + Core Audio + MAD + FFmpeg) audio decoding. audioFlux - A library for audio and music analysis, feature extraction. dejavu - Audio fingerprinting and recognition. kapre - Keras Audio Preprocessors. librosa - Python library for audio and music analysis. matchering - A library for automated reference audio mastering. mingus - An advanced music theory and notation package with MIDI file and playback support. pyaudioanalysis - Audio feature extraction, classification, segmentation and applications. pydub - Manipulate audio with a simple and easy high level interface. timeside - Open web audio processing framework. Metadata beets - A music library manager and MusicBrainz tagger. eyed3 - A tool for working with audio files, specifically MP3 files containing ID3 metadata. mutagen - A Python module to handle audio metadata. tinytag - A library for reading music meta data of MP3, OGG, FLAC and Wave files. Authentication Libraries for implementing authentications schemes.\nOAuth authlib - JavaScript Object Signing and Encryption draft implementation. django-allauth - Authentication app for Django that \u0026ldquo;just works.\u0026rdquo; django-oauth-toolkit - OAuth 2 goodies for Django. oauthlib - A generic and thorough implementation of the OAuth request-signing logic. JWT pyjwt - JSON Web Token implementation in Python. python-jose - A JOSE implementation in Python. Build Tools Compile software from source code.\nbitbake - A make-like build tool for embedded Linux. buildout - A build system for creating, assembling and deploying applications from multiple parts. platformio - A console tool to build code with different development platforms. pybuilder - A continuous build tool written in pure Python. scons - A software construction tool. Built-in Classes Enhancement Libraries for enhancing Python built-in classes.\nattrs - Replacement for __init__, __eq__, __repr__, etc. boilerplate in class definitions. bidict - Efficient, Pythonic bidirectional map data structures and related functionality.. box - Python dictionaries with advanced dot notation access. dataclasses - (Python standard library) Data classes. dotteddict - A library that provides a method of accessing lists and dicts with a dotted path notation. CMS Content Management Systems.\nfeincms - One of the most advanced Content Management Systems built on Django. indico - A feature-rich event management system, made @ CERN. wagtail - A Django content management system. Caching Libraries for caching data.\nbeaker - A WSGI middleware for sessions and caching. django-cache-machine - Automatic caching and invalidation for Django models. django-cacheops - A slick ORM cache with automatic granular event-driven invalidation. dogpile.cache - dogpile.cache is a next generation replacement for Beaker made by the same authors. hermescache - Python caching library with tag-based invalidation and dogpile effect prevention. pylibmc - A Python wrapper around the libmemcached interface. python-diskcache - SQLite and file backed cache backend with faster lookups than memcached and redis. ChatOps Tools Libraries for chatbot development.\nerrbot - The easiest and most popular chatbot to implement ChatOps. Code Analysis Tools of static analysis, linters and code quality checkers. Also see awesome-static-analysis.\nCode Analysis code2flow - Turn your Python and JavaScript code into DOT flowcharts. prospector - A tool to analyse Python code. vulture - A tool for finding and analysing dead Python code. Code Linters flake8 - A wrapper around pycodestyle, pyflakes and McCabe. awesome-flake8-extensions pylint - A fully customizable source code analyzer. Code Formatters black - The uncompromising Python code formatter. isort - A Python utility / library to sort imports. yapf - Yet another Python code formatter from Google. Static Type Checkers, also see awesome-python-typing mypy - Check variable types during compile time. pyre-check - Performant type checking. typeshed - Collection of library stubs for Python, with static types. Static Type Annotations Generators monkeytype - A system for Python that generates static type annotations by collecting runtime types. pytype - Pytype checks and infers types for Python code - without requiring type annotations. Command-line Interface Development Libraries for building command-line applications.\nCommand-line Application Development cement - CLI Application Framework for Python. click - A package for creating beautiful command line interfaces in a composable way. cliff - A framework for creating command-line programs with multi-level commands. python-fire - A library for creating command line interfaces from absolutely any Python object. python-prompt-toolkit - A library for building powerful interactive command lines. Terminal Rendering alive-progress - A new kind of Progress Bar, with real-time throughput, eta and very cool animations. asciimatics - A package to create full-screen text UIs (from interactive forms to ASCII animations). bashplotlib - Making basic plots in the terminal. colorama - Cross-platform colored terminal text. rich - Python library for rich text and beautiful formatting in the terminal. Also provides a great RichHandler log handler. tqdm - Fast, extensible progress bar for loops and CLI. Command-line Tools Useful CLI-based tools for productivity.\nProductivity Tools copier - A library and command-line utility for rendering projects templates. cookiecutter - A command-line utility that creates projects from cookiecutters (project templates). doitlive - A tool for live presentations in the terminal. howdoi - Instant coding answers via the command line. invoke - A tool for managing shell-oriented subprocesses and organizing executable Python code into CLI-invokable tasks. pathpicker - Select files out of bash output. thefuck - Correcting your previous console command. tmuxp - A tmux session manager. try - A dead simple CLI to try out python packages - it\u0026rsquo;s never been easier. CLI Enhancements httpie - A command line HTTP client, a user-friendly cURL replacement. iredis - Redis CLI with autocompletion and syntax highlighting. litecli - SQLite CLI with autocompletion and syntax highlighting. mycli - MySQL CLI with autocompletion and syntax highlighting. pgcli - PostgreSQL CLI with autocompletion and syntax highlighting. Computer Vision Libraries for Computer Vision.\neasyocr - Ready-to-use OCR with 40+ languages supported. kornia - Open Source Differentiable Computer Vision Library for PyTorch. opencv - Open Source Computer Vision Library. pytesseract - A wrapper for Google Tesseract OCR. tesserocr - Another simple, Pillow-friendly, wrapper around the tesseract-ocr API for OCR. Configuration Files Libraries for storing and parsing configuration options.\nconfigparser - (Python standard library) INI file parser. configobj - INI file parser with validation. hydra - Hydra is a framework for elegantly configuring complex applications. python-decouple - Strict separation of settings from code. Cryptography cryptography - A package designed to expose cryptographic primitives and recipes to Python developers. paramiko - The leading native Python SSHv2 protocol library. pynacl - Python binding to the Networking and Cryptography (NaCl) library. Data Analysis Libraries for data analyzing.\npandas - A library providing high-performance, easy-to-use data structures and data analysis tools. aws-sdk-pandas - Pandas on AWS. datasette - An open source multi-tool for exploring and publishing data. optimus - Agile Data Science Workflows made easy with PySpark. Data Validation Libraries for validating data. Used for forms in many cases.\ncerberus - A lightweight and extensible data validation library. colander - Validating and deserializing data obtained via XML, JSON, an HTML form post. jsonschema - An implementation of JSON Schema for Python. schema - A library for validating Python data structures. schematics - Data Structure Validation. voluptuous - A Python data validation library. pydantic - Data validation using Python type hints. Data Visualization Libraries for visualizing data. Also see awesome-javascript.\naltair - Declarative statistical visualization library for Python. bokeh - Interactive Web Plotting for Python. bqplot - Interactive Plotting Library for the Jupyter Notebook. cartopy - A cartographic python library with matplotlib support. diagrams - Diagram as Code. matplotlib - A Python 2D plotting library. plotnine - A grammar of graphics for Python based on ggplot2. pygal - A Python SVG Charts Creator. pygraphviz - Python interface to Graphviz. pyqtgraph - Interactive and realtime 2D/3D/Image plotting and science/engineering widgets. seaborn - Statistical data visualization using Matplotlib. vispy - High-performance scientific visualization based on OpenGL. Database Databases implemented in Python.\npickleDB - A simple and lightweight key-value store for Python. tinydb - A tiny, document-oriented database. zodb - A native object database for Python. A key-value and object graph database. Database Drivers Libraries for connecting and operating databases.\nMySQL - awesome-mysql mysqlclient - MySQL connector with Python 3 support (mysql-python fork). pymysql - A pure Python MySQL driver compatible to mysql-python. PostgreSQL - awesome-postgres psycopg - The most popular PostgreSQL adapter for Python. SQlite - awesome-sqlite sqlite3 - (Python standard library) SQlite interface compliant with DB-API 2.0. sqlite-utils - Python CLI utility and library for manipulating SQLite databases. Other Relational Databases pymssql - A simple database interface to Microsoft SQL Server. clickhouse-driver - Python driver with native interface for ClickHouse. NoSQL Databases cassandra-driver - The Python Driver for Apache Cassandra. happybase - A developer-friendly library for Apache HBase. kafka-python - The Python client for Apache Kafka. pymongo - The official Python client for MongoDB. motor - The async Python driver for MongoDB. redis-py - The Python client for Redis. Date and Time Libraries for working with dates and times.\narrow - A Python library that offers a sensible and human-friendly approach to creating, manipulating, formatting and converting dates, times and timestamps. dateutil - Extensions to the standard Python datetime module. pendulum - Python datetimes made easy. pytz - World timezone definitions, modern and historical. Brings the tz database into Python. Debugging Tools Libraries for debugging code.\npdb-like Debugger ipdb - IPython-enabled pdb. pudb - A full-screen, console-based Python debugger. Tracing manhole - Debugging UNIX socket connections and present the stacktraces for all threads and an interactive prompt. python-hunter - A flexible code tracing toolkit. Profiler py-spy - A sampling profiler for Python programs. Written in Rust. vprof - Visual Python profiler. Others django-debug-toolbar - Display various debug information for Django. flask-debugtoolbar - A port of the django-debug-toolbar to flask. icecream - Inspect variables, expressions, and program execution with a single, simple function call. pyelftools - Parsing and analyzing ELF files and DWARF debugging information. Deep Learning Frameworks for Neural Networks and Deep Learning. Also see awesome-deep-learning.\nkeras - A high-level neural networks library and capable of running on top of either TensorFlow or Theano. pytorch - Tensors and Dynamic neural networks in Python with strong GPU acceleration. pytorch-lightning - Deep learning framework to train, deploy, and ship AI products Lightning fast. tensorflow - The most popular Deep Learning framework created by Google. theano - A library for fast numerical computation. DevOps Tools Software and libraries for DevOps.\nConfiguration Management ansible - A radically simple IT automation platform. cloudinit - A multi-distribution package that handles early initialization of a cloud instance. openstack - Open source software for building private and public clouds. pyinfra - A versatile CLI tools and python libraries to automate infrastructure. saltstack - Infrastructure automation and management system. SSH-style Deployment cuisine - Chef-like functionality for Fabric. fabric - A simple, Pythonic tool for remote execution and deployment. Process Management supervisor - Supervisor process control system for UNIX. Monitoring psutil - A cross-platform process and system utilities module. Backup borg - A deduplicating archiver with compression and encryption. Distributed Computing Frameworks and libraries for Distributed Computing.\nBatch Processing dask - A flexible parallel computing library for analytic computing. luigi - A module that helps you build complex pipelines of batch jobs. PySpark - Apache Spark Python API. Ray - A system for parallel and distributed Python that unifies the machine learning ecosystem. Stream Processing faust - A stream processing library, porting the ideas from Kafka Streams to Python. streamparse - Run Python code against real-time streams of data via Apache Storm. Distribution Libraries to create packaged executables for release distribution.\npy2app - Freezes Python scripts (Mac OS X). py2exe - Freezes Python scripts (Windows). pyarmor - A tool used to obfuscate python scripts, bind obfuscated scripts to fixed machine or expire obfuscated scripts. pyinstaller - Converts Python programs into stand-alone executables (cross-platform). shiv - A command line utility for building fully self-contained zipapps (PEP 441), but with all their dependencies included. Documentation Libraries for generating project documentation.\nsphinx - Python Documentation generator. awesome-sphinxdoc pdoc - Epydoc replacement to auto generate API documentation for Python libraries. Downloader Libraries for downloading.\nakshare - A financial data interface library, built for human beings! s3cmd - A command line tool for managing Amazon S3 and CloudFront. youtube-dl - A command-line program to download videos from YouTube and other video sites. Editor Plugins and IDEs Emacs elpy - Emacs Python Development Environment. Vim jedi-vim - Vim bindings for the Jedi auto-completion library for Python. python-mode - An all in one plugin for turning Vim into a Python IDE. YouCompleteMe - Includes Jedi-based completion engine for Python. Visual Studio PTVS - Python Tools for Visual Studio. Visual Studio Code Python - The official VSCode extension with rich support for Python. IDE PyCharm - Commercial Python IDE by JetBrains. Has free community edition available. spyder - Open Source Python IDE. Email Libraries for sending and parsing email.\nMail Servers modoboa - A mail hosting and management platform including a modern Web UI. salmon - A Python Mail Server. Clients imbox - Python IMAP for Humans. yagmail - Yet another Gmail/SMTP client. Others flanker - An email address and Mime parsing library. mailer - High-performance extensible mail delivery framework. Environment Management Libraries for Python version and virtual environment management.\npyenv - Simple Python version management. virtualenv - A tool to create isolated Python environments. File Manipulation Libraries for file manipulation.\nmimetypes - (Python standard library) Map filenames to MIME types. pathlib - (Python standard library) An cross-platform, object-oriented path library. path.py - A module wrapper for os.path. python-magic - A Python interface to the libmagic file type identification library. watchdog - API and shell utilities to monitor file system events. Functional Programming Functional Programming with Python.\ncoconut - A variant of Python built for simple, elegant, Pythonic functional programming. funcy - A fancy and practical functional tools. more-itertools - More routines for operating on iterables, beyond itertools. returns - A set of type-safe monads, transformers, and composition utilities. cytoolz - Cython implementation of Toolz: High performance functional utilities. toolz - A collection of functional utilities for iterators, functions, and dictionaries. GUI Development Libraries for working with graphical user interface applications.\ncurses - Built-in wrapper for ncurses used to create terminal GUI applications. Eel - A library for making simple Electron-like offline HTML/JS GUI apps. enaml - Creating beautiful user-interfaces with Declarative Syntax like QML. Flexx - Flexx is a pure Python toolkit for creating GUI\u0026rsquo;s, that uses web technology for its rendering. Gooey - Turn command line programs into a full GUI application with one line. kivy - A library for creating NUI applications, running on Windows, Linux, Mac OS X, Android and iOS. pyglet - A cross-platform windowing and multimedia library for Python. PyGObject - Python Bindings for GLib/GObject/GIO/GTK+ (GTK+3). PyQt - Python bindings for the Qt cross-platform application and UI framework. PySimpleGUI - Wrapper for tkinter, Qt, WxPython and Remi. pywebview - A lightweight cross-platform native wrapper around a webview component. Tkinter - Tkinter is Python\u0026rsquo;s de-facto standard GUI package. Toga - A Python native, OS native GUI toolkit. urwid - A library for creating terminal GUI applications with strong support for widgets, events, rich colors, etc. wxPython - A blending of the wxWidgets C++ class library with the Python. DearPyGui - A Simple GPU accelerated Python GUI framework GraphQL Libraries for working with GraphQL.\ngraphene - GraphQL framework for Python. Game Development Awesome game development libraries.\nArcade - Arcade is a modern Python framework for crafting games with compelling graphics and sound. Cocos2d - cocos2d is a framework for building 2D games, demos, and other graphical/interactive applications. Harfang3D - Python framework for 3D, VR and game development. Panda3D - 3D game engine developed by Disney. Pygame - Pygame is a set of Python modules designed for writing games. PyOgre - Python bindings for the Ogre 3D render engine, can be used for games, simulations, anything 3D. PyOpenGL - Python ctypes bindings for OpenGL and it\u0026rsquo;s related APIs. PySDL2 - A ctypes based wrapper for the SDL2 library. RenPy - A Visual Novel engine. Geolocation Libraries for geocoding addresses and working with latitudes and longitudes.\ndjango-countries - A Django app that provides a country field for models and forms. geodjango - A world-class geographic web framework. geojson - Python bindings and utilities for GeoJSON. geopy - Python Geocoding Toolbox. HTML Manipulation Libraries for working with HTML and XML.\nbeautifulsoup - Providing Pythonic idioms for iterating, searching, and modifying HTML or XML. bleach - A whitelist-based HTML sanitization and text linkification library. cssutils - A CSS library for Python. html5lib - A standards-compliant library for parsing and serializing HTML documents and fragments. lxml - A very fast, easy-to-use and versatile library for handling HTML and XML. markupsafe - Implements a XML/HTML/XHTML Markup safe string for Python. pyquery - A jQuery-like library for parsing HTML. untangle - Converts XML documents to Python objects for easy access. WeasyPrint - A visual rendering engine for HTML and CSS that can export to PDF. xmldataset - Simple XML Parsing. xmltodict - Working with XML feel like you are working with JSON. HTTP Clients Libraries for working with HTTP.\nhttpx - A next generation HTTP client for Python. requests - HTTP Requests for Humans. treq - Python requests like API built on top of Twisted\u0026rsquo;s HTTP client. urllib3 - A HTTP library with thread-safe connection pooling, file post support, sanity friendly. Hardware Libraries for programming with hardware.\nkeyboard - Hook and simulate global keyboard events on Windows and Linux. mouse - Hook and simulate global mouse events on Windows and Linux. pynput - A library to control and monitor input devices. scapy - A brilliant packet manipulation library. Image Processing Libraries for manipulating images.\npillow - Pillow is the friendly PIL fork. python-barcode - Create barcodes in Python with no extra dependencies. pymatting - A library for alpha matting. python-qrcode - A pure Python QR Code generator. pywal - A tool that generates color schemes from images. pyvips - A fast image processing library with low memory needs. quads - Computer art based on quadtrees. scikit-image - A Python library for (scientific) image processing. thumbor - A smart imaging service. It enables on-demand crop, re-sizing and flipping of images. wand - Python bindings for MagickWand, C API for ImageMagick. Implementations Implementations of Python.\ncpython - Default, most widely used implementation of the Python programming language written in C. cython - Optimizing Static Compiler for Python. clpython - Implementation of the Python programming language written in Common Lisp. ironpython - Implementation of the Python programming language written in C#. micropython - A lean and efficient Python programming language implementation. numba - Python JIT compiler to LLVM aimed at scientific Python. peachpy - x86-64 assembler embedded in Python. pypy - A very fast and compliant implementation of the Python language. pyston - A Python implementation using JIT techniques. Interactive Interpreter Interactive Python interpreters (REPL).\nbpython - A fancy interface to the Python interpreter. Jupyter Notebook (IPython) - A rich toolkit to help you make the most out of using Python interactively. awesome-jupyter ptpython - Advanced Python REPL built on top of the python-prompt-toolkit. Internationalization Libraries for working with i18n.\nBabel - An internationalization library for Python. PyICU - A wrapper of International Components for Unicode C++ library (ICU). Job Scheduler Libraries for scheduling jobs.\nAirflow - Airflow is a platform to programmatically author, schedule and monitor workflows. APScheduler - A light but powerful in-process task scheduler that lets you schedule functions. django-schedule - A calendaring app for Django. doit - A task runner and build tool. gunnery - Multipurpose task execution tool for distributed systems with web-based interface. Joblib - A set of tools to provide lightweight pipelining in Python. Plan - Writing crontab file in Python like a charm. Prefect - A modern workflow orchestration framework that makes it easy to build, schedule and monitor robust data pipelines. schedule - Python job scheduling for humans. Spiff - A powerful workflow engine implemented in pure Python. TaskFlow - A Python library that helps to make task execution easy, consistent and reliable. Logging Libraries for generating and working with logs.\nlogbook - Logging replacement for Python. logging - (Python standard library) Logging facility for Python. loguru - Library which aims to bring enjoyable logging in Python. sentry-python - Sentry SDK for Python. structlog - Structured logging made easy. Machine Learning Libraries for Machine Learning. Also see awesome-machine-learning.\ngym - A toolkit for developing and comparing reinforcement learning algorithms. H2O - Open Source Fast Scalable Machine Learning Platform. Metrics - Machine learning evaluation metrics. NuPIC - Numenta Platform for Intelligent Computing. scikit-learn - The most popular Python library for Machine Learning. Spark ML - Apache Spark\u0026rsquo;s scalable Machine Learning library. vowpal_porpoise - A lightweight Python wrapper for Vowpal Wabbit. xgboost - A scalable, portable, and distributed gradient boosting library. MindsDB - MindsDB is an open source AI layer for existing databases that allows you to effortlessly develop, train and deploy state-of-the-art machine learning models using standard queries. Microsoft Windows Python programming on Microsoft Windows.\nPython(x,y) - Scientific-applications-oriented Python Distribution based on Qt and Spyder. pythonlibs - Unofficial Windows binaries for Python extension packages. PythonNet - Python Integration with the .NET Common Language Runtime (CLR). PyWin32 - Python Extensions for Windows. WinPython - Portable development environment for Windows 7/8. Miscellaneous Useful libraries or tools that don\u0026rsquo;t fit in the categories above.\nblinker - A fast Python in-process signal/event dispatching system. boltons - A set of pure-Python utilities. itsdangerous - Various helpers to pass trusted data to untrusted environments. magenta - A tool to generate music and art using artificial intelligence. pluginbase - A simple but flexible plugin system for Python. tryton - A general purpose business framework. Natural Language Processing Libraries for working with human languages.\nGeneral gensim - Topic Modeling for Humans. langid.py - Stand-alone language identification system. nltk - A leading platform for building Python programs to work with human language data. pattern - A web mining module. polyglot - Natural language pipeline supporting hundreds of languages. pytext - A natural language modeling framework based on PyTorch. PyTorch-NLP - A toolkit enabling rapid deep learning NLP prototyping for research. spacy - A library for industrial-strength natural language processing in Python and Cython. Stanza - The Stanford NLP Group\u0026rsquo;s official Python library, supporting 60+ languages. Chinese funNLP - A collection of tools and datasets for Chinese NLP. jieba - The most popular Chinese text segmentation library. pkuseg-python - A toolkit for Chinese word segmentation in various domains. snownlp - A library for processing Chinese text. Network Virtualization Tools and libraries for Virtual Networking and SDN (Software Defined Networking).\nmininet - A popular network emulator and API written in Python. napalm - Cross-vendor API to manipulate network devices. pox - A Python-based SDN control applications, such as OpenFlow SDN controllers. News Feed Libraries for building user\u0026rsquo;s activities.\ndjango-activity-stream - Generating generic activity streams from the actions on your site. Stream Framework - Building news feed and notification systems using Cassandra and Redis. ORM Libraries that implement Object-Relational Mapping or data mapping techniques.\nRelational Databases Django Models - The Django ORM. SQLAlchemy - The Python SQL Toolkit and Object Relational Mapper. awesome-sqlalchemy dataset - Store Python dicts in a database - works with SQLite, MySQL, and PostgreSQL. orator - The Orator ORM provides a simple yet beautiful ActiveRecord implementation. orm - An async ORM. peewee - A small, expressive ORM. pony - ORM that provides a generator-oriented interface to SQL. pydal - A pure Python Database Abstraction Layer. NoSQL Databases hot-redis - Rich Python data types for Redis. mongoengine - A Python Object-Document-Mapper for working with MongoDB. PynamoDB - A Pythonic interface for Amazon DynamoDB. redisco - A Python Library for Simple Models and Containers Persisted in Redis. Package Management Libraries for package and dependency management.\npip - The package installer for Python. pip-tools - A set of tools to keep your pinned Python dependencies fresh. PyPI conda - Cross-platform, Python-agnostic binary package manager. poetry - Python dependency management and packaging made easy. Package Repositories Local PyPI repository server and proxies.\nbandersnatch - PyPI mirroring tool provided by Python Packaging Authority (PyPA). devpi - PyPI server and packaging/testing/release tool. localshop - Local PyPI server (custom packages and auto-mirroring of pypi). warehouse - Next generation Python Package Repository (PyPI). Penetration Testing Frameworks and tools for penetration testing.\nfsociety - A Penetration testing framework. setoolkit - A toolkit for social engineering. sqlmap - Automatic SQL injection and database takeover tool. Permissions Libraries that allow or deny users access to data or functionality.\ndjango-guardian - Implementation of per object permissions for Django 1.2+ django-rules - A tiny but powerful app providing object-level permissions to Django, without requiring a database. Processes Libraries for starting and communicating with OS processes.\ndelegator.py - Subprocesses for Humans 2.0. sarge - Yet another wrapper for subprocess. sh - A full-fledged subprocess replacement for Python. Recommender Systems Libraries for building recommender systems.\nannoy - Approximate Nearest Neighbors in C++/Python optimized for memory usage. fastFM - A library for Factorization Machines. implicit - A fast Python implementation of collaborative filtering for implicit datasets. libffm - A library for Field-aware Factorization Machine (FFM). lightfm - A Python implementation of a number of popular recommendation algorithms. spotlight - Deep recommender models using PyTorch. Surprise - A scikit for building and analyzing recommender systems. tensorrec - A Recommendation Engine Framework in TensorFlow. Refactoring Refactoring tools and libraries for Python\nBicycle Repair Man - Bicycle Repair Man, a refactoring tool for Python. Bowler - Safe code refactoring for modern Python. Rope - Rope is a python refactoring library. RESTful API Libraries for building RESTful APIs.\nDjango django-rest-framework - A powerful and flexible toolkit to build web APIs. django-tastypie - Creating delicious APIs for Django apps. Flask eve - REST API framework powered by Flask, MongoDB and good intentions. flask-api - Browsable Web APIs for Flask. flask-restful - Quickly building REST APIs for Flask. Pyramid cornice - A RESTful framework for Pyramid. Framework agnostic falcon - A high-performance framework for building cloud APIs and web app backends. fastapi - A modern, fast, web framework for building APIs with Python 3.6+ based on standard Python type hints. hug - A Python 3 framework for cleanly exposing APIs. sandman2 - Automated REST APIs for existing database-driven systems. sanic - A Python 3.6+ web server and web framework that\u0026rsquo;s written to go fast. Robotics Libraries for robotics.\nPythonRobotics - This is a compilation of various robotics algorithms with visualizations. rospy - This is a library for ROS (Robot Operating System). RPC Servers RPC-compatible servers.\nRPyC (Remote Python Call) - A transparent and symmetric RPC library for Python zeroRPC - zerorpc is a flexible RPC implementation based on ZeroMQ and MessagePack. Science Libraries for scientific computing. Also see Python-for-Scientists.\nastropy - A community Python library for Astronomy. bcbio-nextgen - Providing best-practice pipelines for fully automated high throughput sequencing analysis. bccb - Collection of useful code related to biological analysis. Biopython - Biopython is a set of freely available tools for biological computation. cclib - A library for parsing and interpreting the results of computational chemistry packages. Colour - Implementing a comprehensive number of colour theory transformations and algorithms. Karate Club - Unsupervised machine learning toolbox for graph structured data. NetworkX - A high-productivity software for complex networks. NIPY - A collection of neuroimaging toolkits. NumPy - A fundamental package for scientific computing with Python. ObsPy - A Python toolbox for seismology. Open Babel - A chemical toolbox designed to speak the many languages of chemical data. PyDy - Short for Python Dynamics, used to assist with workflow in the modeling of dynamic motion. PyMC - Markov Chain Monte Carlo sampling toolkit. QuTiP - Quantum Toolbox in Python. RDKit - Cheminformatics and Machine Learning Software. SciPy - A Python-based ecosystem of open-source software for mathematics, science, and engineering. SimPy - A process-based discrete-event simulation framework. statsmodels - Statistical modeling and econometrics in Python. SymPy - A Python library for symbolic mathematics. Zipline - A Pythonic algorithmic trading library. Search Libraries and software for indexing and performing search queries on data.\ndjango-haystack - Modular search for Django. elasticsearch-dsl-py - The official high-level Python client for Elasticsearch. elasticsearch-py - The official low-level Python client for Elasticsearch. pysolr - A lightweight Python wrapper for Apache Solr. whoosh - A fast, pure Python search engine library. Serialization Libraries for serializing complex data types\nmarshmallow - A lightweight library for converting complex objects to and from simple Python datatypes. pysimdjson - A Python bindings for simdjson. python-rapidjson - A Python wrapper around RapidJSON. ultrajson - A fast JSON decoder and encoder written in C with Python bindings. Serverless Frameworks Frameworks for developing serverless Python code.\npython-lambda - A toolkit for developing and deploying Python code in AWS Lambda. Zappa - A tool for deploying WSGI applications on AWS Lambda and API Gateway. Shell Shells based on Python.\nxonsh - A Python-powered, cross-platform, Unix-gazing shell language and command prompt. Specific Formats Processing Libraries for parsing and manipulating specific text formats.\nGeneral tablib - A module for Tabular Datasets in XLS, CSV, JSON, YAML. Office docxtpl - Editing a docx document by jinja2 template openpyxl - A library for reading and writing Excel 2010 xlsx/xlsm/xltx/xltm files. pyexcel - Providing one API for reading, manipulating and writing csv, ods, xls, xlsx and xlsm files. python-docx - Reads, queries and modifies Microsoft Word 2007/2008 docx files. python-pptx - Python library for creating and updating PowerPoint (.pptx) files. unoconv - Convert between any document format supported by LibreOffice/OpenOffice. XlsxWriter - A Python module for creating Excel .xlsx files. xlwings - A BSD-licensed library that makes it easy to call Python from Excel and vice versa. xlwt / xlrd - Writing and reading data and formatting information from Excel files. PDF PDFMiner - A tool for extracting information from PDF documents. PyPDF2 - A library capable of splitting, merging and transforming PDF pages. ReportLab - Allowing Rapid creation of rich PDF documents. Markdown Mistune - Fastest and full featured pure Python parsers of Markdown. Python-Markdown - A Python implementation of John Gruber’s Markdown. YAML PyYAML - YAML implementations for Python. CSV csvkit - Utilities for converting to and working with CSV. Archive unp - A command line tool that can unpack archives easily. Static Site Generator Static site generator is a software that takes some text + templates as input and produces HTML files on the output.\nlektor - An easy to use static CMS and blog engine. mkdocs - Markdown friendly documentation generator. makesite - Simple, lightweight, and magic-free static site/blog generator (\u0026lt; 130 lines). nikola - A static website and blog generator. pelican - Static site generator that supports Markdown and reST syntax. Tagging Libraries for tagging items.\ndjango-taggit - Simple tagging for Django. Task Queues Libraries for working with task queues.\ncelery - An asynchronous task queue/job queue based on distributed message passing. dramatiq - A fast and reliable background task processing library for Python 3. huey - Little multi-threaded task queue. mrq - A distributed worker task queue in Python using Redis \u0026amp; gevent. rq - Simple job queues for Python. Template Engine Libraries and tools for templating and lexing.\nGenshi - Python templating toolkit for generation of web-aware output. Jinja2 - A modern and designer friendly templating language. Mako - Hyperfast and lightweight templating for the Python platform. Testing Libraries for testing codebases and generating test data.\nTesting Frameworks hypothesis - Hypothesis is an advanced Quickcheck style property based testing library. nose2 - The successor to nose, based on `unittest2. pytest - A mature full-featured Python testing tool. Robot Framework - A generic test automation framework. unittest - (Python standard library) Unit testing framework. Test Runners green - A clean, colorful test runner. mamba - The definitive testing tool for Python. Born under the banner of BDD. tox - Auto builds and tests distributions in multiple Python versions GUI / Web Testing locust - Scalable user load testing tool written in Python. PyAutoGUI - PyAutoGUI is a cross-platform GUI automation Python module for human beings. Schemathesis - A tool for automatic property-based testing of web applications built with Open API / Swagger specifications. Selenium - Python bindings for Selenium WebDriver. sixpack - A language-agnostic A/B Testing framework. splinter - Open source tool for testing web applications. Mock doublex - Powerful test doubles framework for Python. freezegun - Travel through time by mocking the datetime module. httmock - A mocking library for requests for Python 2.6+ and 3.2+. httpretty - HTTP request mock tool for Python. mock - (Python standard library) A mocking and patching library. mocket - A socket mock framework with gevent/asyncio/SSL support. responses - A utility library for mocking out the requests Python library. VCR.py - Record and replay HTTP interactions on your tests. Object Factories factory_boy - A test fixtures replacement for Python. mixer - Another fixtures replacement. Supports Django, Flask, SQLAlchemy, Peewee and etc. model_mommy - Creating random fixtures for testing in Django. Code Coverage coverage - Code coverage measurement. Fake Data fake2db - Fake database generator. faker - A Python package that generates fake data. mimesis - is a Python library that help you generate fake data. radar - Generate random datetime / time. Text Processing Libraries for parsing and manipulating plain texts.\nGeneral chardet - Python 2/3 compatible character encoding detector. difflib - (Python standard library) Helpers for computing deltas. ftfy - Makes Unicode text less broken and more consistent automagically. fuzzywuzzy - Fuzzy String Matching. Levenshtein - Fast computation of Levenshtein distance and string similarity. pangu.py - Paranoid text spacing. pyfiglet - An implementation of figlet written in Python. pypinyin - Convert Chinese hanzi (漢字) to pinyin (拼音). textdistance - Compute distance between sequences with 30+ algorithms. unidecode - ASCII transliterations of Unicode text. Slugify awesome-slugify - A Python slugify library that can preserve unicode. python-slugify - A Python slugify library that translates unicode to ASCII. unicode-slugify - A slugifier that generates unicode slugs with Django as a dependency. Unique identifiers hashids - Implementation of hashids in Python. shortuuid - A generator library for concise, unambiguous and URL-safe UUIDs. Parser ply - Implementation of lex and yacc parsing tools for Python. pygments - A generic syntax highlighter. pyparsing - A general purpose framework for generating parsers. python-nameparser - Parsing human names into their individual components. python-phonenumbers - Parsing, formatting, storing and validating international phone numbers. python-user-agents - Browser user agent parser. sqlparse - A non-validating SQL parser. Third-party APIs Libraries for accessing third party services APIs. Also see List of Python API Wrappers and Libraries.\napache-libcloud - One Python library for all clouds. boto3 - Python interface to Amazon Web Services. django-wordpress - WordPress models and views for Django. facebook-sdk - Facebook Platform Python SDK. google-api-python-client - Google APIs Client Library for Python. gspread - Google Spreadsheets Python API. twython - A Python wrapper for the Twitter API. URL Manipulation Libraries for parsing URLs.\nfurl - A small Python library that makes parsing and manipulating URLs easy. purl - A simple, immutable URL class with a clean API for interrogation and manipulation. pyshorteners - A pure Python URL shortening lib. webargs - A friendly library for parsing HTTP request arguments with built-in support for popular web frameworks. Video Libraries for manipulating video and GIFs.\nmoviepy - A module for script-based movie editing with many formats, including animated GIFs. scikit-video - Video processing routines for SciPy. vidgear - Most Powerful multi-threaded Video Processing framework. Web Asset Management Tools for managing, compressing and minifying website assets.\ndjango-compressor - Compresses linked and inline JavaScript or CSS into a single cached file. django-pipeline - An asset packaging library for Django. django-storages - A collection of custom storage back ends for Django. fanstatic - Packages, optimizes, and serves static file dependencies as Python packages. fileconveyor - A daemon to detect and sync files to CDNs, S3 and FTP. flask-assets - Helps you integrate webassets into your Flask app. webassets - Bundles, optimizes, and manages unique cache-busting URLs for static resources. Web Content Extracting Libraries for extracting web contents.\nhtml2text - Convert HTML to Markdown-formatted text. lassie - Web Content Retrieval for Humans. micawber - A small library for extracting rich content from URLs. newspaper - News extraction, article extraction and content curation in Python. python-readability - Fast Python port of arc90\u0026rsquo;s readability tool. requests-html - Pythonic HTML Parsing for Humans. sumy - A module for automatic summarization of text documents and HTML pages. textract - Extract text from any document, Word, PowerPoint, PDFs, etc. toapi - Every web site provides APIs. Web Crawling Libraries to automate web scraping.\nfeedparser - Universal feed parser. grab - Site scraping framework. mechanicalsoup - A Python library for automating interaction with websites. scrapy - A fast high-level screen scraping and web crawling framework. Web Frameworks Traditional full stack web frameworks. Also see RESTful API.\nSynchronous django - The most popular web framework in Python. awesome-django awesome-django flask - A microframework for Python. awesome-flask pyramid - A small, fast, down-to-earth, open source Python web framework. awesome-pyramid masonite - The modern and developer centric Python web framework. Asynchronous tornado - A web framework and asynchronous networking library. WebSocket Libraries for working with WebSocket.\nautobahn-python - WebSocket \u0026amp; WAMP for Python on Twisted and asyncio. channels - Developer-friendly asynchrony for Django. websockets - A library for building WebSocket servers and clients with a focus on correctness and simplicity. WSGI Servers WSGI-compatible web servers.\ngunicorn - Pre-forked, ported from Ruby\u0026rsquo;s Unicorn project. uwsgi - A project aims at developing a full stack for building hosting services, written in C. waitress - Multi-threaded, powers Pyramid. werkzeug - A WSGI utility library for Python that powers Flask and can easily be embedded into your own projects. Resources Where to discover learning resources or new Python libraries.\nNewsletters Awesome Python Newsletter Pycoder\u0026rsquo;s Weekly Python Tricks Python Weekly Podcasts Django Chat Python Bytes Talk Python To Me Python Test The Real Python Podcast Contributing Your contributions are always welcome! Please take a look at the contribution guidelines first.\nIf you have any question about this opinionated list, do not hesitate to contact me @VintaChen on Twitter or open an issue on GitHub.\n","permalink":"http://localhost:1313/docs/awesome-python/","summary":"\u003cp\u003e本文转载自 \u003ca href=\"https://github.com/vinta/awesome-python/\"\u003eAwesome Python\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003eAn opinionated list of awesome Python frameworks, libraries, software and resources.\u003c/p\u003e\n\u003cp\u003eInspired by \u003ca href=\"https://github.com/ziadoz/awesome-php\"\u003eawesome-php\u003c/a\u003e.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#awesome-python\"\u003eAwesome Python\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#admin-panels\"\u003eAdmin Panels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#algorithms-and-design-patterns\"\u003eAlgorithms and Design Patterns\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asgi-servers\"\u003eASGI Servers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asynchronous-programming\"\u003eAsynchronous Programming\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#audio\"\u003eAudio\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#authentication\"\u003eAuthentication\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#build-tools\"\u003eBuild Tools\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#built-in-classes-enhancement\"\u003eBuilt-in Classes Enhancement\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#caching\"\u003eCaching\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#chatops-tools\"\u003eChatOps Tools\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#cms\"\u003eCMS\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#code-analysis\"\u003eCode Analysis\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#command-line-interface-development\"\u003eCommand-line Interface Development\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#command-line-tools\"\u003eCommand-line Tools\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#computer-vision\"\u003eComputer Vision\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#configuration-files\"\u003eConfiguration Files\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#cryptography\"\u003eCryptography\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#data-analysis\"\u003eData Analysis\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#data-validation\"\u003eData Validation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#data-visualization\"\u003eData Visualization\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#database-drivers\"\u003eDatabase Drivers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#database\"\u003eDatabase\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#date-and-time\"\u003eDate and Time\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#debugging-tools\"\u003eDebugging Tools\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#deep-learning\"\u003eDeep Learning\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#devops-tools\"\u003eDevOps Tools\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#distributed-computing\"\u003eDistributed Computing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#distribution\"\u003eDistribution\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#documentation\"\u003eDocumentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#downloader\"\u003eDownloader\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#editor-plugins-and-ides\"\u003eEditor Plugins and IDEs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#email\"\u003eEmail\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#environment-management\"\u003eEnvironment Management\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#file-manipulation\"\u003eFile Manipulation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#functional-programming\"\u003eFunctional Programming\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#game-development\"\u003eGame Development\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#geolocation\"\u003eGeolocation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#gui-development\"\u003eGUI Development\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#hardware\"\u003eHardware\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#html-manipulation\"\u003eHTML Manipulation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#http-clients\"\u003eHTTP Clients\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#image-processing\"\u003eImage Processing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#implementations\"\u003eImplementations\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#interactive-interpreter\"\u003eInteractive Interpreter\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#internationalization\"\u003eInternationalization\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#job-scheduler\"\u003eJob Scheduler\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#logging\"\u003eLogging\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#machine-learning\"\u003eMachine Learning\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#miscellaneous\"\u003eMiscellaneous\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#natural-language-processing\"\u003eNatural Language Processing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#network-virtualization\"\u003eNetwork Virtualization\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#news-feed\"\u003eNews Feed\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#orm\"\u003eORM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#package-management\"\u003ePackage Management\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#package-repositories\"\u003ePackage Repositories\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#penetration-testing\"\u003ePenetration testing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#permissions\"\u003ePermissions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#processes\"\u003eProcesses\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#recommender-systems\"\u003eRecommender Systems\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#refactoring\"\u003eRefactoring\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#restful-api\"\u003eRESTful API\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#robotics\"\u003eRobotics\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#rpc-servers\"\u003eRPC Servers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#science\"\u003eScience\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#search\"\u003eSearch\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#serialization\"\u003eSerialization\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#serverless-frameworks\"\u003eServerless Frameworks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#shell\"\u003eShell\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#specific-formats-processing\"\u003eSpecific Formats Processing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#static-site-generator\"\u003eStatic Site Generator\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#tagging\"\u003eTagging\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#task-queues\"\u003eTask Queues\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#template-engine\"\u003eTemplate Engine\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#testing\"\u003eTesting\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#text-processing\"\u003eText Processing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#third-party-apis\"\u003eThird-party APIs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#url-manipulation\"\u003eURL Manipulation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#video\"\u003eVideo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#web-asset-management\"\u003eWeb Asset Management\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#web-content-extracting\"\u003eWeb Content Extracting\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#web-crawling\"\u003eWeb Crawling\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#web-frameworks\"\u003eWeb Frameworks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#websocket\"\u003eWebSocket\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wsgi-servers\"\u003eWSGI Servers\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#resources\"\u003eResources\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#newsletters\"\u003eNewsletters\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#podcasts\"\u003ePodcasts\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#contributing\"\u003eContributing\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"admin-panels\"\u003eAdmin Panels\u003c/h2\u003e\n\u003cp\u003e\u003cem\u003eLibraries for administrative interfaces.\u003c/em\u003e\u003c/p\u003e","title":"Awesome Python*"},{"content":"本文转载自 每位 JS 开发应该懂的 33 个概念（中文版），其英文原版为 leonardomso/33-js-concepts。\n简介 这个项目是为了帮助开发者掌握 JavaScript 概念而创立的。它不是必备，但在未来学习（JavaScript）中，可以作为一篇指南。\n本篇文章是参照 @leonardomso 创立，英文版项目地址在这里。 由于原版资源都要翻墙，所以本人创立一个中文版，附上关于这些概念在国内的一些文章和视频。 若有觉得更好的文章或者视频，可以贡献出来，觉得有误的，请联系我删除。\n更新 若有觉得更好的文章或者视频，可以贡献出来，觉得有误的，请联系我删除。\n文章的排序优化，前面的文章是介绍概念，后面的文章是深入解读。 将原文的 \u0026ldquo;高阶函数\u0026rdquo; 和 \u0026ldquo;map, reduce, filter\u0026rdquo; 合并为 \u0026ldquo;map, reduce, filter 等高阶函数\u0026rdquo; 增加 \u0026ldquo;promise\u0026rdquo; 概念(替换删除的 \u0026ldquo;高阶函数\u0026rdquo;) 2018-10-24 更新：@BuptStEve 贡献的三篇关于\u0026quot; 函数式编程 \u0026ldquo;方面的文章 2018-12-04 更新：@haner199401 贡献的 @冴羽 \u0026ldquo;JavaScript 深入之从原型到原型链\u0026rdquo; 目录 调用堆栈 原始类型 值类型和引用类型 隐式, 显式, 名义和鸭子类型 == 与 ===, typeof 与 instanceof this, call, apply 和 bind 函数作用域, 块级作用域和词法作用域 闭包 map, reduce, filter 等高阶函数 表达式和语句 变量提升 Promise 立即执行函数, 模块化, 命名空间 递归 算法 数据结构 消息队列和事件循环 setTimeout, setInterval 和 requestAnimationFrame 继承, 多态和代码复用 按位操作符, 类数组对象和类型化数组 DOM 树和渲染过程 new 与构造函数, instanceof 与实例 原型继承与原型链 Object.create 和 Object.assign 工厂函数和类 设计模式 Memoization 纯函数, 函数副作用和状态变化 耗性能操作和时间复杂度 JavaScript 引擎 二进制, 十进制, 十六进制, 科学记数法 偏函数, 柯里化, Compose 和 Pipe 代码整洁之道 1. 调用堆栈 文章 \u0026#x1f4d6; Call Stack — MDN \u0026#x1f4d6; [译] JavaScript 如何工作：对引擎、运行时、调用堆栈的概述 —— 掘金 \u0026#x1f4d6; [译] 理解 JavaScript 中的执行上下文和执行栈 —— 掘金 \u0026#x1f4d6; 这一次，彻底弄懂 JavaScript 执行机制 —— 掘金 \u0026#x1f4d6; 解读 JavaScript 之引擎、运行时和堆栈调用 —— 开源中国 \u0026#x1f4d6; Tasks, microtasks, queues and schedules —— Jake Archibald \u0026#x1f4d6; Tasks, microtasks, queues and schedules（译） —— 掘金 视频 \u0026#x1f4fa; What is the event loop anyway? —— 腾讯视频(英文字幕) \u0026#x1f4fa; Understanding The JavaScript Call Stack, Event Queue, Event Table, \u0026amp; Event Loop —— Bilibili \u0026#x1f4fa; JS 中的变量提升、堆栈内存及闭包详解 —— Acfun \u0026#x1f4fa; 事件循环模型 —— PHP 中文网 \u0026#x1f4fa; Javascript: the Call Stack explained — Coding Blocks India \u0026#x1f4fa; The JS Call Stack Explained In 9 Minutes — Colt Steele \u0026#x1f4fa; JavaScript Execution Stack — Codecademy \u0026#x1f4fa; What is the Call Stack? — Eric Traub \u0026#x1f4fa; The Call Stack — Kevin Drumm \u0026#x1f4fa; Understanding JavaScript Execution — Codesmith \u0026#x1f4fa; Call Stack \u0026amp; Event Loop — movies com \u0026#x2b06;\u0026#xfe0f; 返回目录\n2. 原始类型 文章 \u0026#x1f4d6; 原始数据 —— MDN \u0026#x1f4d6; [译]JavaScript 是怎样编码数字的 —— SegmentFault \u0026#x1f4d6; 每一个 JavaScript 开发者应该了解的浮点知识 —— 颜海镜 \u0026#x1f4d6; JavaScript 标准参考教程(基本语法之数值) —— 阮一峰 \u0026#x1f4d6; The Secret Life of JavaScript Primitives —— Angus Croll 视频 \u0026#x1f4fa; javascript 六种数据类型 —— 慕课网 \u0026#x1f4fa; javascript 视频教程(数据类型) —— PHP 中文网 \u0026#x1f4fa; JavaScript Reference vs Primitive Types — Academind \u0026#x1f4fa; JavaScript Primitive Types — Simon Sez IT \u0026#x1f4fa; Javascript Primitive and Reference Types — Baljeet Singh \u0026#x1f4fa; Value Types and Reference Types in JavaScript — Programming with Mosh \u0026#x1f4fa; JavaScript Primitive Data Types — Avelx \u0026#x1f4fa; Everything you never wanted to know about JavaScript numbers — Bartek Szopka \u0026#x2b06;\u0026#xfe0f; 返回目录\n3. 值类型和引用类型 文章 \u0026#x1f4d6; ECMAScript 引用类型 —— W3school \u0026#x1f4d6; js 中的值类型和引用类型的区别 —— 博客园 \u0026#x1f4d6; JavaScript 的值传递和引用传递 —— FunDebug \u0026#x1f4d6; Primitive Types \u0026amp; Reference Types in JavaScript —— Bran van der Meer \u0026#x1f4d6; JavaScript: Passing by Value or by Reference —— CSDN \u0026#x1f4d6; js 值引用和值复制 —— SegmentFault \u0026#x1f4d6; js- 引用和复制(传值和传址) —— CSDN 视频 \u0026#x1f4fa; Javascript Pass by Value vs Pass by Reference — techsith \u0026#x1f4fa; JavaScript Value vs Reference Types — Programming with Mosh \u0026#x2b06;\u0026#xfe0f; 返回目录\n4. 隐式, 显式, 名义和鸭子类型 文章 \u0026#x1f4d6; ECMAScript 类型转换 —— W3school \u0026#x1f4d6; JavaScript 的怪癖 1：隐式类型转换 —— justjavac \u0026#x1f4d6; JavaScript 运算符规则与隐式类型转换详解 —— 掘金 \u0026#x1f4d6; 聊一聊 JS 中的隐式类型转换 —— SegmentFault \u0026#x1f4d6; 有趣的 JavaScript 隐式类型转换 —— 博客园 \u0026#x1f4d6; JavaScript 显式类型转换与隐式类型转换 —— CSDN \u0026#x1f4d6; 你不知道的 JavaScript（中卷）强制类型转换 —— 简书 \u0026#x1f4d6; 你懂 JavaScript 嗎？#8 強制轉型 —— cythilya \u0026#x1f4d6; 动态类型语言和鸭子类型 —— 曾探 \u0026#x1f4d6; Nominal \u0026amp; Structural Typing —— flow \u0026#x1f4d6; What exactly is Type Coercion in Javascript? —— stackoverflow \u0026#x1f4d6; You Don\u0026rsquo;t Know JS: Types \u0026amp; Grammar —— github 视频 \u0026#x1f4fa; javascript 隐式转换 —— 慕课网 \u0026#x1f4fa; Javascript 基础加强-类型转换 —— 黑马程序员 \u0026#x2b06;\u0026#xfe0f; 返回目录\n5. == vs ===, typeof vs instanceof 文章 \u0026#x1f4d6; JavaScript 中的相等性判断 —— MDN \u0026#x1f4d6; js 中 == 和 === 的区别 —— 掘金 \u0026#x1f4d6; == vs === in Javascript —— CSDN \u0026#x1f4d6; 深入理解 javascript 之 typeof 和 instanceof —— CSDN \u0026#x1f4d6; JavaScript 的 typeof 的用途 —— justjavac \u0026#x1f4d6; 一张图看懂 Function 和 Object 的关系及简述 instanceof 运算符 —— 掘金 \u0026#x1f4d6; 浅谈 instanceof 和 typeof 的实现原理 —— 掘金 \u0026#x1f4d6; typeof 和 instanceOf 的区别 \u0026#x2b06;\u0026#xfe0f; 返回目录\n6. this, call, apply 和 bind 文章 \u0026#x1f4d6; Javascript 的 this 用法 —— 阮一峰 \u0026#x1f4d6; 学会 JS 的 this 这一篇就够了，根本不用记 —— 慕课网 \u0026#x1f4d6; [译] this（他喵的）到底是什么 — 理解 JavaScript 中的 this、call、apply 和 bind —— 掘金 \u0026#x1f4d6; this、apply、call、bind —— 掘金 \u0026#x1f4d6; 使用 call、apply 和 bind 解决 js 中烦人的 this，事件绑定时的 this 和传参问题 —— 博客园 \u0026#x1f4d6; call、apply 和 bind 的原生实现 —— github 视频 \u0026#x1f4fa; JavaScript 关于 this 关键字解释 —— 爱奇艺 \u0026#x1f4fa; JS 关于作用域闭包和 this 的综合面试题 —— 百度视频 \u0026#x1f4fa; js 面向对象闭包数组 12.函数中的 this —— 乐视视频 \u0026#x1f4fa; 1.3.10-this 指向及 this 应用 —— 乐视视频 \u0026#x1f4fa; 珠峰培训 JavaScript 开发课程：关于 this 关键字、闭包作用域 —— 网易云课堂 \u0026#x2b06;\u0026#xfe0f; 返回目录\n7. 函数作用域, 块级作用域和词法作用域 文章 \u0026#x1f4d6; 变量作用域与解构赋值 —— 廖雪峰 \u0026#x1f4d6; 学习 Javascript 闭包（Closure） —— 阮一峰 \u0026#x1f4d6; JavaScript 中词法作用域、闭包与跳出闭包 —— SegmentFault \u0026#x1f4d6; JavaScript 深入之词法作用域和动态作用域 —— 掘金 \u0026#x1f4d6; 深入理解闭包之前置知识 → 作用域与词法作用域 —— 掘金 \u0026#x1f4d6; What is lexical scope? —— stackoverflow \u0026#x1f4d6; You Don\u0026rsquo;t Know JS: Scope \u0026amp; Closures —— Kyle Simpson \u0026#x2b06;\u0026#xfe0f; 返回目录\n8. 闭包 文章 \u0026#x1f4d6; 闭包 —— MDN \u0026#x1f4d6; ECMAScript 闭包（closure）—— w3school \u0026#x1f4d6; 学习 Javascript 闭包（Closure） —— 阮一峰 \u0026#x1f4d6; 闭包 —— 廖雪峰 \u0026#x1f4d6; 一次性搞懂 JavaScript 闭包 —— 简书 \u0026#x1f4d6; JavaScript 闭包 —— SegmentFault \u0026#x1f4d6; js 匿名自执行函数中闭包的高级使用 —— 掘金 \u0026#x1f4d6; 高效使用 JavaScript 闭包 —— 掘金 \u0026#x1f4d6; 深入理解 JavaScript 原型与闭包 —— 王福朋 视频 \u0026#x1f4fa; JavaScript 闭包和闭包面试题 —— 爱奇艺 \u0026#x1f4fa; js 面向对象闭包数组 11.闭包 —— 乐视 \u0026#x1f4fa; 白贺翔_函数(闭包) —— 乐视 \u0026#x2b06;\u0026#xfe0f; 返回目录\n9. map, reduce, filter 等高阶函数 文章 \u0026#x1f4d6; 高阶函数 —— 廖雪峰 \u0026#x1f4d6; ES5 中新增的 Array 方法详细说明 —— 张鑫旭 \u0026#x1f4d6; 一张图看懂 JavaScript 中数组的迭代方法：forEach、map、filter、reduce、every、some —— 掘金 \u0026#x1f4d6; Transducing（上）－《JavaScript 轻量级函数式编程》 —— SegmentFault \u0026#x1f4d6; JavaScript 函数式编程（三） —— @BuptStEve \u0026#x2b06;\u0026#xfe0f; 返回目录\n10. 表达式和语句 文章 \u0026#x1f4d6; js 表达式与语句 —— 博客园 \u0026#x1f4d6; JS 表达式和语句的区别 —— SegmentFault \u0026#x1f4d6; JavaScript 中的表达式（expression）和语句/声明（statement） —— CSDN \u0026#x1f4d6; 重讀 Axel 的 Javascript 中的 Expression vs Statement 一文 —— SegmentFault \u0026#x1f4d6; Expressions versus statements in JavaScript —— Dr. Axel \u0026#x2b06;\u0026#xfe0f; 返回目录\n11. 变量提升 文章 \u0026#x1f4d6; JavaScript 变量提升 —— 菜鸟教程 \u0026#x1f4d6; ES6 变量作用域与提升：变量的生命周期详解 —— 掘金 \u0026#x1f4d6; [翻译] JavaScript Scoping and Hoisting —— SegmentFault \u0026#x1f4d6; JavaScript Scoping and Hoisting —— Ben Cherry \u0026#x2b06;\u0026#xfe0f; 返回目录\n12. Promise 文章 \u0026#x1f4d6; 使用 promises —— MDN \u0026#x1f4d6; Promise —— MDN \u0026#x1f4d6; Promise — 廖雪峰 \u0026#x1f4d6; JavaScript Promise：去而复返 —— 司徒正美 \u0026#x1f4d6; (上面的原文)JavaScript Promise：简介 —— Web Fundamentals \u0026#x1f4d6; 1 分钟读完《10 分钟学会 JavaScript 的 Async/Await》 —— justjavac \u0026#x1f4d6; JavaScript Promise 迷你书（中文版） \u0026#x1f4d6; JavaScript 进阶之路——认识和使用 Promise，重构你的 Js 代码 —— 博客园 视频 \u0026#x1f4fa; Promise 入门 —— 慕课网 \u0026#x2b06;\u0026#xfe0f; 返回目录\n13. 立即执行函数, 模块化, 命名空间 文章 \u0026#x1f4d6; Javascript 模块化编程（一）：模块的写法 —— 阮一峰 \u0026#x1f4d6; javascript 模块化编程-详解立即执行函数表达式 —— 简书 \u0026#x1f4d6; Javascript 的匿名函数与自执行 —— 掘金 \u0026#x1f4d6; 前端模块化——技术选型 —— SegmentFault \u0026#x1f4d6; 谈谈 Js 前端模块化规范 —— SegmentFault \u0026#x1f4d6; 函数声明与函数表达式的区别 —— 伯乐在线 \u0026#x2b06;\u0026#xfe0f; 返回目录\n14. 递归 文章 \u0026#x1f4d6; 求解释 js 递归 —— SegmentFault \u0026#x1f4d6; JavaScript 中的递归 —— 掘金 \u0026#x1f4d6; 递归（上）－《JavaScript 轻量级函数式编程》 —— 掘金 \u0026#x1f4d6; 递归（下）－《JavaScript 轻量级函数式编程》 —— 掘金 \u0026#x1f4d6; 尾调用和尾递归 —— 掘金 \u0026#x1f4d6; 几个经典递归问题用 js 实现 —— CSDN \u0026#x1f4d6; 递归函数的几个例子 —— CSDN \u0026#x2b06;\u0026#xfe0f; 返回目录\n15. 算法 文章 \u0026#x1f4d6; 十大经典排序算法总结（JavaScript 描述） —— 掘金 \u0026#x1f4d6; 在 JavaScript 中学习数据结构与算法 —— 掘金 \u0026#x1f4d6; JS 中可能用得到的全部的排序算法 —— 掘金 \u0026#x1f4d6; JS 家的排序算法 —— 简书 \u0026#x1f4d6; 前端常见算法的 JS 实现 —— SegmentFault \u0026#x1f4d6; 前端面试中的常见的算法问题 ——蒲小花的博客 视频 \u0026#x1f4fa; Javascript 实现二叉树算法 —— 慕课网 \u0026#x2b06;\u0026#xfe0f; 返回目录\n16. 数据结构 文章 \u0026#x1f4d6; 来我们浅谈一下 js 的数据结构 —— 简书 \u0026#x1f4d6; JavaScript 中的算法与数据结构 —— 简书 \u0026#x1f4d6; 学 JS 必看-JavaScript 数据结构深度剖析 —— 大道至简的博客 \u0026#x1f4d6; js 中基础数据结构数组去重问题 —— 掘金 视频 \u0026#x1f4fa; \u0026#x1f4fa; JavaScript 数据结构-运算符 —— 乐视 \u0026#x2b06;\u0026#xfe0f; 返回目录\n17. 消息队列和事件循环 文章 \u0026#x1f4d6; 并发模型与事件循环 —— MDN \u0026#x1f4d6; JavaScript 运行机制详解：再谈 Event Loop —— 阮一峰 \u0026#x1f4d6; 深入理解 JavaScript 事件循环 —— 博客园 \u0026#x1f4d6; 深入浅出 Javascript 事件循环机制 —— 知乎 \u0026#x1f4d6; JS 事件循环机制（event loop）之宏任务、微任务 —— SegmentFault \u0026#x1f4d6; JavaScript：彻底理解同步、异步和事件循环 —— SegmentFault \u0026#x1f4d6; 从浏览器多进程到 JS 单线程，JS 运行机制最全面的一次梳理 —— 掘金 \u0026#x2b06;\u0026#xfe0f; 返回目录\n18. setTimeout, setInterval 和 requestAnimationFrame 文章 \u0026#x1f4d6; Window setTimeout() 方法 —— 菜鸟教程 \u0026#x1f4d6; Window setInterval() 方法 —— 菜鸟教程 \u0026#x1f4d6; 关于 setTimeout —— 掘金 \u0026#x1f4d6; 你不知道的 Javascript：有趣的 setTimeout —— 掘金 \u0026#x1f4d6; 原来你是这样的 setTimeout —— 掘金 \u0026#x1f4d6; setTimeout() 和 setInterval() 本质区别在哪里？ —— SegmentFault book: window.requestAnimationFrame —— MDN \u0026#x1f4d6; requestAnimationFrame 知多少？ —— 博客园 \u0026#x1f4d6; CSS3 动画那么强，requestAnimationFrame 还有毛线用？ —— 张鑫旭 \u0026#x1f4d6; 「JavaScript 定时器」setInterval、setTimeout 和 requestAnimationFrame 浅析 —— SegmentFault \u0026#x1f4d6; 翻译：setInterval 与 requestAnimationFrame 的时间间隔测试 —— SegmentFault \u0026#x1f4d6; 阿里前端面试题：requestAnimationFrame 实现类似 setInterval 的计时器 —— SegmentFault 视频 \u0026#x1f4fa; setTimeout 和 setInterval —— 优酷 \u0026#x2b06;\u0026#xfe0f; 返回目录\n19. 继承, 多态和代码复用 文章 \u0026#x1f4d6; JS 面向对象编程之：封装、继承、多态 —— 博客园 \u0026#x1f4d6; Javascript 的继承与多态 —— 简书 \u0026#x1f4d6; js:面向对象编程，带你认识封装、继承和多态 —— 掘金 \u0026#x1f4d6; JavaScript 中的“多继承” —— 掘金 \u0026#x1f4d6; 代码复用模式 —— github \u0026#x1f4d6; 深入理解 JavaScript：代码复用模式(推荐篇) —— 汤姆大叔 \u0026#x1f4d6; 深入理解 JavaScript：代码复用模式(避免篇) —— 汤姆大叔 \u0026#x2b06;\u0026#xfe0f; 返回目录\n20. 按位操作符, 类数组对象和类型化数组 文章 \u0026#x1f4d6; 按位操作符 —— MDN \u0026#x1f4d6; 类数组对象 —— MDN \u0026#x1f4d6; 类型化数组 —— MDN \u0026#x1f4d6; JavaScript ArrayBuffer 浅析 —— 博客园 \u0026#x2b06;\u0026#xfe0f; 返回目录\n21. DOM 树和渲染过程 文章 \u0026#x1f4d6; 如何创建一个 DOM 树 —— MDN \u0026#x1f4d6; HTML DOM 节点 —— W3school \u0026#x1f4d6; DOM 概述 —— 阮一峰 \u0026#x1f4d6; 《JavaScript 闯关记》之 DOM（上）—— 简书 \u0026#x1f4d6; 《JavaScript 闯关记》之 DOM（下）—— 简书 \u0026#x1f4d6; 掌握 DOM 操作 —— 掘金 \u0026#x1f4d6; 操作 DOM —— 廖雪峰 \u0026#x1f4d6; 原来 CSS 与 JS 是这样阻塞 DOM 解析和渲染的 —— 掘金 视频 \u0026#x1f4fa; DOM 探索之基础详解篇 —— 慕课网 \u0026#x1f4fa; DOM 事件探秘 —— 慕课网 \u0026#x1f4fa; jQuery 基础(二)DOM 篇 —— 慕课网 \u0026#x1f4fa; JS 操作 DOM 对象属性和方法 —— 爱奇艺 \u0026#x2b06;\u0026#xfe0f; 返回目录\n22. new 与构造函数, instanceof 与实例 文章 \u0026#x1f4d6; 构造函数与 new 命令 —— 阮一峰 \u0026#x1f4d6; Javascript 面向对象编程（二）：构造函数的继承 —— 阮一峰 \u0026#x1f4d6; 完整原型链详细图解(构造函数、原型、实例化对象) —— CSDN \u0026#x1f4d6; JavaScript 中构造函数与 new 操作符的实例详解 —— PHP 中文网 \u0026#x1f4d6; 构造函数、实例、原型、原型链之间的关系 —— CSDN \u0026#x1f4d6; 深入理解 JS—instanceof 和原型链 —— CSDN \u0026#x1f4d6; 前端基础进阶（九）：详解面向对象、构造函数、原型与原型链 —— 简书 \u0026#x1f4d6; js 用 new 实例化对象与直接调用的 this 的区别 —— 简书 \u0026#x1f4d6; JavaScript 并非所有的东西都是对象 —— justjavac \u0026#x1f4d6; JavaScript instanceof 运算符深入剖析 —— IBM 视频 \u0026#x1f4fa; 改良版的构造函数 —— 乐视 \u0026#x2b06;\u0026#xfe0f; 返回目录\n23. 原型继承与原型链 文章 \u0026#x1f4d6; 继承与原型链 —— MDN \u0026#x1f4d6; 构造函数、原型与原型链 —— github \u0026#x1f4d6; 原型及原型链 —— github(1269 Star) \u0026#x1f4d6; 理清 javascript 中的面向对象(一) 原型继承 —— SegmentFault \u0026#x1f4d6; JavaScript：继承和原型链(译) —— justjavac \u0026#x1f4d6; 三张图搞懂 JavaScript 的原型对象与原型链 —— 博客园 \u0026#x1f4d6; 一张图让你搞懂 JavaScript 的继承与原型链 —— CSDN \u0026#x1f4d6; JS 高级\u0026ndash;原型链(一看就懂，但 18 岁以下请绕道) —— CSDN \u0026#x1f4d6; 原型继承 —— 廖雪峰 \u0026#x1f4d6; JS 原型链与继承别再被问倒了 —— 掘金 \u0026#x1f4d6; 征服 JavaScript 面试系列：类继承和原型继承的区别 —— 掘金 \u0026#x1f4d6; JavaScript 深入之从原型到原型链 —— 冴羽 \u0026#x1f4d6; 深入理解 JavaScript 原型与闭包 —— 王福朋 视频 \u0026#x1f4fa; JS 高级-07-原型链继承 —— 乐视 \u0026#x1f4fa; JS 原型对象和原型链简介 —— 腾讯视频 \u0026#x2b06;\u0026#xfe0f; 返回目录\n24. Object.create 和 Object.assign 文章 \u0026#x1f4d6; Object.create —— MDN \u0026#x1f4d6; Object.assign —— MDN \u0026#x1f4d6; Object.create vs Object.assign —— 慕课网手记 \u0026#x1f4d6; JS 中的 Object.assign()、Object.create()、Object.defineProperty() —— CSDN \u0026#x1f4d6; Object-Assign-Deep —— github \u0026#x2b06;\u0026#xfe0f; 返回目录\n25. 工厂函数和类 文章 \u0026#x1f4d6; 类 —— MDN \u0026#x1f4d6; 类和实例 —— 廖雪峰 \u0026#x1f4d6; Javascript 定义类（class）的三种方法 —— 阮一峰 \u0026#x1f4d6; 【译】ES6 的工厂函数 —— 掘金 \u0026#x1f4d6; JavaScript 创建对象之单例、工厂、构造函数模式 —— 掘金 \u0026#x2b06;\u0026#xfe0f; 返回目录\n26. 设计模式 文章 \u0026#x1f4d6; JavaScript 设计模式 —— 掘金 \u0026#x1f4d6; 学用 JavaScript 设计模式 —— 极客学院 \u0026#x1f4d6; [面试专题]JS 设计模式 —— SegmentFault \u0026#x1f4d6; JavaScript Patterns 中译本 —— github 视频 \u0026#x1f4fa; HTML5 课程大纲 2-11JS 设计模式 \u0026#x2b06;\u0026#xfe0f; 返回目录\n27. Memoization 文章 \u0026#x1f4d6; JavaScript Memoization —— 司徒正美 \u0026#x1f4d6; memoization 提升递归效率 —— 博客园 \u0026#x1f4d6; 如何提升 JavaScript 的递归效率 —— 51CTO \u0026#x1f4d6; JavaScript 高级技巧 Memoization —— SegmentFaut \u0026#x2b06;\u0026#xfe0f; 返回目录\n28. 纯函数, 函数副作用和状态变化 文章 \u0026#x1f4d6; 纯函数(Pure Function) —— React.js 小书 \u0026#x1f4d6; JavaScript Functional Programming：纯函数 —— 宁皓网 \u0026#x1f4d6; js 函数的副作用分析 —— 脚本之家 \u0026#x1f4d6; 如何使用纯函数式 JavaScript 处理脏副作用 —— 掘金 \u0026#x1f4d6; 原生 JavaScript 实现 state 状态管理系统 —— 博客园 \u0026#x1f4d6; JavaScript 函数式编程 —— @BuptStEve \u0026#x2b06;\u0026#xfe0f; 返回目录\n29. 耗性能操作和时间复杂度 文章 \u0026#x1f4d6; 时间复杂度 O(log n) 意味着什么？ —— 掘金 \u0026#x1f4d6; 算法的时间复杂度和空间复杂度 —— 掘金 \u0026#x1f4d6; 算法（一）时间复杂度 —— 掘金 \u0026#x1f4d6; Big O Search Algorithms in JavaScript —— Bradley Braithwaite \u0026#x1f4d6; Time Complexity Analysis in JavaScript — Jennifer Bland \u0026#x2b06;\u0026#xfe0f; 返回目录\n30. JavaScript 引擎 文章 \u0026#x1f4d6; javascript 引擎 —— 百度百科 \u0026#x1f4d6; V8(JavaScript 引擎) —— 百度百科 \u0026#x1f4d6; 图解搞懂 JavaScript 引擎 Event Loop —— 掘金3 \u0026#x1f4d6; V8 JavaScript 引擎：高性能的 ES2015+ —— justjavac \u0026#x1f4d6; 10 分钟理解 JS 引擎的执行机制 —— SegmentFaut \u0026#x1f4d6; V8 javascript 引擎 —— 博客园 \u0026#x2b06;\u0026#xfe0f; 返回目录\n31. 二进制, 十六进制, 十进制, 科学记数法 文章 \u0026#x1f4d6; 二、八、十、十六进制转换(图解篇) —— 博客园 \u0026#x1f4d6; JavaScript 读写二进制数据 —— 掘金 视频 \u0026#x1f4fa; 二进制、十进制、十六进制互相转化很难吗？ —— 百度视频 \u0026#x2b06;\u0026#xfe0f; 返回目录\n32. 偏函数, 柯里化, Compose 和 Pipe 文章 \u0026#x1f4d6; Javascript 函数式编程之偏函数 —— CSDN \u0026#x1f4d6; JavaScript 专题之偏函数 —— SegmentFault \u0026#x1f4d6; 柯里化和偏函数有什么区别？ —— SegmentFault \u0026#x1f4d6; Javascript 偏函数与柯里化 —— CSDN \u0026#x1f4d6; 柯里化(curry) —— JS 函数式编程指南 \u0026#x1f4d6; 代码组合(compose) —— JS 函数式编程指南 \u0026#x1f4d6; 关于 javascript 函数式编程中 compose 的实现 —— SegmentFault \u0026#x1f4d6; 实现 compose 的五种思路 —— SegmentFault \u0026#x1f4d6; JavaScript 函数式编程之函数组合函数 compose 和 pipe 的实现 —— SegmentFault \u0026#x1f4d6; JavaScript 轻量级函数式编程-第 4 章:组合函数 ——掘金 \u0026#x1f4d6; JavaScript 函数式编程（二） —— @BuptStEve \u0026#x2b06;\u0026#xfe0f; 返回目录\n33. 代码整洁之道 文章 \u0026#x1f4d6; [译] JavaScript 代码整洁之道 —— 边城 \u0026#x1f4d6; Javascript 编程风格 —— 阮一峰 \u0026#x1f4d6; 重构 - 代码整洁之道 —— 掘金 \u0026#x1f4d6; 让你的代码更简短，更整洁，更易读的 ES6 小技巧 —— 掘金 \u0026#x1f4d6; Web 前端：11 个让你代码整洁的原则 —— 伯乐在线 \u0026#x1f4d6; Clean Code concepts adapted for JavaScript —— ryanmcdermott \u0026#x2b06;\u0026#xfe0f; 返回目录\n","permalink":"http://localhost:1313/docs/js-33/","summary":"\u003cp\u003e本文转载自 \u003ca href=\"https://github.com/stephentian/33-js-concepts\"\u003e每位 JS 开发应该懂的 33 个概念（中文版）\u003c/a\u003e，其英文原版为 \u003ca href=\"https://github.com/leonardomso/33-js-concepts\"\u003eleonardomso/33-js-concepts\u003c/a\u003e。\u003c/p\u003e\n\u003ch2 id=\"简介\"\u003e简介\u003c/h2\u003e\n\u003cp\u003e这个项目是为了帮助开发者掌握 JavaScript 概念而创立的。它不是必备，但在未来学习（JavaScript）中，可以作为一篇指南。\u003c/p\u003e","title":"JavaScript 开发者应懂的 33 个概念*"},{"content":"使用 vcpkg + Visual Studio 安装 vcpkg 通过 CMake 安装和使用包 | Microsoft Learn\n克隆存储库\n第一步是从 GitHub 克隆 vcpkg 存储库。 存储库包含用于获取 vcpkg 可执行文件的脚本，以及由 vcpkg 社区维护的特选开放源代码库的注册表。 若要执行此操作，请运行：\ngit clone https://github.com/microsoft/vcpkg.git vcpkg 特选注册表是一组数量超过 2000 个的开源库。 这些库已通过 vcpkg 的持续集成管道进行验证，可以协同工作。 虽然 vcpkg 存储库不包含这些库的源代码，但它保存方案和元数据，以便在系统中生成和安装它们。\n运行启动脚本\n现在，你已经克隆了 vcpkg 存储库，请导航到 vcpkg 目录并执行启动脚本：\ncd vcpkg \u0026amp;\u0026amp; bootstrap-vcpkg.bat 启动脚本执行先决条件检查并下载 vcpkg 可执行文件。\n就这么简单！ vcpkg 已安装并可供使用。\n检查环境 安装好后运行下面这个命令看看\nvcpkg search 使用 vcpkg 安装 GMP 如需下载第三方库，需运行命令：\nvcpkg install \u0026lt;pkg\u0026gt; \u0026lt;pkg\u0026gt; 就是你安装的库名，比如想安装大数运算库 GMP，那就运行：\nvcpkg install gmp 在 VS 中测试代码 使用的是谢勰的 GMP 示例代码 iterative_Fibonacci_GMP.cpp · xiexiexx/DSAD (github.com)。\n#include \u0026lt;iostream\u0026gt; // 需要安装GMP库(https://gmplib.org). #include \u0026#34;gmp.h\u0026#34; int main() { // F[i]表示Fibonacci序列中下标为i的项. // m2, m1, f分别代表F[n - 2], F[n - 1], F[n]. mpz_t m2, m1, f; // 以字符串形式赋值m2和m1, 分别取十进制的0和1. mpz_init_set_str(m2, \u0026#34;0\u0026#34;, 10); mpz_init_set_str(m1, \u0026#34;1\u0026#34;, 10); // 初始化f(无任何值). mpz_init(f); size_t n = 2021; for (size_t i = 2; i \u0026lt; n; ++i) { // mpz_add可理解为将m2 + m1的结果赋予f. mpz_add(f, m2, m1); // mpz_set(x, y)是将y的值赋予x. mpz_set(m2, m1); mpz_set(m1, f); } mpz_add(f, m2, m1); std::cout \u0026lt;\u0026lt; \u0026#34;Fibonacci \u0026#34; \u0026lt;\u0026lt; n \u0026lt;\u0026lt; std::endl; // 打印f的值. gmp_printf(\u0026#34;%Zd\\n\u0026#34;, f); // 释放所有整数变量的空间, 注意列表要以NULL结尾. mpz_clears(m2, m1, f, NULL); return 0; } Notice 编程环境要和安装的库位数一致。例如：安装的库是 64 位，则编译环境需要使用x64。 另外还可以在 VS Code 中使用 vcpkg：在 Visual Studio Code 中使用 CMake 安装和管理包。 安装缓慢：解决vcpkg下载缓慢的问题。 一元负运算符应用于无符号类型，结果仍为无符号类型。 ","permalink":"http://localhost:1313/docs/gmp-windows/","summary":"\u003ch2 id=\"使用-vcpkg--visual-studio\"\u003e使用 vcpkg + Visual Studio\u003c/h2\u003e\n\u003ch3 id=\"安装-vcpkg\"\u003e安装 vcpkg\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://learn.microsoft.com/zh-cn/vcpkg/get_started/get-started?pivots=shell-cmd\"\u003e通过 CMake 安装和使用包 | Microsoft Learn\u003c/a\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e克隆存储库\u003c/p\u003e\n\u003cp\u003e第一步是从 GitHub 克隆 vcpkg 存储库。 存储库包含用于获取 vcpkg 可执行文件的脚本，以及由 vcpkg 社区维护的特选开放源代码库的注册表。 若要执行此操作，请运行：\u003c/p\u003e","title":"Windows 安装 C++ GMP 大数运算库"},{"content":"#0 真的醉了，现在是晚上11点，刚刚搞好 首页 的图片问题。每次本地hugo server运行都是可以正常显示图片的。但是使用 GitHub Actions 部署在云端，图片都会碎掉。\n前后检查了好久，甚至把 COS 的 https 证书都装上了。搞了跨域和黑白名单。发现无济于事。最终看到 GitHub 的 Workflows，才发现部署的代码多了一行参数······\n在workflows中的部署文件里，理应是直接hugo就可以生成相应的html代码的，但是当时并未了解工作流，直接用了别人的代码。\n- name: Build run: hugo --minify 后来仔细检查才觉得--minify参数很可疑。可能减少了什么东西让图片直接碎了。查了查官方的文档 压缩，豁然开朗。删掉参数，重新部署，终于解决一个心头病。\n#1 最近忙得一P，学校\u0026amp;学院的广播操和校运会开幕式、互联网+项目、数据结构的实验······实验的 LaTex 和 GMP 库都折磨着我（和舍友们）。想着为什么老师轻描淡写和我们说装 LaTex，原来是因为老师用 macOS，装这些都是一句话或者一下子就搞定了😢。\n比如用 Homebrew 包管理器，一行搞定 Tex：\nbrew install mactex --cask 当然最近用了 Mac 才知道真的爽。发小用不上，就借我了她的 MacBook Pro，发现软件权限管理和文件管理真的很省心。至少我不用到处找文件。这就是 *unix 系统的石粒嘛？🥰\n#2 时间再往前，看了好几部电影，包括《周处除三害》《浪潮》《军中乐园》。当然都是因为先看了《周》，发现阮经天的演技惊人，补了后面两部。但是每部都是半夜看的，看完都会强烈地戒断反应了，然后就睡不着了🫠。\n曾经🥺我茫然前行😞\n黯夜的路上🥲\n微风😢刺痛著灵魂😔\n找不到应该的方向😭\n生命这样的旅程🤓\n要用多少泪水来完整😘\n是否我能期待遥远天际🤗\n一起飞翔😋新造的人😃🎸\n🎵🎵\n我感谢天地😡િ 😭ી😡🧨\n我感谢父母😡િ 😭ી😡🧨\n我是罪人😡િ 😭ી😡🧨\n我危害人间😡િ 😭ી😡🧨\n我辜负苍生😡િ 😭ી😡🧨\n我愿抛开一切😡િ 😭✂️🤓\n消除名利权力😡િ 😭✂️🤓\n舍弃金钱物质😡િ 😭✂️🤓\n归于真我😡િ 🤯✂️🤓\n——END——\n","permalink":"http://localhost:1313/daily/24-04/","summary":"","title":"最近的记录（第一辑）"},{"content":"软件版本：2.5.88 测试时间：2024/03/26 适用范围：已登录状态\ntl;dr 通讯录中找到教师id，模拟登录，获得教师权限。\n逻辑漏洞 “我在校园”小程序就是个webview套壳，但无法查看网页域名。关注“我在校园”微信公众号后，接受请假申请、活动通知时获得微信消息推送，可以知晓网页地址。 使用浏览器查看源码，得知 ","permalink":"http://localhost:1313/docs/unbengable-wzxy/","summary":"\u003cp\u003e软件版本：2.5.88\n测试时间：2024/03/26\n适用范围：已登录状态\u003c/p\u003e\n\u003ch2 id=\"tldr\"\u003etl;dr\u003c/h2\u003e\n\u003cp\u003e通讯录中找到教师id，模拟登录，获得教师权限。\u003c/p\u003e\n\u003ch2 id=\"逻辑漏洞\"\u003e逻辑漏洞\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e“我在校园”小程序就是个webview套壳，但无法查看网页域名。关注“我在校园”微信公众号后，接受请假申请、活动通知时获得微信消息推送，可以知晓网页地址。\u003c/li\u003e\n\u003cli\u003e使用浏览器查看源码，得知\u003c/li\u003e\n\u003c/ol\u003e","title":"“我在校园”微信小程序漏洞"},{"content":"使用Github Page构建静态网页可以大大降低网页部署成本。虽然Github设有CDN加速节点，但在大陆仍然加载较慢。可以使用Netlity加速访问，提升Github Page的国内使用体验。\n加速后本网站实测结果（用了很多网站测试，测速结果基本一致）：\n更多测速结果\n在构建过程中，本网站使用Cloudflare解析域名并加速，使用Netlity再次加速Github Page。因此本网站（旧版本，版本更新见关于）是Cloudflare、Netlity和Github Page三方加速的结果。但在我部署前后的加速仍然比较明显。\n绑定仓库 前面的基础信息自行选择，并起一个用户名。只需要填框内两个项目，其他选项可不填写。\n选择Import from Git，以导入Github上的仓库。\n登入Github账号后，选择需要构建的仓库\u0026lt;username\u0026gt;.github.io。\n选择了需要的分支后点击Deploy site。\n添加自定义域名 完成后在Domains选项卡中点击Add custom domain添加自定义域名。并在域名解析服务商填写解析。\n添加后后添加两个域名，需要分别设置。点击Check DNS configuration选项，查看需要CNAME的域名。\n复制框内的二级域名或IP地址，在域名解析商设置解析。\n例如，我在Cloudflare解析域名，那我就在此处添加记录，解析上面两个域名。注意需要分开解析example.com和www.example.com域名，解析类型为CNAME。\n设置HTTPS 完成解析后在下方选项启用HTTPS，安全访问网站。（此时截图还没验证完成，验证成功后可以启用。）\n最后 推荐网站：PageSpeed Insights 这个网站为谷歌旗下网站分析的网站，可以分析网站的优缺点，提出优化建议。例如采用新一代格式提供图片、适当调整图片大小、移除阻塞渲染的资源。这些建议可以帮助提高网页加载速度。同时还给出无障碍设计建议、安全建议和SEO优化建议，谷歌还是很给力的😘。\n在国内使用Github Page还是比较累人的。网络环境让我们没法好好使用这个功能。但花些时间捣鼓捣鼓就可以有比较好的体验。关键还不用花钱。虽然Page服务没法弄数据库，但对个人博客来说已经够用了。\n","permalink":"http://localhost:1313/docs/netlity/","summary":"\u003cp\u003e使用Github Page构建静态网页可以大大降低网页部署成本。虽然Github设有CDN加速节点，但在大陆仍然加载较慢。可以使用Netlity加速访问，提升Github Page的国内使用体验。\u003c/p\u003e","title":"使用 Netlity 加速 Github Page"},{"content":"添加MongoDB 7.0存储库 更新 APT 包索引：\nsudo apt update -y 安装所有必需的软件包：\nsudo apt install wget curl gnupg2 software-properties-common apt-transport-https ca-certificates lsb-release vim 接下来，导入 MongoDB 7.0 存储库的 GPG 密钥：\ncurl -fsSL https://pgp.mongodb.com/server-7.0.asc |sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/mongodb-server-7.0.gpg 在 Ubuntu 22.04 上添加 MongoDB 7.0 的存储库：\necho \u0026#34;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/7.0 multiverse\u0026#34; | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list 安装MongoDB 7.0包 添加存储库后，使用以下命令更新包索引并安装 MongoDB 7.0：\nsudo apt update \u0026amp;\u0026amp; sudo apt install mongodb-org -y 启动并启用服务：\nsudo systemctl enable --now mongod 验证服务是否启动：\nsystemctl status mongod 验证安装的 MongoDB 版本：\nmongod --version 配置MongoDB 7.0 MongoDB 将其配置文件存储在 /etc/mongod.conf 中。在该文件中，可以对 MongoDB 进行所有所需的配置，包括数据库路径、日志目录等。\n以下是我们可以为 MongoDB 7.0 进行的一些设置。都需要打开文件进行编辑：\nsudo vim /etc/mongod.conf 启用密码验证 要在 MongoDB 7.0 上启用密码身份验证，请取消配置中以下行的注释：\nsecurity: authorization: enabled\n启用远程访问 为了允许远程访问数据库，我们需要将其设置为绑定到所有接口，而不仅仅是本地主机。为此，请进行以下修改：\n# network interfaces net: port: 27017 bindIp: 0.0.0.0 # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting. 设置完成后，保存配置并重新启动服务：\nsudo systemctl restart mongod 如果启用了服务器的防火墙，请允许该服务通过。云服务器厂商通常关闭服务器内部的防火墙，并由云服务器控制台统一管理。\nsudo ufw allow 27017 使用MongoDB 7.0数据库 要连接到 MongoDB shell，请使用：mongosh命令。\n示例输出：\nCurrent Mongosh Log ID:\t64eb1de75716266ec1174a00 Connecting to:\tmongodb://127.0.0.1:27017/?directConnection=true\u0026amp;serverSelectionTimeoutMS=2000\u0026amp;appName=mongosh+1.10.6 Using MongoDB:\t7.0.0 Using Mongosh:\t1.10.6 For mongosh info see: https://docs.mongodb.com/mongodb-shell/ To help improve our products, anonymous usage data is collected and sent to MongoDB periodically (https://www.mongodb.com/legal/privacy-policy). You can opt-out by running the disableTelemetry() command. test\u0026gt; 在 MongoDB 上创建用户 将通过创建一个名为 testuser 的示例用户来进行测试。我们还将为用户分配管理员角色：\nuse admin db.createUser( { user: \u0026#34;testuser\u0026#34;, pwd: passwordPrompt(), // or cleartext password roles: [ { role: \u0026#34;userAdminAnyDatabase\u0026#34;, db: \u0026#34;admin\u0026#34; }, \u0026#34;readWriteAnyDatabase\u0026#34; ] } ) 为用户设置所需的密码，然后使用exit命令退出。\n我们将通过使用用户连接来测试一切是否正常：\nmongosh -u testuser -p --authenticationDatabase admin 创建数据库和集合 要在 MongoDB 上创建数据库，只需切换到一个不存在的数据库，如 testdb 所示：\nuse testdb 输出：switched to db testdb。\n现在可以在数据库中创建集合：\ndb.employeedetails.insertOne( {F_Name: \u0026#34;John\u0026#34;, L_NAME: \u0026#34;Doe\u0026#34;, ID_NO: \u0026#34;23245\u0026#34;, AGE: \u0026#34;25\u0026#34;, TEL: \u0026#34;63365467666\u0026#34; } ) 查看创建的集合 show collections ","permalink":"http://localhost:1313/docs/ubuntu-mongodb/","summary":"\u003ch2 id=\"添加mongodb-70存储库\"\u003e添加MongoDB 7.0存储库\u003c/h2\u003e\n\u003cp\u003e更新 APT 包索引：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo apt update -y\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e安装所有必需的软件包：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo apt install wget curl gnupg2 software-properties-common apt-transport-https ca-certificates lsb-release vim\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接下来，导入 MongoDB 7.0 存储库的 GPG 密钥：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecurl -fsSL https://pgp.mongodb.com/server-7.0.asc \u003cspan class=\"p\"\u003e|\u003c/span\u003esudo gpg  --dearmor -o /etc/apt/trusted.gpg.d/mongodb-server-7.0.gpg\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 Ubuntu 22.04 上添加 MongoDB 7.0 的存储库：\u003c/p\u003e","title":"Ubuntu 20.04 安装 MongoDB 7.0"},{"content":"上礼拜五（24/3/8）去开组会，方哥让我们讲一讲假期都做了啥。我还以为像是做报告呢，连 Keynote 都准备了，结果到那里大家人手一个手机，有的人连笔记本和笔都没有带。真是怪尴尬的。但是想着自己能和大家分享我的假期经历，也是不错的。有时候南北差异的碰撞也能带来惊喜。也可以和大家分享了自己假期的心态。\n现场分享我的假期晚会时候，我记录的一个想法被方哥看到了。现场太紧张，反而自己忘了问问。“技术固然可以吃饭，但最终是不是都得走上管理岗才能有‘出路’？”感觉到了 20 多岁，大学毕业也可能工作了，这个问题是时候需要一些解答。\n总感觉这几年就业形势不太妙，而且 35 岁被优化也不是不可能（毕竟公考都得 35 岁以下）。其次，大龄程序员和应届生工资倒转也是常事。也总感觉国内的技术人员没有太多话语权。\n老师的解答也很明了——35 岁以前，专心搞技术，毕竟那是对形势、技术最了解的时候。但是到了 40 岁，最好的办法还是转管理。已经没有那么多的时间和精力去开发、去研发了。而且年轻人不必太早接触某些管理方面的东西。\n这几天我尝试看看电影看看书补充点能量，但还是看了爆米花剧《年会不能停！》。里面有些场景，我作为学生竟然有感同身受之处。有些场合大家似乎都得话里有话，也不能把东西讲清楚。职场、官场大家都门清，算盘一个比一个打得大声······大多数人注定是没法独善其身的，甚至有的人连好好工作都做不到了。争争斗斗是这些场合的常态，但绝对不是正常的状态。\n《年会》里有一段场景，庄尼、Magic 和潘妮在水边被公司高管堵截，提出了更高的薪水和待遇，留住 3 个人，代价是裁撤整个标准件厂。弹幕里很多人“理想的观点”都是放弃工作坚持斗争，而“现实的观点”却都是“如果是我，我真有可能留下来升职加薪”“他给的实在是太多了”。往大的说，这是时代的洪流；往小的说，这是个人利益和集体利益的矛盾。看似我们有选择，但我们在家人、钱包面前，没有选择。\n（这一篇的思路很飘，但确实是真实感受了。）\n","permalink":"http://localhost:1313/daily/tech-and-manage/","summary":"\u003cp\u003e上礼拜五（24/3/8）去开组会，方哥让我们讲一讲假期都做了啥。我还以为像是做报告呢，连 Keynote 都准备了，结果到那里大家人手一个手机，有的人连笔记本和笔都没有带。真是怪尴尬的。但是想着自己能和大家分享我的假期经历，也是不错的。有时候南北差异的碰撞也能带来惊喜。也可以和大家分享了自己假期的心态。\u003c/p\u003e","title":"技术与管理"},{"content":"使用广东工业大学的OpenWrt刷机包。亲测可以直接在西安邮电大学长安校区使用（联通校园网），并解除联通校园网的设备使用数量限制。适合有多台设备的同学使用。\n参考文章：\n⭐在Dr.COM下使用路由器上校园网WIFI（若配置别的路由器则可以看这个Github项目）\n开启telnet刷小米路由器\n本教程仅供学习，请在成功刷入OpenWrt后正确使用系统，并在学习后24小时内删除相关固件和（或）软件包。\n步骤提要 初始化，简单进入系统。\n开启telnet和ftp，刷Breed，防止变砖。\n刷OpenWrt，配置网络和Dr.com。\n文件下载 MobaXterm 官网（MobaXterm Xserver），建议下载便携版本（Portable edition）。 R3GV2 patches Onedrive链接。 Breed（小米4C）下载链接，其他路由器查看这里的表格。 OpenWrt（小米4C）Github下载链接（内置了Dr.com插件及防检测插件）。 （可选）自行安装OpenWrt其他软件包。 前置步骤：进入系统配置密码 在校内无网情况下，路由器需要先配置WIFI密码才能进行后续步骤。否则无法用命令行登录小米路由器。\n路由器插入电源，手机或电脑搜索WIFI，找到名为Xiaomi_****的无密码WIFI，直接连接。\n打开路由器默认配置界面（IP地址：192.168.31.1），跳过拨号配置界面，直接设置WIFI密码（管理员密码默认于此相同，刷入Breed后该密码会被覆盖）。随后进入路由器主页，即可关闭网页。\n在小米路由器4C上开启telnet和FTP 解压R3GV2 patches包，双击运行0.start_main.bat批处理文件，期间需要在cmd窗口输入你的路由器4C的管理员密码。结束后，路由器4C就可以用telnet远程登录和使用FTP上传下载文件了。\n原理大概是运用程序漏洞提权，获取root权限并开启FTP服务。\n用telnet登录到小米路由器4C 在MobaXterm里新建一个session，类型telnet，主机地址为192.168.31.1，用户为root，密码空，就能登录路由器4C了。\n看到命令提示符是root@XiaoQiang即可完成登录。这其实就是Linux下的Shell。\n生成eeprom备份文件 在MobaXterm的telnet终端窗口键入以下命令并回车。\ndd if=/dev/mtd3 of=/tmp/eeprom.bin 理论上讲，用dd命令可以备份路由器4C的所有分区。最好把所有分区都备份。\n使用FTP上传Breed，并下载eeprom备份文件 在Windows上打开资源管理器，在地址栏输入ftp://192.168.31.1然后回车，路由器4C的文件系统就出现了。\nFTP服务使用的是游客匿名登录，无需账户和密码，可以直接回车登录。不要使用root账户登录。\n把之前下载的breed-mt7688-reset38.bin改名为breed.bin，然后复制到/tmp目录内备用。\n另外把/tmp目录下的eeprom.bin文件下载到本地，做好备份。\nBreed的刷入与配置 刷入Breed 在MobaXterm的telnet终端窗口键入命令，不出现错误提示信息就是成功了。\nmtd write /tmp/breed.bin Bootloader 进入Breed 以下步骤务必正确进行。\n拔掉路由器4C电源，用牙签按住路由器4C的reset按钮不松开，插上电源，路由器4C的灯会闪几下，这需要几秒钟，然后松开reset，路由器已进入Breed。\n用网线连接电脑和路由器4C的Lan口（局域网网口，而不是接入外部网络的口），在电脑上用浏览器打开192.168.1.1就能看到Breed的网页界面了。\n第一次进入Breed，要在Breed里面把前面备份的eeprom.bin文件刷回去。进Breed-固件更新，里面可以刷eeprom。\n刷入OpenWrt固件 现在正式开始刷入OpenWrt固件，依次点击固件更新-勾选固件-点击选择文件，选择我们刚刚下载的Mi4C.bin，然后耐心等待固件刷入完成。\n安装完成后会自动重启，这时可以不断刷新浏览器，直到管理界面显示出来，如果没有显示，建议稍后使用192.168.1.1访问管理页面。\n账号:root\n密码:默认没有密码或者默认密码为password\nOpenWrt配置 端口校园网配置 选择左侧网络-接口，选择WAN6-编辑。\n协议选择PPPoE，然后点击出现的 Switch Protocol（切换协议）按钮；PAP/CHAP用户名为学号+@unicom，例如23338080@unicom；密码为校园网登陆密码。随后点击保存，然后点击保存并应用。\n另一个端口WAN不要进行相同设置，只设置WAN6即可。因为不能多个“设备”登录同一个校园网账号。\n无线网络设置 选择左侧网络-无线。如果提示Disabled（已禁用）就点击Enable（启用）。可能只有一个2.4G的，也可能有一个2.4G的、一个5G的。点2.4G或5G的编辑按钮。ESSID填你想要的WiFi名称。\n点击Wireless Security（无线安全）。Encryption（加密）改选为WPA2-PSK；Key（密码）填你想要的WiFi密码；最后点击保存并应用。\n配置Dr.com插件 按下图进行配置。\n点击左侧网络-接口，查看WAN6的MAC地址并复制，修改此处Dr.com的MAC拨号的地址。\n注意，在接口名称中，不一定选择的是eth0.2，而是选择与WAN6对应的接口名称，有可能是eth1，下图提示有误。\n在配置保存后，路由器会自动连接。耐心等待后，若可以在页面中看到接发数据，获取到了IP地址，即配置成功。\n如果发现路由器一直不能上网，则说明:\nwan中，学号密码输入错误(可能性30%)； drcom插件中，学号密码输入错误(可能性30%)； 路由器的wan没有与校园网端口连接(可能性20%)； 网线断了，或者路由器坏了(可能性15%)； 压根没开通校园网(可能性4.9%)； 端口被学校网络中心拉黑了(极少出现0.1%)。 （可选操作）配置防检测 具体看这里：shengqiangzhang/Drcom-GDUT-HC5661A-OpenWrt (github.com)\n大功告成 🎉至此已经可以上网了！开始享受无线设备数量限制的快乐吧！\n本教程大体还是参照Github项目Drcom-GDUT-HC5661A-OpenWrt进行配置。其他路由器可参照该项目。\n","permalink":"http://localhost:1313/docs/mi4c-drcom/","summary":"\u003cp\u003e使用广东工业大学的OpenWrt刷机包。亲测可以直接在西安邮电大学长安校区使用（联通校园网），并解除联通校园网的设备使用数量限制。适合有多台设备的同学使用。\u003c/p\u003e","title":"使用小米路由器 4C 登录西邮联通校园网"},{"content":"不懂从什么时候开始，大家被各种“打卡”包围了。各种 app 需要打卡，各种旅行地点需要打卡……好像是做任务，从某个npc手中接到了任务，然后拼命去完成了。\n打卡本身是没问题的，但是为什么大家会把原本只需要在工作、学习出现的方式，迁移到生活中，增加这种奇怪的生活仪式感？\n仔细看看手机中的app，游戏无一例外《LOL手游》《斗地主》《星穹铁道》，有的看似是每周任务，但体力一天就满了；外卖软件天天打卡领优惠券，缺只省得个5块3块，还是满30可用；健身软件和单词软件也在催着。\n健身和单词软件情有可原，但其他软件的打卡是否是多余了？游戏不是想玩就玩吗？何必凌晨四点服务器准备刷新了还得强行清醒上号领月卡奖励。支付宝种树领水果就像个浊水潭，你也不知道什么时候到底、到底需要花多少时间、到底浪费多少精力，就是为了戳屏幕上的树和最后的一箱果（说的是付出和回报不对等，当然有的人觉得值）。\n软件想赚存活率日活率，想方设法把我们困在某个软件的牢笼里。公司之间的争斗，个人的乐此不疲。\n不说了，要上课还得打卡呢，是吧，学习通？\n","permalink":"http://localhost:1313/daily/check-in/","summary":"\u003cp\u003e不懂从什么时候开始，大家被各种“打卡”包围了。各种 app 需要打卡，各种旅行地点需要打卡……好像是做任务，从某个npc手中接到了任务，然后拼命去完成了。\u003c/p\u003e","title":"滴！打卡！"},{"content":" Github: GZTimeWalker/GZCTF\n部署方式：Docker-compose（GZCTF、数据库、题目容器均在同一Docker实例中）\n系统：Ubuntu20.04-Docker20（因此默认系统已经安装了Docker和Docker Compose）\n将当前用户加入 docker 组 若出现下面的报错才需配置。\n[xxxx@xxxx ~]$ docker ps Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get \u0026#34;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json\u0026#34;: dial unix /var/run/docker.sock: connect: permission denied 问题出在用户为访问 /var/run/docker.sock 的权限，只需给用户增加权限即可。命令行输入：\nsudo chown root:docker /var/run/docker.sock\t# 修改docker.sock权限为root:docker sudo groupadd docker # 添加docker用户组 sudo gpasswd -a $USER docker # 将当前用户添加至docker用户组 newgrp docker # 更新docker用户组 配置文件 新建两个文件，位于同一个文件夹。这里的文件夹名称为 GZCTF，文件为 appsettings.json 和 docker-compose.yml 。\nappsettings.json 文件内写入：\n{ \u0026#34;AllowedHosts\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;ConnectionStrings\u0026#34;: { \u0026#34;Database\u0026#34;: \u0026#34;Host=db:5432;Database=gzctf;Username=postgres;Password=\u0026lt;String1\u0026gt;\u0026#34; //\u0026lt;String1\u0026gt;换成数据库密码，随机密码且长度足够 }, \u0026#34;Logging\u0026#34;: { \u0026#34;LogLevel\u0026#34;: { \u0026#34;Default\u0026#34;: \u0026#34;Information\u0026#34;, \u0026#34;Microsoft\u0026#34;: \u0026#34;Warning\u0026#34;, \u0026#34;Microsoft.Hosting.Lifetime\u0026#34;: \u0026#34;Information\u0026#34; } }, //邮箱配置 \u0026#34;EmailConfig\u0026#34;: { \u0026#34;SendMailAddress\u0026#34;: \u0026#34;Admin@xxx.com\u0026#34;,\t// 填入邮箱 \u0026#34;UserName\u0026#34;: \u0026#34;ctf_noreply\u0026#34;,\t// 发件人名称 \u0026#34;Password\u0026#34;: \u0026#34;******\u0026#34;, // 邮箱密码，部分服务商需要填入授权码 \u0026#34;Smtp\u0026#34;: { \u0026#34;Host\u0026#34;: \u0026#34;smtp.163.com\u0026#34;,\t// 此处为163邮箱服务器，具体自定 \u0026#34;Port\u0026#34;: 465 } }, \u0026#34;XorKey\u0026#34;: \u0026#34;\u0026lt;String2\u0026gt;\u0026#34;,\t// 自定XorKey \u0026#34;ContainerProvider\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Docker\u0026#34;, \u0026#34;PublicEntry\u0026#34;: \u0026#34;xx.xx.xx.xx\u0026#34;,\t// 域名或IP配置，用于容器生成,域名不带http/https \u0026#34;DockerConfig\u0026#34;: { \u0026#34;SwarmMode\u0026#34;: false, \u0026#34;Uri\u0026#34;: \u0026#34;\u0026#34;\t// 本地配置Docker因此此处置空 } }, \u0026#34;RequestLogging\u0026#34;: false, \u0026#34;DisableRateLimit\u0026#34;: false, \u0026#34;RegistryConfig\u0026#34;: { \u0026#34;UserName\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Password\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ServerAddress\u0026#34;: \u0026#34;\u0026#34; }, //谷歌验证码配置 \u0026#34;GoogleRecaptcha\u0026#34;: { \u0026#34;VerifyAPIAddress\u0026#34;: \u0026#34;https://www.recaptcha.net/recaptcha/api/siteverify\u0026#34;, \u0026#34;Sitekey\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Secretkey\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;RecaptchaThreshold\u0026#34;: \u0026#34;0.5\u0026#34; } } docker-compose.yml 写入：\nversion: \u0026#39;3.0\u0026#39; services: gzctf: image: gztime/gzctf:latest restart: always environment: - \u0026#34;GZCTF_ADMIN_PASSWORD=\u0026lt;String3\u0026gt;\u0026#34; # \u0026lt;String3\u0026gt;换成管理员账户密码，账号为Admin ports: - \u0026#34;80:8080\u0026#34; # 对外端口号，前为外部端口。 networks: default: volumes: - \u0026#34;./data/files:/app/uploads\u0026#34; - \u0026#34;./appsettings.json:/app/appsettings.json:ro\u0026#34; - \u0026#34;./logs:/app/log\u0026#34; - \u0026#34;./data/keys:/root/.aspnet/DataProtection-Keys\u0026#34; # - \u0026#34;./k8sconfig.yaml:/app/k8sconfig.yaml:ro\u0026#34; - \u0026#34;/var/run/docker.sock:/var/run/docker.sock\u0026#34; depends_on: - db db: image: postgres:alpine restart: always environment: - \u0026#34;POSTGRES_PASSWORD=\u0026lt;String1\u0026gt;\u0026#34; # 数据库密码，务必要和appsettings.json中的配置一致 networks: default: volumes: - \u0026#34;./data/db:/var/lib/postgresql/data\u0026#34; networks: default: driver: bridge ipam: config: - subnet: 192.168.12.0/24 命令行 通过 Xshell 和 Xftp 连接服务器，上传 GZCTF 文件夹。开始部署。\ncd GZCTF docker-compose up -d 部署完成后，建议查看 log，看部署是否成功。主要是看 gzctf 容器是否连接上了数据库。\ndocker ps 查看容器 ID：\nubuntu@VM-16-8-ubuntu:~$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 5b9bc7a475h2 gztime/gzctf:latest \u0026#34;dotnet CTFServer.dll\u0026#34; 17 hours ago Up 17 hours 0.0.0.0:80-\u0026gt;8080/tcp gzctf_gzctf_1 f00e8850dee4 postgres:alpine \u0026#34;docker-entrypoint.s…\u0026#34; 17 hours ago Up 17 hours 5432/tcp gzctf_db_1 看到 gzctf 的 ID 是 5b9bc7a475h2。使用 docker logs 5b9bc7a475h2 查看日志。看到连接上数据库的日志即可成功配置。\n平台测试 登录域名或 IP（域名需要在域名服务商配置）。用 Admin 和前面设置的密码登录。（中间就自己添加比赛什么的）然后添加需要容器的题目，并测试几个 Web 容器。\n可以测试的 Docker Hub 镜像如下。这些镜像本身部署是没有问题的。若出现错误就是平台配置问题了。服务端口均为 80。\nvaalacat/push_f12 glzjin/hctf_2018_warmup ctftraining/hbctf_2017_dameixian ctftraining/qwb_2019_smarthacker ctftraining/buuctf_2018_online_tool ctftraining/qwb_2019_upload ctftraining/qwb_2019_supersqli 需要注意的是，部分镜像需要内存和存储较多，可能出现创建容器成功但无法打开网页的情况。\n容器其他错误排查 部署报错：\n不会两个文件内容改都不改吧？ 检查 pip 版本，检查 Docker 版本。 容器无法创建：数据库是否连上？看前面的配置和使用 docker logs xxx 命令查看日志。\n容器创建成功但无法打开网页：\n域名访问：服务商的域名配置是否正确？\n内存限制和存储限制是否太小？\n服务器的防火墙端口是否打开了？\n","permalink":"http://localhost:1313/docs/gzctf-build/","summary":"\u003cblockquote\u003e\n\u003cp\u003eGithub: \u003ca href=\"https://github.com/GZTimeWalker/GZCTF\"\u003eGZTimeWalker/GZCTF\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e部署方式：Docker-compose（GZCTF、数据库、题目容器均在同一Docker实例中）\u003c/p\u003e\n\u003cp\u003e系统：Ubuntu20.04-Docker20（因此默认系统已经安装了Docker和Docker Compose）\u003c/p\u003e","title":"GZCTF 搭建部署笔记（Docker）"},{"content":"以下参数适用于全局配置文件hugo.yaml、hugo.toml、hugo.json。\n可以使用命令行hugo config命令打印当前站点的配置。\n英文原版位于 Configure Hugo | Hugo 。\n","permalink":"http://localhost:1313/docs/hugo-config/","summary":"\u003cp\u003e以下参数适用于全局配置文件\u003ccode\u003ehugo.yaml\u003c/code\u003e、\u003ccode\u003ehugo.toml\u003c/code\u003e、\u003ccode\u003ehugo.json\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e可以使用命令行\u003ccode\u003ehugo config\u003c/code\u003e命令打印当前站点的配置。\u003c/p\u003e","title":"Hugo 常见配置参数"},{"content":"关于我 一个喜欢弄弄数码的信息安全本科生。\n这个网站 网站域名（wdh.hk）来自香港域名註冊有限公司（Hong Kong Domain Name Registration Company Limited，HKDNR）。\n2023/03/20 最初是2020年初疫情在家使用Wordpress建站。现在是大一寒假闲得无聊，弄了这个网站。使用Vuepress-Theme-Hope构建，部署在Github Page上。使用Netlify、Vercel和Cloudflare做CDN。\n之前已经弄过几次博客了，翻来覆去选了好多个博客系统。最初选择了Wordpress，当时是2020年初防疫在家，手头有一个树莓派，想搭一个小小的服务器。Wordpress用的还是5.x版本，许多界面不太友好。而且鬼佬的建站思维不太一样，踩了很多坑。\n后来选择用一些虚拟主机，有稳定的网络资源，云端部署也挺方便。而且找到了一家比较便宜的厂家。21年决定用腾讯云，新人优惠的70多块钱让我获得了1年的快乐。当时不仅仅尝试了Wordpress，还用过Ghost和Typecho一段时间。Ghost主打付费杂志一类，Typecho我也不想频繁上传（当时还没有Git和FTP的知识），便重新回到Wordpress的怀抱。\n最近服务器到期了，一直没有什么很大的项目需要服务器。便想着开始尝试静态网站。原本想使用Hexo或Hugo，但这两个的默认界面比较丑🤣，我就选择了比较好看的Vuepress，并且使用了Hope这个主题。Mr. Hope直接开发了这一个主题，加上了很多功能，还很好看。\n部署静态网页能学习npm和JS之类的知识，而且和源码打交道。算是一种进步🙊。\n2024/03/10 现在是大二下了，开学第二周的周末。发现网站一年没有更新什么东西，而且 Vuepress Theme Hope 过于复杂 （可能是人老了想什么都简单点，够用就行） ，就换成了 Hugo + Github Pages 的方案，并且使用 Github Actions 部署，主打一个省事。把源码 git push 到私有仓库后直接触发在线编译，20 秒左右可以更新至公开仓库。\n另外比较难绷的是，上一版的《GZCTF部署笔记》莫名其妙被 Google 和 Bing 直接收录到相关搜索第一位。但是其中的部署文件的端口映射写错了，非常的尴尬 orz。是怎么发现的呢？是学弟搜到了我的文章，然后照着做了，发现搞不通，直接找我了🙈🙉🙊。\n2025/02/03 现在是大三的寒假了。今天回舅舅家开年吃饭。我发现原来的主题没有适配新的 Hugo 特性，决定换一个新主题。有些短代码需要移植适配，希望可以简单点……有点想换成全英博客，但是博客终究是给人看的，我还得考虑考虑。\n其实网站于 2024 年 10 月暂停了。原因很简单，域名过期了，想换服务商，可以更便宜一点。等了 3 个月，域名终于释放了。\n网站更新 2024-04-20 新增【评论系统】\n加入评论系统，使用 Giscus；\n2024-06-22 新增【备案】\n加入底部备案，原站 使用「萌ICP备」备案号。\n2024-06-24 关闭【碎碎念】通道\n关闭碎碎念，考虑使用 GitHub Workflows 处理碎碎念内容，或是调用 Memos 系统的 API。\n2025-02-03 更新【备案】\n更新底部备案，原站 使用「萌ICP备」备案号。\n网站更新计划 加入页面【时间轴】和【短代码 · 时间轴】，将【碎碎念】外链移入。 加入页面【友链】。 加入页面【收藏】，用于好用的、推荐的网站的推荐。 加入页面【记忆】，计划调用腾讯云COS API将照片移入。 新增多条实用【短代码】，进度 ###·······。 新增评论系统。 修改【文档】的首页，更改为列表模式，而不是空白。 目前状态 【23/03/20 更】 最近忙，感觉明显比较暴躁了。班里还有同学周末夜不归宿找不到人，气死人还急死人。这周末补考高数，还有计算机二级同天考。一个上午直接坐牢。。。\n【24/03/10 更】 一个寒假的回家，算是充了个能，现在有些事我也试着给自己 anyway 的心态。不必要什么事情都揽着。Just Do the Right Things What I Think. （放洋屁）\n【25/02/03 更】 最近和小伙伴决定来一个创业项目。现在大环境不太好，但愿我们集思广益能搞出来一个大事业叭:)\n联络 电邮：daaihang#qq.com (# -\u0026gt; @) HitHub：@daaihang End\r","permalink":"http://localhost:1313/about/","summary":"\u003ch2 id=\"关于我\"\u003e关于我\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/daaihang\"\u003e\u003cimg loading=\"lazy\" src=\"https://img.shields.io/badge/GitHub-Daaihang%20Wong-brightgreen\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e一个喜欢弄弄数码的信息安全本科生。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"Top Langs\" loading=\"lazy\" src=\"https://github-readme-stats.vercel.app/api/top-langs/?username=daaihang\"\u003e\u003c/p\u003e\n\u003ch2 id=\"这个网站\"\u003e这个网站\u003c/h2\u003e\n\u003cp\u003e网站域名（\u003ca href=\"http://wdh.hk\"\u003ewdh.hk\u003c/a\u003e）来自香港域名註冊有限公司（Hong Kong Domain Name Registration Company Limited，HKDNR）。\u003c/p\u003e\n\u003ch3 id=\"20230320\"\u003e2023/03/20\u003c/h3\u003e\n\u003cp\u003e最初是2020年初疫情在家使用Wordpress建站。现在是大一寒假闲得无聊，弄了这个网站。使用Vuepress-Theme-Hope构建，部署在Github Page上。\u003cdel\u003e使用Netlify、Vercel和Cloudflare做CDN。\u003c/del\u003e\u003c/p\u003e","title":"关于"}]